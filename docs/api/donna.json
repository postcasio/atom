[
  {
    "repository": "https://github.com/atom/atom.git",
    "version": "0.121.0",
    "files": {
      "src/atom.coffee": {
        "objects": {
          "0": {
            "9": {
              "name": "crypto",
              "type": "import",
              "range": [
                [
                  0,
                  9
                ],
                [
                  0,
                  24
                ]
              ],
              "bindingType": "variable",
              "module": "crypto",
              "builtin": true
            }
          },
          "1": {
            "6": {
              "name": "ipc",
              "type": "import",
              "range": [
                [
                  1,
                  6
                ],
                [
                  1,
                  18
                ]
              ],
              "bindingType": "variable",
              "module": "ipc"
            }
          },
          "2": {
            "5": {
              "name": "os",
              "type": "import",
              "range": [
                [
                  2,
                  5
                ],
                [
                  2,
                  16
                ]
              ],
              "bindingType": "variable",
              "module": "os",
              "builtin": true
            }
          },
          "3": {
            "7": {
              "name": "path",
              "type": "import",
              "range": [
                [
                  3,
                  7
                ],
                [
                  3,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "path",
              "builtin": true
            }
          },
          "4": {
            "9": {
              "name": "remote",
              "type": "import",
              "range": [
                [
                  4,
                  9
                ],
                [
                  4,
                  24
                ]
              ],
              "bindingType": "variable",
              "module": "remote"
            }
          },
          "5": {
            "9": {
              "name": "screen",
              "type": "import",
              "range": [
                [
                  5,
                  9
                ],
                [
                  5,
                  24
                ]
              ],
              "bindingType": "variable",
              "module": "screen"
            }
          },
          "6": {
            "8": {
              "name": "shell",
              "type": "import",
              "range": [
                [
                  6,
                  8
                ],
                [
                  6,
                  22
                ]
              ],
              "bindingType": "variable",
              "module": "shell"
            }
          },
          "8": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  8,
                  4
                ],
                [
                  8,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "9": {
            "1": {
              "type": "import",
              "range": [
                [
                  9,
                  1
                ],
                [
                  9,
                  10
                ]
              ],
              "bindingType": "variable",
              "module": "grim@0.11.0",
              "name": "deprecated",
              "exportsProperty": "deprecated"
            }
          },
          "10": {
            "1": {
              "type": "import",
              "range": [
                [
                  10,
                  1
                ],
                [
                  10,
                  5
                ]
              ],
              "bindingType": "variable",
              "module": "theorist@^1",
              "name": "Model",
              "exportsProperty": "Model"
            }
          },
          "11": {
            "5": {
              "name": "fs",
              "type": "import",
              "range": [
                [
                  11,
                  5
                ],
                [
                  11,
                  21
                ]
              ],
              "bindingType": "variable",
              "module": "fs-plus@^2.2.6"
            }
          },
          "13": {
            "1": {
              "type": "import",
              "range": [
                [
                  13,
                  1
                ],
                [
                  13,
                  1
                ]
              ],
              "bindingType": "variable",
              "path": "./space-pen-extensions",
              "name": "$",
              "exportsProperty": "$"
            }
          },
          "14": {
            "21": {
              "name": "WindowEventHandler",
              "type": "import",
              "range": [
                [
                  14,
                  21
                ],
                [
                  14,
                  52
                ]
              ],
              "bindingType": "variable",
              "path": "./window-event-handler"
            }
          },
          "35": {
            "0": {
              "type": "class",
              "name": "Atom",
              "superClass": "Model",
              "bindingType": "exports",
              "classProperties": [
                [
                  36,
                  12
                ],
                [
                  44,
                  17
                ],
                [
                  48,
                  16
                ],
                [
                  53,
                  14
                ],
                [
                  71,
                  17
                ],
                [
                  89,
                  21
                ],
                [
                  95,
                  22
                ],
                [
                  99,
                  20
                ],
                [
                  109,
                  21
                ]
              ],
              "prototypeProperties": [
                [
                  112,
                  31
                ],
                [
                  115,
                  15
                ],
                [
                  123,
                  14
                ],
                [
                  177,
                  31
                ],
                [
                  181,
                  33
                ],
                [
                  184,
                  24
                ],
                [
                  188,
                  20
                ],
                [
                  194,
                  23
                ],
                [
                  211,
                  23
                ],
                [
                  221,
                  21
                ],
                [
                  224,
                  32
                ],
                [
                  229,
                  30
                ],
                [
                  246,
                  27
                ],
                [
                  252,
                  25
                ],
                [
                  259,
                  19
                ],
                [
                  262,
                  22
                ],
                [
                  269,
                  28
                ],
                [
                  281,
                  28
                ],
                [
                  285,
                  27
                ],
                [
                  292,
                  21
                ],
                [
                  320,
                  22
                ],
                [
                  336,
                  14
                ],
                [
                  339,
                  15
                ],
                [
                  353,
                  8
                ],
                [
                  377,
                  11
                ],
                [
                  397,
                  18
                ],
                [
                  400,
                  22
                ],
                [
                  407,
                  16
                ],
                [
                  411,
                  18
                ],
                [
                  415,
                  31
                ],
                [
                  419,
                  10
                ],
                [
                  423,
                  9
                ],
                [
                  428,
                  8
                ],
                [
                  432,
                  8
                ],
                [
                  439,
                  11
                ],
                [
                  446,
                  15
                ],
                [
                  450,
                  10
                ],
                [
                  457,
                  17
                ],
                [
                  464,
                  9
                ],
                [
                  467,
                  8
                ],
                [
                  473,
                  13
                ],
                [
                  477,
                  14
                ],
                [
                  481,
                  20
                ],
                [
                  485,
                  17
                ],
                [
                  490,
                  16
                ],
                [
                  496,
                  14
                ],
                [
                  500,
                  21
                ],
                [
                  506,
                  20
                ],
                [
                  509,
                  12
                ],
                [
                  523,
                  21
                ],
                [
                  526,
                  20
                ],
                [
                  529,
                  22
                ],
                [
                  533,
                  8
                ],
                [
                  537,
                  25
                ],
                [
                  541,
                  25
                ],
                [
                  555,
                  22
                ]
              ],
              "doc": " Public: Atom global for dealing with packages, themes, menus, and the window.\n\nAn instance of this class is always available as the `atom` global.\n\n## Useful properties available:\n\n * `atom.clipboard`     - A {Clipboard} instance\n * `atom.config`        - A {Config} instance\n * `atom.contextMenu`   - A {ContextMenuManager} instance\n * `atom.deserializers` - A {DeserializerManager} instance\n * `atom.keymaps`        - A {KeymapManager} instance\n * `atom.menu`          - A {MenuManager} instance\n * `atom.packages`      - A {PackageManager} instance\n * `atom.project`       - A {Project} instance\n * `atom.syntax`        - A {Syntax} instance\n * `atom.themes`        - A {ThemeManager} instance\n * `atom.workspace`     - A {Workspace} instance\n * `atom.workspaceView` - A {WorkspaceView} instance ",
              "range": [
                [
                  35,
                  0
                ],
                [
                  567,
                  27
                ]
              ]
            }
          },
          "36": {
            "12": {
              "name": "version",
              "type": "primitive",
              "range": [
                [
                  36,
                  12
                ],
                [
                  36,
                  12
                ]
              ],
              "bindingType": "classProperty"
            }
          },
          "44": {
            "17": {
              "name": "loadOrCreate",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "mode"
              ],
              "range": [
                [
                  44,
                  17
                ],
                [
                  48,
                  1
                ]
              ],
              "doc": " Public: Load or create the Atom environment in the given mode.\n\nmode - Pass 'editor' or 'spec' depending on the kind of environment you\n       want to build.\n\nReturns an Atom instance, fully initialized "
            }
          },
          "48": {
            "16": {
              "name": "deserialize",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "state"
              ],
              "range": [
                [
                  48,
                  16
                ],
                [
                  53,
                  1
                ]
              ],
              "doc": "Private: Deserializes the Atom environment from a state object "
            }
          },
          "53": {
            "14": {
              "name": "loadState",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "mode"
              ],
              "range": [
                [
                  53,
                  14
                ],
                [
                  71,
                  1
                ]
              ],
              "doc": " Private: Loads and returns the serialized state corresponding to this window\nif it exists; otherwise returns undefined. "
            }
          },
          "71": {
            "17": {
              "name": "getStatePath",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "mode"
              ],
              "range": [
                [
                  71,
                  17
                ],
                [
                  89,
                  1
                ]
              ],
              "doc": " Private: Returns the path where the state for the current window will be\nlocated if it exists. "
            }
          },
          "89": {
            "21": {
              "name": "getConfigDirPath",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  89,
                  21
                ],
                [
                  95,
                  1
                ]
              ],
              "doc": " Private: Get the directory path to Atom's configuration area.\n\nReturns the absolute path to ~/.atom "
            }
          },
          "95": {
            "22": {
              "name": "getStorageDirPath",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  95,
                  22
                ],
                [
                  99,
                  1
                ]
              ],
              "doc": " Private: Get the path to Atom's storage directory.\n\nReturns the absolute path to ~/.atom/storage "
            }
          },
          "99": {
            "20": {
              "name": "getLoadSettings",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  99,
                  20
                ],
                [
                  109,
                  1
                ]
              ],
              "doc": "Private: Returns the load settings hash associated with the current window. "
            }
          },
          "109": {
            "21": {
              "name": "getCurrentWindow",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  109,
                  21
                ],
                [
                  112,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "112": {
            "31": {
              "name": "workspaceViewParentSelector",
              "type": "primitive",
              "range": [
                [
                  112,
                  31
                ],
                [
                  112,
                  36
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "115": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  115,
                  15
                ],
                [
                  123,
                  1
                ]
              ],
              "doc": "Private: Call .loadOrCreate instead "
            }
          },
          "123": {
            "14": {
              "name": "initialize",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  123,
                  14
                ],
                [
                  177,
                  1
                ]
              ],
              "doc": " Public: Sets up the basic services that should be available in all modes\n(both spec and application). Call after this instance has been assigned to\nthe `atom` global. "
            }
          },
          "177": {
            "31": {
              "name": "registerRepresentationClass",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  177,
                  31
                ],
                [
                  181,
                  1
                ]
              ],
              "doc": "Deprecated: Callers should be converted to use atom.deserializers "
            }
          },
          "181": {
            "33": {
              "name": "registerRepresentationClasses",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  181,
                  33
                ],
                [
                  184,
                  1
                ]
              ],
              "doc": "Deprecated: Callers should be converted to use atom.deserializers "
            }
          },
          "184": {
            "24": {
              "name": "setBodyPlatformClass",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  184,
                  24
                ],
                [
                  188,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "188": {
            "20": {
              "name": "getCurrentWindow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  188,
                  20
                ],
                [
                  194,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "194": {
            "23": {
              "name": "getWindowDimensions",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  194,
                  23
                ],
                [
                  211,
                  1
                ]
              ],
              "doc": " Public: Get the dimensions of this window.\n\nReturns an object with x, y, width, and height keys. "
            }
          },
          "211": {
            "23": {
              "name": "setWindowDimensions",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  211,
                  23
                ],
                [
                  221,
                  1
                ]
              ],
              "doc": " Public: Set the dimensions of the window.\n\nThe window will be centered if either the x or y coordinate is not set\nin the dimensions parameter. If x or y are omitted the window will be\ncentered. If height or width are omitted only the position will be changed.\n\ndimensions - An {Object} with the following keys:\n  :x - The new x coordinate.\n  :y - The new y coordinate.\n  :width - The new width.\n  :height - The new height. "
            }
          },
          "221": {
            "21": {
              "name": "isValidDimensions",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  221,
                  21
                ],
                [
                  224,
                  1
                ]
              ],
              "doc": " Private: Returns true if the dimensions are useable, false if they should be ignored.\nWork around for https://github.com/atom/atom-shell/issues/473 "
            }
          },
          "224": {
            "32": {
              "name": "storeDefaultWindowDimensions",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  224,
                  32
                ],
                [
                  229,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "229": {
            "30": {
              "name": "getDefaultWindowDimensions",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  229,
                  30
                ],
                [
                  246,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "246": {
            "27": {
              "name": "restoreWindowDimensions",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  246,
                  27
                ],
                [
                  252,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "252": {
            "25": {
              "name": "storeWindowDimensions",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  252,
                  25
                ],
                [
                  259,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "259": {
            "19": {
              "name": "getLoadSettings",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  259,
                  19
                ],
                [
                  262,
                  1
                ]
              ],
              "doc": "Private: Returns the load settings hash associated with the current window. "
            }
          },
          "262": {
            "22": {
              "name": "deserializeProject",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  262,
                  22
                ],
                [
                  269,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "269": {
            "28": {
              "name": "deserializeWorkspaceView",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  269,
                  28
                ],
                [
                  281,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "281": {
            "28": {
              "name": "deserializePackageStates",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  281,
                  28
                ],
                [
                  285,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "285": {
            "27": {
              "name": "deserializeEditorWindow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  285,
                  27
                ],
                [
                  292,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "292": {
            "21": {
              "name": "startEditorWindow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  292,
                  21
                ],
                [
                  320,
                  1
                ]
              ],
              "doc": "Private: Call this method when establishing a real application window. "
            }
          },
          "320": {
            "22": {
              "name": "unloadEditorWindow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  320,
                  22
                ],
                [
                  336,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "336": {
            "14": {
              "name": "loadThemes",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  336,
                  14
                ],
                [
                  339,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "339": {
            "15": {
              "name": "watchThemes",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  339,
                  15
                ],
                [
                  353,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "353": {
            "8": {
              "name": "open",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "options"
              ],
              "range": [
                [
                  353,
                  8
                ],
                [
                  377,
                  1
                ]
              ],
              "doc": " Public: Open a new Atom window using the given options.\n\nCalling this method without an options parameter will open a prompt to pick\na file/folder to open in the new window.\n\noptions - An {Object} with the following keys:\n  :pathsToOpen -  An {Array} of {String} paths to open. "
            }
          },
          "377": {
            "11": {
              "name": "confirm",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  377,
                  11
                ],
                [
                  397,
                  1
                ]
              ],
              "doc": " Public: Open a confirm dialog.\n\n## Example\n\n```coffee\n  atom.confirm\n    message: 'How you feeling?'\n    detailedMessage: 'Be honest.'\n    buttons:\n      Good: -> window.alert('good to hear')\n      Bad:  -> window.alert('bummer')\n```\n\noptions - An {Object} with the following keys:\n  :message - The {String} message to display.\n  :detailedMessage - The {String} detailed message to display.\n  :buttons - Either an array of strings or an object where keys are\n             button names and the values are callbacks to invoke when\n             clicked.\n\nReturns the chosen button index {Number} if the buttons option was an array. "
            }
          },
          "397": {
            "18": {
              "name": "showSaveDialog",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "callback"
              ],
              "range": [
                [
                  397,
                  18
                ],
                [
                  400,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "400": {
            "22": {
              "name": "showSaveDialogSync",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "defaultPath"
              ],
              "range": [
                [
                  400,
                  22
                ],
                [
                  407,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "407": {
            "16": {
              "name": "openDevTools",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  407,
                  16
                ],
                [
                  411,
                  1
                ]
              ],
              "doc": "Public: Open the dev tools for the current window. "
            }
          },
          "411": {
            "18": {
              "name": "toggleDevTools",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  411,
                  18
                ],
                [
                  415,
                  1
                ]
              ],
              "doc": "Public: Toggle the visibility of the dev tools for the current window. "
            }
          },
          "415": {
            "31": {
              "name": "executeJavaScriptInDevTools",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "code"
              ],
              "range": [
                [
                  415,
                  31
                ],
                [
                  419,
                  1
                ]
              ],
              "doc": "Public: Execute code in dev tools. "
            }
          },
          "419": {
            "10": {
              "name": "reload",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  419,
                  10
                ],
                [
                  423,
                  1
                ]
              ],
              "doc": "Public: Reload the current window. "
            }
          },
          "423": {
            "9": {
              "name": "focus",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  423,
                  9
                ],
                [
                  428,
                  1
                ]
              ],
              "doc": "Public: Focus the current window. "
            }
          },
          "428": {
            "8": {
              "name": "show",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  428,
                  8
                ],
                [
                  432,
                  1
                ]
              ],
              "doc": "Public: Show the current window. "
            }
          },
          "432": {
            "8": {
              "name": "hide",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  432,
                  8
                ],
                [
                  439,
                  1
                ]
              ],
              "doc": "Public: Hide the current window. "
            }
          },
          "439": {
            "11": {
              "name": "setSize",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "width",
                "height"
              ],
              "range": [
                [
                  439,
                  11
                ],
                [
                  446,
                  1
                ]
              ],
              "doc": " Public: Set the size of current window.\n\nwidth  - The {Number} of pixels.\nheight - The {Number} of pixels. "
            }
          },
          "446": {
            "15": {
              "name": "setPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "x",
                "y"
              ],
              "range": [
                [
                  446,
                  15
                ],
                [
                  450,
                  1
                ]
              ],
              "doc": " Public: Set the position of current window.\n\nx - The {Number} of pixels.\ny - The {Number} of pixels. "
            }
          },
          "450": {
            "10": {
              "name": "center",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  450,
                  10
                ],
                [
                  457,
                  1
                ]
              ],
              "doc": "Public: Move current window to the center of the screen. "
            }
          },
          "457": {
            "17": {
              "name": "displayWindow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  457,
                  17
                ],
                [
                  464,
                  1
                ]
              ],
              "doc": " Private: Schedule the window to be shown and focused on the next tick.\n\nThis is done in a next tick to prevent a white flicker from occurring\nif called synchronously. "
            }
          },
          "464": {
            "9": {
              "name": "close",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  464,
                  9
                ],
                [
                  467,
                  1
                ]
              ],
              "doc": "Public: Close the current window. "
            }
          },
          "467": {
            "8": {
              "name": "exit",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "status"
              ],
              "range": [
                [
                  467,
                  8
                ],
                [
                  473,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "473": {
            "13": {
              "name": "inDevMode",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  473,
                  13
                ],
                [
                  477,
                  1
                ]
              ],
              "doc": "Public: Is the current window in development mode? "
            }
          },
          "477": {
            "14": {
              "name": "inSpecMode",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  477,
                  14
                ],
                [
                  481,
                  1
                ]
              ],
              "doc": "Public: Is the current window running specs? "
            }
          },
          "481": {
            "20": {
              "name": "toggleFullScreen",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  481,
                  20
                ],
                [
                  485,
                  1
                ]
              ],
              "doc": "Public: Toggle the full screen state of the current window. "
            }
          },
          "485": {
            "17": {
              "name": "setFullScreen",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "fullScreen"
              ],
              "range": [
                [
                  485,
                  17
                ],
                [
                  490,
                  1
                ]
              ],
              "doc": "Public: Set the full screen state of the current window. "
            }
          },
          "490": {
            "16": {
              "name": "isFullScreen",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  490,
                  16
                ],
                [
                  496,
                  1
                ]
              ],
              "doc": "Public: Is the current window in full screen mode? "
            }
          },
          "496": {
            "14": {
              "name": "getVersion",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  496,
                  14
                ],
                [
                  500,
                  1
                ]
              ],
              "doc": " Public: Get the version of the Atom application.\n\nReturns the version text {String}. "
            }
          },
          "500": {
            "21": {
              "name": "isReleasedVersion",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  500,
                  21
                ],
                [
                  506,
                  1
                ]
              ],
              "doc": "Public: Determine whether the current version is an official release. "
            }
          },
          "506": {
            "20": {
              "name": "getConfigDirPath",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  506,
                  20
                ],
                [
                  509,
                  1
                ]
              ],
              "doc": " Private: Get the directory path to Atom's configuration area.\n\nReturns the absolute path to ~/.atom "
            }
          },
          "509": {
            "12": {
              "name": "saveSync",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  509,
                  12
                ],
                [
                  523,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "523": {
            "21": {
              "name": "getWindowLoadTime",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  523,
                  21
                ],
                [
                  526,
                  1
                ]
              ],
              "doc": " Public: Get the time taken to completely load the current window.\n\nThis time include things like loading and activating packages, creating\nDOM elements for the editor, and reading the config.\n\nReturns the number of milliseconds taken to load the window or null\nif the window hasn't finished loading yet. "
            }
          },
          "526": {
            "20": {
              "name": "crashMainProcess",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  526,
                  20
                ],
                [
                  529,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "529": {
            "22": {
              "name": "crashRenderProcess",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  529,
                  22
                ],
                [
                  533,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "533": {
            "8": {
              "name": "beep",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  533,
                  8
                ],
                [
                  537,
                  1
                ]
              ],
              "doc": "Public: Visually and audibly trigger a beep. "
            }
          },
          "537": {
            "25": {
              "name": "getUserInitScriptPath",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  537,
                  25
                ],
                [
                  541,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "541": {
            "25": {
              "name": "requireUserInitScript",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  541,
                  25
                ],
                [
                  555,
                  1
                ]
              ]
            }
          },
          "555": {
            "22": {
              "name": "requireWithGlobals",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "id",
                "globals"
              ],
              "range": [
                [
                  555,
                  22
                ],
                [
                  567,
                  27
                ]
              ],
              "doc": " Public: Require the module with the given globals.\n\nThe globals will be set on the `window` object and removed after the\nrequire completes.\n\nid - The {String} module name or path.\nglobals - An {Object} to set as globals during require (default: {}) "
            }
          }
        },
        "exports": 35
      },
      "src/browser/application-menu.coffee": {
        "objects": {
          "0": {
            "6": {
              "name": "app",
              "type": "import",
              "range": [
                [
                  0,
                  6
                ],
                [
                  0,
                  18
                ]
              ],
              "bindingType": "variable",
              "module": "app"
            }
          },
          "1": {
            "6": {
              "name": "ipc",
              "type": "import",
              "range": [
                [
                  1,
                  6
                ],
                [
                  1,
                  18
                ]
              ],
              "bindingType": "variable",
              "module": "ipc"
            }
          },
          "2": {
            "7": {
              "name": "Menu",
              "type": "import",
              "range": [
                [
                  2,
                  7
                ],
                [
                  2,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "menu"
            }
          },
          "3": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  3,
                  4
                ],
                [
                  3,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "10": {
            "0": {
              "type": "class",
              "name": "ApplicationMenu",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  11,
                  15
                ],
                [
                  22,
                  10
                ],
                [
                  35,
                  20
                ],
                [
                  47,
                  23
                ],
                [
                  58,
                  29
                ],
                [
                  63,
                  21
                ],
                [
                  68,
                  22
                ],
                [
                  90,
                  22
                ],
                [
                  102,
                  17
                ],
                [
                  113,
                  21
                ],
                [
                  131,
                  25
                ]
              ],
              "doc": " Private: Used to manage the global application menu.\n\nIt's created by {AtomApplication} upon instantiation and used to add, remove\nand maintain the state of all menu items. ",
              "range": [
                [
                  10,
                  0
                ],
                [
                  145,
                  18
                ]
              ]
            }
          },
          "11": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  11,
                  15
                ],
                [
                  22,
                  1
                ]
              ]
            }
          },
          "22": {
            "10": {
              "name": "update",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "template",
                "keystrokesByCommand"
              ],
              "range": [
                [
                  22,
                  10
                ],
                [
                  35,
                  1
                ]
              ],
              "doc": " Public: Updates the entire menu with the given keybindings.\n\ntemplate - The Object which describes the menu to display.\nkeystrokesByCommand - An Object where the keys are commands and the values\n                      are Arrays containing the keystroke. "
            }
          },
          "35": {
            "20": {
              "name": "flattenMenuItems",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "menu"
              ],
              "range": [
                [
                  35,
                  20
                ],
                [
                  47,
                  1
                ]
              ],
              "doc": " Private: Flattens the given menu and submenu items into an single Array.\n\nmenu - A complete menu configuration object for atom-shell's menu API.\n\nReturns an Array of native menu items. "
            }
          },
          "47": {
            "23": {
              "name": "flattenMenuTemplate",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "template"
              ],
              "range": [
                [
                  47,
                  23
                ],
                [
                  58,
                  1
                ]
              ],
              "doc": " Private: Flattens the given menu template into an single Array.\n\ntemplate - An object describing the menu item.\n\nReturns an Array of native menu items. "
            }
          },
          "58": {
            "29": {
              "name": "enableWindowSpecificItems",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "enable"
              ],
              "range": [
                [
                  58,
                  29
                ],
                [
                  63,
                  1
                ]
              ],
              "doc": " Public: Used to make all window related menu items are active.\n\nenable - If true enables all window specific items, if false disables all\n         window specific items. "
            }
          },
          "63": {
            "21": {
              "name": "substituteVersion",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "template"
              ],
              "range": [
                [
                  63,
                  21
                ],
                [
                  68,
                  1
                ]
              ],
              "doc": "Private: Replaces VERSION with the current version. "
            }
          },
          "68": {
            "22": {
              "name": "showUpdateMenuItem",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "state"
              ],
              "range": [
                [
                  68,
                  22
                ],
                [
                  90,
                  1
                ]
              ],
              "doc": "Private: Sets the proper visible state the update menu items "
            }
          },
          "90": {
            "22": {
              "name": "getDefaultTemplate",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  90,
                  22
                ],
                [
                  102,
                  1
                ]
              ],
              "doc": " Private: Default list of menu items.\n\nReturns an Array of menu item Objects. "
            }
          },
          "102": {
            "17": {
              "name": "focusedWindow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  102,
                  17
                ],
                [
                  113,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "113": {
            "21": {
              "name": "translateTemplate",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "template",
                "keystrokesByCommand"
              ],
              "range": [
                [
                  113,
                  21
                ],
                [
                  131,
                  1
                ]
              ],
              "doc": " Private: Combines a menu template with the appropriate keystroke.\n\ntemplate - An Object conforming to atom-shell's menu api but lacking\n           accelerator and click properties.\nkeystrokesByCommand - An Object where the keys are commands and the values\n                      are Arrays containing the keystroke.\n\nReturns a complete menu configuration object for atom-shell's menu API. "
            }
          },
          "131": {
            "25": {
              "name": "acceleratorForCommand",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "command",
                "keystrokesByCommand"
              ],
              "range": [
                [
                  131,
                  25
                ],
                [
                  145,
                  18
                ]
              ],
              "doc": " Private: Determine the accelerator for a given command.\n\ncommand - The name of the command.\nkeystrokesByCommand - An Object where the keys are commands and the values\n                      are Arrays containing the keystroke.\n\nReturns a String containing the keystroke in a format that can be interpreted\n  by atom shell to provide nice icons where available. "
            }
          }
        },
        "exports": 10
      },
      "src/browser/atom-application.coffee": {
        "objects": {
          "0": {
            "13": {
              "name": "AtomWindow",
              "type": "import",
              "range": [
                [
                  0,
                  13
                ],
                [
                  0,
                  35
                ]
              ],
              "bindingType": "variable",
              "path": "./atom-window"
            }
          },
          "1": {
            "18": {
              "name": "ApplicationMenu",
              "type": "import",
              "range": [
                [
                  1,
                  18
                ],
                [
                  1,
                  45
                ]
              ],
              "bindingType": "variable",
              "path": "./application-menu"
            }
          },
          "2": {
            "22": {
              "name": "AtomProtocolHandler",
              "type": "import",
              "range": [
                [
                  2,
                  22
                ],
                [
                  2,
                  54
                ]
              ],
              "bindingType": "variable",
              "path": "./atom-protocol-handler"
            }
          },
          "3": {
            "20": {
              "name": "AutoUpdateManager",
              "type": "import",
              "range": [
                [
                  3,
                  20
                ],
                [
                  3,
                  50
                ]
              ],
              "bindingType": "variable",
              "path": "./auto-update-manager"
            }
          },
          "4": {
            "16": {
              "name": "BrowserWindow",
              "type": "import",
              "range": [
                [
                  4,
                  16
                ],
                [
                  4,
                  39
                ]
              ],
              "bindingType": "variable",
              "module": "browser-window"
            }
          },
          "5": {
            "7": {
              "name": "Menu",
              "type": "import",
              "range": [
                [
                  5,
                  7
                ],
                [
                  5,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "menu"
            }
          },
          "6": {
            "6": {
              "name": "app",
              "type": "import",
              "range": [
                [
                  6,
                  6
                ],
                [
                  6,
                  18
                ]
              ],
              "bindingType": "variable",
              "module": "app"
            }
          },
          "7": {
            "9": {
              "name": "dialog",
              "type": "import",
              "range": [
                [
                  7,
                  9
                ],
                [
                  7,
                  24
                ]
              ],
              "bindingType": "variable",
              "module": "dialog"
            }
          },
          "8": {
            "5": {
              "name": "fs",
              "type": "import",
              "range": [
                [
                  8,
                  5
                ],
                [
                  8,
                  16
                ]
              ],
              "bindingType": "variable",
              "module": "fs",
              "builtin": true
            }
          },
          "9": {
            "6": {
              "name": "ipc",
              "type": "import",
              "range": [
                [
                  9,
                  6
                ],
                [
                  9,
                  18
                ]
              ],
              "bindingType": "variable",
              "module": "ipc"
            }
          },
          "10": {
            "7": {
              "name": "path",
              "type": "import",
              "range": [
                [
                  10,
                  7
                ],
                [
                  10,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "path",
              "builtin": true
            }
          },
          "11": {
            "5": {
              "name": "os",
              "type": "import",
              "range": [
                [
                  11,
                  5
                ],
                [
                  11,
                  16
                ]
              ],
              "bindingType": "variable",
              "module": "os",
              "builtin": true
            }
          },
          "12": {
            "6": {
              "name": "net",
              "type": "import",
              "range": [
                [
                  12,
                  6
                ],
                [
                  12,
                  18
                ]
              ],
              "bindingType": "variable",
              "module": "net",
              "builtin": true
            }
          },
          "13": {
            "8": {
              "name": "shell",
              "type": "import",
              "range": [
                [
                  13,
                  8
                ],
                [
                  13,
                  22
                ]
              ],
              "bindingType": "variable",
              "module": "shell"
            }
          },
          "14": {
            "6": {
              "name": "url",
              "type": "import",
              "range": [
                [
                  14,
                  6
                ],
                [
                  14,
                  18
                ]
              ],
              "bindingType": "variable",
              "module": "url",
              "builtin": true
            }
          },
          "15": {
            "1": {
              "type": "import",
              "range": [
                [
                  15,
                  1
                ],
                [
                  15,
                  12
                ]
              ],
              "bindingType": "variable",
              "module": "events",
              "builtin": true,
              "name": "EventEmitter",
              "exportsProperty": "EventEmitter"
            }
          },
          "16": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  16,
                  4
                ],
                [
                  16,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "30": {
            "0": {
              "type": "class",
              "name": "AtomApplication",
              "bindingType": "exports",
              "classProperties": [
                [
                  34,
                  9
                ]
              ],
              "prototypeProperties": [
                [
                  52,
                  11
                ],
                [
                  53,
                  19
                ],
                [
                  54,
                  23
                ],
                [
                  55,
                  16
                ],
                [
                  56,
                  11
                ],
                [
                  58,
                  8
                ],
                [
                  60,
                  15
                ],
                [
                  83,
                  19
                ],
                [
                  94,
                  16
                ],
                [
                  99,
                  13
                ],
                [
                  110,
                  36
                ],
                [
                  119,
                  20
                ],
                [
                  132,
                  28
                ],
                [
                  136,
                  16
                ],
                [
                  232,
                  15
                ],
                [
                  245,
                  23
                ],
                [
                  254,
                  31
                ],
                [
                  274,
                  19
                ],
                [
                  282,
                  17
                ],
                [
                  287,
                  17
                ],
                [
                  298,
                  13
                ],
                [
                  311,
                  12
                ],
                [
                  337,
                  20
                ],
                [
                  341,
                  24
                ],
                [
                  346,
                  15
                ],
                [
                  364,
                  11
                ],
                [
                  393,
                  12
                ],
                [
                  406,
                  17
                ],
                [
                  415,
                  25
                ],
                [
                  440,
                  17
                ]
              ],
              "doc": " Private: The application's singleton class.\n\nIt's the entry point into the Atom application and maintains the global state\nof the application.\n\n ",
              "range": [
                [
                  30,
                  0
                ],
                [
                  449,
                  50
                ]
              ]
            }
          },
          "34": {
            "9": {
              "name": "open",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "options"
              ],
              "range": [
                [
                  34,
                  9
                ],
                [
                  52,
                  1
                ]
              ],
              "doc": "Public: The entry point into the Atom application. "
            }
          },
          "52": {
            "11": {
              "name": "windows",
              "type": "primitive",
              "range": [
                [
                  52,
                  11
                ],
                [
                  52,
                  14
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "53": {
            "19": {
              "name": "applicationMenu",
              "type": "primitive",
              "range": [
                [
                  53,
                  19
                ],
                [
                  53,
                  22
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "54": {
            "23": {
              "name": "atomProtocolHandler",
              "type": "primitive",
              "range": [
                [
                  54,
                  23
                ],
                [
                  54,
                  26
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "55": {
            "16": {
              "name": "resourcePath",
              "type": "primitive",
              "range": [
                [
                  55,
                  16
                ],
                [
                  55,
                  19
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "56": {
            "11": {
              "name": "version",
              "type": "primitive",
              "range": [
                [
                  56,
                  11
                ],
                [
                  56,
                  14
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "58": {
            "8": {
              "name": "exit",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "status"
              ],
              "range": [
                [
                  58,
                  8
                ],
                [
                  58,
                  35
                ]
              ],
              "doc": "~Private~"
            }
          },
          "60": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "options"
              ],
              "range": [
                [
                  60,
                  15
                ],
                [
                  83,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "83": {
            "19": {
              "name": "openWithOptions",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  83,
                  19
                ],
                [
                  94,
                  1
                ]
              ],
              "doc": "Private: Opens a new window based on the options provided. "
            }
          },
          "94": {
            "16": {
              "name": "removeWindow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "window"
              ],
              "range": [
                [
                  94,
                  16
                ],
                [
                  99,
                  1
                ]
              ],
              "doc": "Public: Removes the {AtomWindow} from the global window list. "
            }
          },
          "99": {
            "13": {
              "name": "addWindow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "window"
              ],
              "range": [
                [
                  99,
                  13
                ],
                [
                  110,
                  1
                ]
              ],
              "doc": "Public: Adds the {AtomWindow} to the global window list. "
            }
          },
          "110": {
            "36": {
              "name": "listenForArgumentsFromNewProcess",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  110,
                  36
                ],
                [
                  119,
                  1
                ]
              ],
              "doc": " Private: Creates server to listen for additional atom application launches.\n\nYou can run the atom command multiple times, but after the first launch\nthe other launches will just pass their information to this server and then\nclose immediately. "
            }
          },
          "119": {
            "20": {
              "name": "deleteSocketFile",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  119,
                  20
                ],
                [
                  132,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "132": {
            "28": {
              "name": "setupJavaScriptArguments",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  132,
                  28
                ],
                [
                  136,
                  1
                ]
              ],
              "doc": "Private: Configures required javascript environment flags. "
            }
          },
          "136": {
            "16": {
              "name": "handleEvents",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  136,
                  16
                ],
                [
                  232,
                  1
                ]
              ],
              "doc": "Private: Registers basic application commands, non-idempotent. "
            }
          },
          "232": {
            "15": {
              "name": "sendCommand",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "command",
                "args"
              ],
              "range": [
                [
                  232,
                  15
                ],
                [
                  245,
                  1
                ]
              ],
              "doc": " Public: Executes the given command.\n\nIf it isn't handled globally, delegate to the currently focused window.\n\ncommand - The string representing the command.\nargs - The optional arguments to pass along. "
            }
          },
          "245": {
            "23": {
              "name": "sendCommandToWindow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "command",
                "atomWindow",
                "args"
              ],
              "range": [
                [
                  245,
                  23
                ],
                [
                  254,
                  1
                ]
              ],
              "doc": " Public: Executes the given command on the given window.\n\ncommand - The string representing the command.\natomWindow - The {AtomWindow} to send the command to.\nargs - The optional arguments to pass along. "
            }
          },
          "254": {
            "31": {
              "name": "sendCommandToFirstResponder",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "command"
              ],
              "range": [
                [
                  254,
                  31
                ],
                [
                  274,
                  1
                ]
              ],
              "doc": " Private: Translates the command into OS X action and sends it to application's first\nresponder. "
            }
          },
          "274": {
            "19": {
              "name": "openPathOnEvent",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "eventName",
                "pathToOpen"
              ],
              "range": [
                [
                  274,
                  19
                ],
                [
                  282,
                  1
                ]
              ],
              "doc": " Public: Open the given path in the focused window when the event is\ntriggered.\n\nA new window will be created if there is no currently focused window.\n\neventName - The event to listen for.\npathToOpen - The path to open when the event is triggered. "
            }
          },
          "282": {
            "17": {
              "name": "windowForPath",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "pathToOpen"
              ],
              "range": [
                [
                  282,
                  17
                ],
                [
                  287,
                  1
                ]
              ],
              "doc": "Private: Returns the {AtomWindow} for the given path. "
            }
          },
          "287": {
            "17": {
              "name": "focusedWindow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  287,
                  17
                ],
                [
                  298,
                  1
                ]
              ],
              "doc": "Public: Returns the currently focused {AtomWindow} or undefined if none. "
            }
          },
          "298": {
            "13": {
              "name": "openPaths",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  298,
                  13
                ],
                [
                  311,
                  1
                ]
              ],
              "doc": " Public: Opens multiple paths, in existing windows if possible.\n\noptions -\n  :pathsToOpen - The array of file paths to open\n  :pidToKillWhenClosed - The integer of the pid to kill\n  :newWindow - Boolean of whether this should be opened in a new window.\n  :devMode - Boolean to control the opened window's dev mode.\n  :safeMode - Boolean to control the opened window's safe mode. "
            }
          },
          "311": {
            "12": {
              "name": "openPath",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  311,
                  12
                ],
                [
                  337,
                  1
                ]
              ],
              "doc": " Public: Opens a single path, in an existing window if possible.\n\noptions -\n  :pathToOpen - The file path to open\n  :pidToKillWhenClosed - The integer of the pid to kill\n  :newWindow - Boolean of whether this should be opened in a new window.\n  :devMode - Boolean to control the opened window's dev mode.\n  :safeMode - Boolean to control the opened window's safe mode.\n  :windowDimensions - Object with height and width keys. "
            }
          },
          "337": {
            "20": {
              "name": "killAllProcesses",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  337,
                  20
                ],
                [
                  341,
                  1
                ]
              ],
              "doc": "Private: Kill all processes associated with opened windows. "
            }
          },
          "341": {
            "24": {
              "name": "killProcessForWindow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "openedWindow"
              ],
              "range": [
                [
                  341,
                  24
                ],
                [
                  346,
                  1
                ]
              ],
              "doc": "Private: Kill process associated with the given opened window. "
            }
          },
          "346": {
            "15": {
              "name": "killProcess",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "pid"
              ],
              "range": [
                [
                  346,
                  15
                ],
                [
                  364,
                  1
                ]
              ],
              "doc": "Private: Kill the process with the given pid. "
            }
          },
          "364": {
            "11": {
              "name": "openUrl",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  364,
                  11
                ],
                [
                  393,
                  1
                ]
              ],
              "doc": " Private: Open an atom:// url.\n\nThe host of the URL being opened is assumed to be the package name\nresponsible for opening the URL.  A new window will be created with\nthat package's `urlMain` as the bootstrap script.\n\noptions -\n  :urlToOpen - The atom:// url to open.\n  :devMode - Boolean to control the opened window's dev mode.\n  :safeMode - Boolean to control the opened window's safe mode. "
            }
          },
          "393": {
            "12": {
              "name": "runSpecs",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  393,
                  12
                ],
                [
                  406,
                  1
                ]
              ],
              "doc": " Private: Opens up a new {AtomWindow} to run specs within.\n\noptions -\n  :exitWhenDone - A Boolean that if true, will close the window upon\n                  completion.\n  :resourcePath - The path to include specs from.\n  :specPath - The directory to load specs from. "
            }
          },
          "406": {
            "17": {
              "name": "runBenchmarks",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  406,
                  17
                ],
                [
                  415,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "415": {
            "25": {
              "name": "locationForPathToOpen",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "pathToOpen"
              ],
              "range": [
                [
                  415,
                  25
                ],
                [
                  440,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "440": {
            "17": {
              "name": "promptForPath",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  440,
                  17
                ],
                [
                  449,
                  50
                ]
              ],
              "doc": " Private: Opens a native dialog to prompt the user for a path.\n\nOnce paths are selected, they're opened in a new or existing {AtomWindow}s.\n\noptions -\n  :type - A String which specifies the type of the dialog, could be 'file',\n          'folder' or 'all'. The 'all' is only available on OS X.\n  :devMode - A Boolean which controls whether any newly opened windows\n             should be in dev mode or not.\n  :safeMode - A Boolean which controls whether any newly opened windows\n              should be in safe mode or not. "
            }
          }
        },
        "exports": 30
      },
      "src/browser/atom-protocol-handler.coffee": {
        "objects": {
          "0": {
            "6": {
              "name": "app",
              "type": "import",
              "range": [
                [
                  0,
                  6
                ],
                [
                  0,
                  18
                ]
              ],
              "bindingType": "variable",
              "module": "app"
            }
          },
          "1": {
            "5": {
              "name": "fs",
              "type": "import",
              "range": [
                [
                  1,
                  5
                ],
                [
                  1,
                  21
                ]
              ],
              "bindingType": "variable",
              "module": "fs-plus@^2.2.6"
            }
          },
          "2": {
            "7": {
              "name": "path",
              "type": "import",
              "range": [
                [
                  2,
                  7
                ],
                [
                  2,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "path",
              "builtin": true
            }
          },
          "3": {
            "11": {
              "name": "protocol",
              "type": "import",
              "range": [
                [
                  3,
                  11
                ],
                [
                  3,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "protocol"
            }
          },
          "10": {
            "0": {
              "type": "class",
              "name": "AtomProtocolHandler",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  11,
                  15
                ],
                [
                  21,
                  24
                ]
              ],
              "doc": " Private: Handles requests with 'atom' protocol.\n\nIt's created by {AtomApplication} upon instantiation, and is used to create a\ncustom resource loader by adding the 'atom' custom protocol. ",
              "range": [
                [
                  10,
                  0
                ],
                [
                  27,
                  50
                ]
              ]
            }
          },
          "11": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  11,
                  15
                ],
                [
                  21,
                  1
                ]
              ]
            }
          },
          "21": {
            "24": {
              "name": "registerAtomProtocol",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  21,
                  24
                ],
                [
                  27,
                  50
                ]
              ],
              "doc": "Private: Creates the 'atom' custom protocol handler. "
            }
          }
        },
        "exports": 10
      },
      "src/browser/atom-window.coffee": {
        "objects": {
          "0": {
            "16": {
              "name": "BrowserWindow",
              "type": "import",
              "range": [
                [
                  0,
                  16
                ],
                [
                  0,
                  39
                ]
              ],
              "bindingType": "variable",
              "module": "browser-window"
            }
          },
          "1": {
            "14": {
              "name": "ContextMenu",
              "type": "import",
              "range": [
                [
                  1,
                  14
                ],
                [
                  1,
                  37
                ]
              ],
              "bindingType": "variable",
              "path": "./context-menu"
            }
          },
          "2": {
            "6": {
              "name": "app",
              "type": "import",
              "range": [
                [
                  2,
                  6
                ],
                [
                  2,
                  18
                ]
              ],
              "bindingType": "variable",
              "module": "app"
            }
          },
          "3": {
            "9": {
              "name": "dialog",
              "type": "import",
              "range": [
                [
                  3,
                  9
                ],
                [
                  3,
                  24
                ]
              ],
              "bindingType": "variable",
              "module": "dialog"
            }
          },
          "4": {
            "7": {
              "name": "path",
              "type": "import",
              "range": [
                [
                  4,
                  7
                ],
                [
                  4,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "path",
              "builtin": true
            }
          },
          "5": {
            "5": {
              "name": "fs",
              "type": "import",
              "range": [
                [
                  5,
                  5
                ],
                [
                  5,
                  16
                ]
              ],
              "bindingType": "variable",
              "module": "fs",
              "builtin": true
            }
          },
          "6": {
            "6": {
              "name": "url",
              "type": "import",
              "range": [
                [
                  6,
                  6
                ],
                [
                  6,
                  18
                ]
              ],
              "bindingType": "variable",
              "module": "url",
              "builtin": true
            }
          },
          "7": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  7,
                  4
                ],
                [
                  7,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "8": {
            "1": {
              "type": "import",
              "range": [
                [
                  8,
                  1
                ],
                [
                  8,
                  12
                ]
              ],
              "bindingType": "variable",
              "module": "events",
              "builtin": true,
              "name": "EventEmitter",
              "exportsProperty": "EventEmitter"
            }
          },
          "11": {
            "0": {
              "type": "class",
              "name": "AtomWindow",
              "bindingType": "exports",
              "classProperties": [
                [
                  14,
                  13
                ],
                [
                  15,
                  25
                ]
              ],
              "prototypeProperties": [
                [
                  17,
                  17
                ],
                [
                  18,
                  10
                ],
                [
                  19,
                  10
                ],
                [
                  21,
                  15
                ],
                [
                  56,
                  10
                ],
                [
                  68,
                  18
                ],
                [
                  71,
                  16
                ],
                [
                  86,
                  16
                ],
                [
                  126,
                  12
                ],
                [
                  133,
                  15
                ],
                [
                  147,
                  30
                ],
                [
                  151,
                  17
                ],
                [
                  156,
                  9
                ],
                [
                  158,
                  9
                ],
                [
                  160,
                  12
                ],
                [
                  162,
                  12
                ],
                [
                  164,
                  11
                ],
                [
                  166,
                  23
                ],
                [
                  169,
                  13
                ],
                [
                  171,
                  20
                ],
                [
                  173,
                  16
                ],
                [
                  175,
                  10
                ],
                [
                  177,
                  18
                ]
              ],
              "doc": "~Private~",
              "range": [
                [
                  11,
                  0
                ],
                [
                  177,
                  52
                ]
              ]
            }
          },
          "14": {
            "13": {
              "name": "iconPath",
              "type": "function",
              "range": [
                [
                  14,
                  13
                ],
                [
                  14,
                  72
                ]
              ],
              "bindingType": "classProperty"
            }
          },
          "15": {
            "25": {
              "name": "includeShellLoadTime",
              "type": "primitive",
              "range": [
                [
                  15,
                  25
                ],
                [
                  15,
                  28
                ]
              ],
              "bindingType": "classProperty"
            }
          },
          "17": {
            "17": {
              "name": "browserWindow",
              "type": "primitive",
              "range": [
                [
                  17,
                  17
                ],
                [
                  17,
                  20
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "18": {
            "10": {
              "name": "loaded",
              "type": "primitive",
              "range": [
                [
                  18,
                  10
                ],
                [
                  18,
                  13
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "19": {
            "10": {
              "name": "isSpec",
              "type": "primitive",
              "range": [
                [
                  19,
                  10
                ],
                [
                  19,
                  13
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "21": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "settings"
              ],
              "range": [
                [
                  21,
                  15
                ],
                [
                  56,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "56": {
            "10": {
              "name": "getUrl",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "loadSettingsObj"
              ],
              "range": [
                [
                  56,
                  10
                ],
                [
                  68,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "68": {
            "18": {
              "name": "getInitialPath",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  68,
                  18
                ],
                [
                  71,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "71": {
            "16": {
              "name": "containsPath",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "pathToCheck"
              ],
              "range": [
                [
                  71,
                  16
                ],
                [
                  86,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "86": {
            "16": {
              "name": "handleEvents",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  86,
                  16
                ],
                [
                  126,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "126": {
            "12": {
              "name": "openPath",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "pathToOpen",
                "initialLine",
                "initialColumn"
              ],
              "range": [
                [
                  126,
                  12
                ],
                [
                  133,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "133": {
            "15": {
              "name": "sendCommand",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "command",
                "args"
              ],
              "range": [
                [
                  133,
                  15
                ],
                [
                  147,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "147": {
            "30": {
              "name": "sendCommandToBrowserWindow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "command",
                "args"
              ],
              "range": [
                [
                  147,
                  30
                ],
                [
                  151,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "151": {
            "17": {
              "name": "getDimensions",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  151,
                  17
                ],
                [
                  156,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "156": {
            "9": {
              "name": "close",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  156,
                  9
                ],
                [
                  156,
                  33
                ]
              ],
              "doc": "~Private~"
            }
          },
          "158": {
            "9": {
              "name": "focus",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  158,
                  9
                ],
                [
                  158,
                  33
                ]
              ],
              "doc": "~Private~"
            }
          },
          "160": {
            "12": {
              "name": "minimize",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  160,
                  12
                ],
                [
                  160,
                  39
                ]
              ],
              "doc": "~Private~"
            }
          },
          "162": {
            "12": {
              "name": "maximize",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  162,
                  12
                ],
                [
                  162,
                  39
                ]
              ],
              "doc": "~Private~"
            }
          },
          "164": {
            "11": {
              "name": "restore",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  164,
                  11
                ],
                [
                  164,
                  37
                ]
              ],
              "doc": "~Private~"
            }
          },
          "166": {
            "23": {
              "name": "handlesAtomCommands",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  166,
                  23
                ],
                [
                  169,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "169": {
            "13": {
              "name": "isFocused",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  169,
                  13
                ],
                [
                  169,
                  41
                ]
              ],
              "doc": "~Private~"
            }
          },
          "171": {
            "20": {
              "name": "isWebViewFocused",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  171,
                  20
                ],
                [
                  171,
                  55
                ]
              ],
              "doc": "~Private~"
            }
          },
          "173": {
            "16": {
              "name": "isSpecWindow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  173,
                  16
                ],
                [
                  173,
                  25
                ]
              ],
              "doc": "~Private~"
            }
          },
          "175": {
            "10": {
              "name": "reload",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  175,
                  10
                ],
                [
                  175,
                  36
                ]
              ],
              "doc": "~Private~"
            }
          },
          "177": {
            "18": {
              "name": "toggleDevTools",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  177,
                  18
                ],
                [
                  177,
                  51
                ]
              ],
              "doc": "~Private~"
            }
          }
        },
        "exports": 11
      },
      "src/browser/auto-update-manager.coffee": {
        "objects": {
          "0": {
            "8": {
              "name": "https",
              "type": "import",
              "range": [
                [
                  0,
                  8
                ],
                [
                  0,
                  22
                ]
              ],
              "bindingType": "variable",
              "module": "https",
              "builtin": true
            }
          },
          "1": {
            "14": {
              "name": "autoUpdater",
              "type": "import",
              "range": [
                [
                  1,
                  14
                ],
                [
                  1,
                  35
                ]
              ],
              "bindingType": "variable",
              "module": "auto-updater"
            }
          },
          "2": {
            "9": {
              "name": "dialog",
              "type": "import",
              "range": [
                [
                  2,
                  9
                ],
                [
                  2,
                  24
                ]
              ],
              "bindingType": "variable",
              "module": "dialog"
            }
          },
          "3": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  3,
                  4
                ],
                [
                  3,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "4": {
            "1": {
              "type": "import",
              "range": [
                [
                  4,
                  1
                ],
                [
                  4,
                  12
                ]
              ],
              "bindingType": "variable",
              "module": "events",
              "builtin": true,
              "name": "EventEmitter",
              "exportsProperty": "EventEmitter"
            }
          },
          "6": {
            "11": {
              "name": "'idle'",
              "type": "primitive",
              "range": [
                [
                  6,
                  11
                ],
                [
                  6,
                  16
                ]
              ]
            }
          },
          "7": {
            "15": {
              "name": "'checking'",
              "type": "primitive",
              "range": [
                [
                  7,
                  15
                ],
                [
                  7,
                  24
                ]
              ]
            }
          },
          "8": {
            "18": {
              "name": "'downloading'",
              "type": "primitive",
              "range": [
                [
                  8,
                  18
                ],
                [
                  8,
                  30
                ]
              ]
            }
          },
          "9": {
            "23": {
              "name": "'update-available'",
              "type": "primitive",
              "range": [
                [
                  9,
                  23
                ],
                [
                  9,
                  40
                ]
              ]
            }
          },
          "10": {
            "26": {
              "name": "'no-update-available'",
              "type": "primitive",
              "range": [
                [
                  10,
                  26
                ],
                [
                  10,
                  46
                ]
              ]
            }
          },
          "11": {
            "12": {
              "name": "'error'",
              "type": "primitive",
              "range": [
                [
                  11,
                  12
                ],
                [
                  11,
                  18
                ]
              ]
            }
          },
          "14": {
            "0": {
              "type": "class",
              "name": "AutoUpdateManager",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  17,
                  15
                ],
                [
                  48,
                  23
                ],
                [
                  63,
                  28
                ],
                [
                  68,
                  12
                ],
                [
                  73,
                  12
                ],
                [
                  76,
                  9
                ],
                [
                  83,
                  11
                ],
                [
                  86,
                  24
                ],
                [
                  90,
                  17
                ],
                [
                  94,
                  14
                ]
              ],
              "doc": "~Private~",
              "range": [
                [
                  14,
                  0
                ],
                [
                  95,
                  34
                ]
              ]
            }
          },
          "17": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  17,
                  15
                ],
                [
                  48,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "48": {
            "23": {
              "name": "checkForUpdatesShim",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  48,
                  23
                ],
                [
                  63,
                  1
                ]
              ],
              "doc": "Private: Windows doesn't have an auto-updater, so use this method to shim the events. "
            }
          },
          "63": {
            "28": {
              "name": "emitUpdateAvailableEvent",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "windows"
              ],
              "range": [
                [
                  63,
                  28
                ],
                [
                  68,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "68": {
            "12": {
              "name": "setState",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "state"
              ],
              "range": [
                [
                  68,
                  12
                ],
                [
                  73,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "73": {
            "12": {
              "name": "getState",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  73,
                  12
                ],
                [
                  76,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "76": {
            "9": {
              "name": "check",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  76,
                  9
                ],
                [
                  83,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "83": {
            "11": {
              "name": "install",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  83,
                  11
                ],
                [
                  86,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "86": {
            "24": {
              "name": "onUpdateNotAvailable",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  86,
                  24
                ],
                [
                  90,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "90": {
            "17": {
              "name": "onUpdateError",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "event",
                "message"
              ],
              "range": [
                [
                  90,
                  17
                ],
                [
                  94,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "94": {
            "14": {
              "name": "getWindows",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  94,
                  14
                ],
                [
                  95,
                  34
                ]
              ],
              "doc": "~Private~"
            }
          }
        },
        "exports": 14
      },
      "src/browser/context-menu.coffee": {
        "objects": {
          "0": {
            "7": {
              "name": "Menu",
              "type": "import",
              "range": [
                [
                  0,
                  7
                ],
                [
                  0,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "menu"
            }
          },
          "3": {
            "0": {
              "type": "class",
              "name": "ContextMenu",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  4,
                  15
                ],
                [
                  12,
                  23
                ]
              ],
              "doc": "~Private~",
              "range": [
                [
                  3,
                  0
                ],
                [
                  23,
                  10
                ]
              ]
            }
          },
          "4": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "template",
                null
              ],
              "range": [
                [
                  4,
                  15
                ],
                [
                  12,
                  1
                ]
              ]
            }
          },
          "12": {
            "23": {
              "name": "createClickHandlers",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "template"
              ],
              "range": [
                [
                  12,
                  23
                ],
                [
                  23,
                  10
                ]
              ],
              "doc": " Private: It's necessary to build the event handlers in this process, otherwise\nclosures are drug across processes and failed to be garbage collected\nappropriately. "
            }
          }
        },
        "exports": 3
      },
      "src/browser/main.coffee": {
        "objects": {
          "0": {
            "24": {
              "name": "global.shellStartTime",
              "type": "function",
              "range": [
                [
                  0,
                  24
                ],
                [
                  0,
                  33
                ]
              ]
            }
          },
          "2": {
            "16": {
              "name": "crashReporter",
              "type": "import",
              "range": [
                [
                  2,
                  16
                ],
                [
                  2,
                  39
                ]
              ],
              "bindingType": "variable",
              "module": "crash-reporter"
            }
          },
          "3": {
            "6": {
              "name": "app",
              "type": "import",
              "range": [
                [
                  3,
                  6
                ],
                [
                  3,
                  18
                ]
              ],
              "bindingType": "variable",
              "module": "app"
            }
          },
          "4": {
            "5": {
              "name": "fs",
              "type": "import",
              "range": [
                [
                  4,
                  5
                ],
                [
                  4,
                  16
                ]
              ],
              "bindingType": "variable",
              "module": "fs",
              "builtin": true
            }
          },
          "6": {
            "7": {
              "name": "path",
              "type": "import",
              "range": [
                [
                  6,
                  7
                ],
                [
                  6,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "path",
              "builtin": true
            }
          },
          "7": {
            "11": {
              "name": "optimist",
              "type": "import",
              "range": [
                [
                  7,
                  11
                ],
                [
                  7,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "optimist@0.4.0"
            }
          },
          "8": {
            "8": {
              "name": "nslog",
              "type": "import",
              "range": [
                [
                  8,
                  8
                ],
                [
                  8,
                  22
                ]
              ],
              "bindingType": "variable",
              "module": "nslog@^1.0.1"
            }
          },
          "9": {
            "9": {
              "name": "dialog",
              "type": "import",
              "range": [
                [
                  9,
                  9
                ],
                [
                  9,
                  24
                ]
              ],
              "bindingType": "variable",
              "module": "dialog"
            }
          },
          "11": {
            "14": {
              "name": "nslog",
              "type": "primitive",
              "range": [
                [
                  11,
                  14
                ],
                [
                  11,
                  18
                ]
              ]
            }
          },
          "17": {
            "8": {
              "name": "start",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  17,
                  8
                ],
                [
                  51,
                  0
                ]
              ],
              "doc": "~Private~"
            }
          },
          "54": {
            "25": {
              "name": "global.devResourcePath",
              "type": "function",
              "range": [
                [
                  54,
                  25
                ],
                [
                  54,
                  62
                ]
              ]
            }
          },
          "56": {
            "21": {
              "name": "setupCrashReporter",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  56,
                  21
                ],
                [
                  58,
                  0
                ]
              ],
              "doc": "~Private~"
            }
          },
          "59": {
            "19": {
              "name": "parseCommandLine",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  59,
                  19
                ],
                [
                  110,
                  0
                ]
              ],
              "doc": "~Private~"
            }
          }
        },
        "exports": {}
      },
      "src/buffered-node-process.coffee": {
        "objects": {
          "0": {
            "18": {
              "name": "BufferedProcess",
              "type": "import",
              "range": [
                [
                  0,
                  18
                ],
                [
                  0,
                  45
                ]
              ],
              "bindingType": "variable",
              "path": "./buffered-process"
            }
          },
          "1": {
            "7": {
              "name": "path",
              "type": "import",
              "range": [
                [
                  1,
                  7
                ],
                [
                  1,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "path",
              "builtin": true
            }
          },
          "14": {
            "0": {
              "type": "class",
              "name": "BufferedNodeProcess",
              "superClass": "BufferedProcess",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  36,
                  15
                ]
              ],
              "doc": " Public: Like {BufferedProcess}, but accepts a Node script as the command\nto run.\n\nThis is necessary on Windows since it doesn't support shebang `#!` lines.\n\n## Requiring in packages\n\n```coffee\n{BufferedNodeProcess} = require 'atom'\n``` ",
              "range": [
                [
                  14,
                  0
                ],
                [
                  50,
                  63
                ]
              ]
            }
          },
          "36": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  36,
                  15
                ],
                [
                  50,
                  63
                ]
              ],
              "doc": " Public: Runs the given Node script by spawning a new child process.\n\noptions - An {Object} with the following keys:\n  :command - The {String} path to the JavaScript script to execute.\n  :args - The {Array} of arguments to pass to the script (optional).\n  :options - The options {Object} to pass to Node's `ChildProcess.spawn`\n             method (optional).\n  :stdout - The callback {Function} that receives a single argument which\n            contains the standard output from the command. The callback is\n            called as data is received but it's buffered to ensure only\n            complete lines are passed until the source stream closes. After\n            the source stream has closed all remaining data is sent in a\n            final call (optional).\n  :stderr - The callback {Function} that receives a single argument which\n            contains the standard error output from the command. The\n            callback is called as data is received but it's buffered to\n            ensure only complete lines are passed until the source stream\n            closes. After the source stream has closed all remaining data\n            is sent in a final call (optional).\n  :exit - The callback {Function} which receives a single argument\n          containing the exit status (optional). "
            }
          }
        },
        "exports": 14
      },
      "src/buffered-process.coffee": {
        "objects": {
          "0": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  0,
                  4
                ],
                [
                  0,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "1": {
            "15": {
              "name": "ChildProcess",
              "type": "import",
              "range": [
                [
                  1,
                  15
                ],
                [
                  1,
                  37
                ]
              ],
              "bindingType": "variable",
              "module": "child_process",
              "builtin": true
            }
          },
          "18": {
            "0": {
              "type": "class",
              "name": "BufferedProcess",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  40,
                  15
                ],
                [
                  99,
                  16
                ],
                [
                  117,
                  8
                ]
              ],
              "doc": " Public: A wrapper which provides standard error/output line buffering for\nNode's ChildProcess.\n\n## Requiring in packages\n\n```coffee\n{BufferedProcess} = require 'atom'\n\ncommand = 'ps'\nargs = ['-ef']\nstdout = (output) -> console.log(output)\nexit = (code) -> console.log(\"ps -ef exited with #{code}\")\nprocess = new BufferedProcess({command, args, stdout, exit})\n``` ",
              "range": [
                [
                  18,
                  0
                ],
                [
                  120,
                  19
                ]
              ]
            }
          },
          "40": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  40,
                  15
                ],
                [
                  99,
                  1
                ]
              ],
              "doc": " Public: Runs the given command by spawning a new child process.\n\noptions - An {Object} with the following keys:\n  :command - The {String} command to execute.\n  :args - The {Array} of arguments to pass to the command (optional).\n  :options - The options {Object} to pass to Node's `ChildProcess.spawn`\n             method (optional).\n  :stdout - The callback {Function} that receives a single argument which\n            contains the standard output from the command. The callback is\n            called as data is received but it's buffered to ensure only\n            complete lines are passed until the source stream closes. After\n            the source stream has closed all remaining data is sent in a\n            final call (optional).\n  :stderr - The callback {Function} that receives a single argument which\n            contains the standard error output from the command. The\n            callback is called as data is received but it's buffered to\n            ensure only complete lines are passed until the source stream\n            closes. After the source stream has closed all remaining data\n            is sent in a final call (optional).\n  :exit - The callback {Function} which receives a single argument\n          containing the exit status (optional). "
            }
          },
          "99": {
            "16": {
              "name": "bufferStream",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "stream",
                "onLines",
                "onDone"
              ],
              "range": [
                [
                  99,
                  16
                ],
                [
                  117,
                  1
                ]
              ],
              "doc": " Private: Helper method to pass data line by line.\n\nstream - The Stream to read from.\nonLines - The callback to call with each line of data.\nonDone - The callback to call when the stream has closed. "
            }
          },
          "117": {
            "8": {
              "name": "kill",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  117,
                  8
                ],
                [
                  120,
                  19
                ]
              ],
              "doc": "Public: Terminate the process. "
            }
          }
        },
        "exports": 18
      },
      "src/clipboard.coffee": {
        "objects": {
          "0": {
            "12": {
              "name": "clipboard",
              "type": "import",
              "range": [
                [
                  0,
                  12
                ],
                [
                  0,
                  30
                ]
              ],
              "bindingType": "variable",
              "module": "clipboard"
            }
          },
          "1": {
            "9": {
              "name": "crypto",
              "type": "import",
              "range": [
                [
                  1,
                  9
                ],
                [
                  1,
                  24
                ]
              ],
              "bindingType": "variable",
              "module": "crypto",
              "builtin": true
            }
          },
          "7": {
            "0": {
              "type": "class",
              "name": "Clipboard",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  8,
                  12
                ],
                [
                  9,
                  24
                ],
                [
                  16,
                  7
                ],
                [
                  26,
                  9
                ],
                [
                  34,
                  8
                ],
                [
                  43,
                  20
                ]
              ],
              "doc": " Public: Represents the clipboard used for copying and pasting in Atom.\n\nAn instance of this class is always available as the `atom.clipboard` global. ",
              "range": [
                [
                  7,
                  0
                ],
                [
                  48,
                  12
                ]
              ]
            }
          },
          "8": {
            "12": {
              "name": "metadata",
              "type": "primitive",
              "range": [
                [
                  8,
                  12
                ],
                [
                  8,
                  15
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "9": {
            "24": {
              "name": "signatureForMetadata",
              "type": "primitive",
              "range": [
                [
                  9,
                  24
                ],
                [
                  9,
                  27
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "16": {
            "7": {
              "name": "md5",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "text"
              ],
              "range": [
                [
                  16,
                  7
                ],
                [
                  26,
                  1
                ]
              ],
              "doc": " Private: Creates an `md5` hash of some text.\n\ntext - A {String} to hash.\n\nReturns a hashed {String}. "
            }
          },
          "26": {
            "9": {
              "name": "write",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "text",
                "metadata"
              ],
              "range": [
                [
                  26,
                  9
                ],
                [
                  34,
                  1
                ]
              ],
              "doc": " Public: Write the given text to the clipboard.\n\nThe metadata associated with the text is available by calling\n{::readWithMetadata}.\n\ntext - The {String} to store.\nmetadata - The additional info to associate with the text. "
            }
          },
          "34": {
            "8": {
              "name": "read",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  34,
                  8
                ],
                [
                  43,
                  1
                ]
              ],
              "doc": " Public: Read the text from the clipboard.\n\nReturns a {String}. "
            }
          },
          "43": {
            "20": {
              "name": "readWithMetadata",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  43,
                  20
                ],
                [
                  48,
                  12
                ]
              ],
              "doc": " Public: Read the text from the clipboard and return both the text and the\nassociated metadata.\n\nReturns an {Object} with the following keys:\n  :text - The {String} clipboard text.\n  :metadata - The metadata stored by an earlier call to {::write}. "
            }
          }
        },
        "exports": 7
      },
      "src/coffee-cache.coffee": {
        "objects": {
          "0": {
            "9": {
              "name": "crypto",
              "type": "import",
              "range": [
                [
                  0,
                  9
                ],
                [
                  0,
                  24
                ]
              ],
              "bindingType": "variable",
              "module": "crypto",
              "builtin": true
            }
          },
          "1": {
            "7": {
              "name": "path",
              "type": "import",
              "range": [
                [
                  1,
                  7
                ],
                [
                  1,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "path",
              "builtin": true
            }
          },
          "3": {
            "15": {
              "name": "CoffeeScript",
              "type": "import",
              "range": [
                [
                  3,
                  15
                ],
                [
                  3,
                  37
                ]
              ],
              "bindingType": "variable",
              "module": "coffee-script@1.7.0"
            }
          },
          "4": {
            "7": {
              "name": "CSON",
              "type": "import",
              "range": [
                [
                  4,
                  7
                ],
                [
                  4,
                  22
                ]
              ],
              "bindingType": "variable",
              "module": "season@^1.0.2"
            }
          },
          "5": {
            "5": {
              "name": "fs",
              "type": "import",
              "range": [
                [
                  5,
                  5
                ],
                [
                  5,
                  21
                ]
              ],
              "bindingType": "variable",
              "module": "fs-plus@^2.2.6"
            }
          },
          "8": {
            "17": {
              "name": "coffeeCacheDir",
              "type": "function",
              "range": [
                [
                  8,
                  17
                ],
                [
                  8,
                  45
                ]
              ]
            }
          },
          "11": {
            "15": {
              "name": "getCachePath",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "coffee"
              ],
              "range": [
                [
                  11,
                  15
                ],
                [
                  14,
                  0
                ]
              ],
              "doc": "~Private~"
            }
          },
          "15": {
            "22": {
              "name": "getCachedJavaScript",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "cachePath"
              ],
              "range": [
                [
                  15,
                  22
                ],
                [
                  19,
                  0
                ]
              ],
              "doc": "~Private~"
            }
          },
          "20": {
            "18": {
              "name": "convertFilePath",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "filePath"
              ],
              "range": [
                [
                  20,
                  18
                ],
                [
                  24,
                  0
                ]
              ],
              "doc": "~Private~"
            }
          },
          "25": {
            "22": {
              "name": "compileCoffeeScript",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "coffee",
                "filePath",
                "cachePath"
              ],
              "range": [
                [
                  25,
                  22
                ],
                [
                  33,
                  0
                ]
              ],
              "doc": "~Private~"
            }
          },
          "34": {
            "22": {
              "name": "requireCoffeeScript",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "module",
                "filePath"
              ],
              "range": [
                [
                  34,
                  22
                ],
                [
                  39,
                  0
                ]
              ]
            }
          },
          "41": {
            "12": {
              "name": "cacheDir",
              "type": "primitive",
              "range": [
                [
                  41,
                  12
                ],
                [
                  41,
                  19
                ]
              ]
            }
          },
          "42": {
            "12": {
              "name": "register",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  42,
                  12
                ],
                [
                  46,
                  6
                ]
              ],
              "doc": null
            }
          }
        },
        "exports": 41
      },
      "src/command-installer.coffee": {
        "objects": {
          "0": {
            "7": {
              "name": "path",
              "type": "import",
              "range": [
                [
                  0,
                  7
                ],
                [
                  0,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "path",
              "builtin": true
            }
          },
          "1": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  1,
                  4
                ],
                [
                  1,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "2": {
            "8": {
              "name": "async",
              "type": "import",
              "range": [
                [
                  2,
                  8
                ],
                [
                  2,
                  22
                ]
              ],
              "bindingType": "variable",
              "module": "async@0.2.6"
            }
          },
          "3": {
            "5": {
              "name": "fs",
              "type": "import",
              "range": [
                [
                  3,
                  5
                ],
                [
                  3,
                  21
                ]
              ],
              "bindingType": "variable",
              "module": "fs-plus@^2.2.6"
            }
          },
          "4": {
            "9": {
              "name": "mkdirp",
              "type": "import",
              "range": [
                [
                  4,
                  9
                ],
                [
                  4,
                  24
                ]
              ],
              "bindingType": "variable",
              "module": "mkdirp@0.3.5"
            }
          },
          "5": {
            "8": {
              "name": "runas",
              "type": "import",
              "range": [
                [
                  5,
                  8
                ],
                [
                  5,
                  22
                ]
              ],
              "bindingType": "variable",
              "module": "runas@1.0.1"
            }
          },
          "7": {
            "17": {
              "name": "symlinkCommand",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "sourcePath",
                "destinationPath",
                "callback"
              ],
              "range": [
                [
                  7,
                  17
                ],
                [
                  17,
                  0
                ]
              ],
              "doc": "~Private~"
            }
          },
          "18": {
            "34": {
              "name": "symlinkCommandWithPrivilegeSync",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "sourcePath",
                "destinationPath"
              ],
              "range": [
                [
                  18,
                  34
                ],
                [
                  27,
                  0
                ]
              ],
              "doc": "~Private~"
            }
          },
          "29": {
            "23": {
              "name": "getInstallDirectory",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  29,
                  23
                ],
                [
                  32,
                  1
                ]
              ],
              "doc": null
            }
          },
          "32": {
            "11": {
              "name": "install",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "commandPath",
                "askForPrivilege",
                "callback"
              ],
              "range": [
                [
                  32,
                  11
                ],
                [
                  52,
                  1
                ]
              ],
              "doc": null
            }
          },
          "52": {
            "22": {
              "name": "installAtomCommand",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "resourcePath",
                "askForPrivilege",
                "callback"
              ],
              "range": [
                [
                  52,
                  22
                ],
                [
                  56,
                  1
                ]
              ],
              "doc": null
            }
          },
          "56": {
            "21": {
              "name": "installApmCommand",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "resourcePath",
                "askForPrivilege",
                "callback"
              ],
              "range": [
                [
                  56,
                  21
                ],
                [
                  58,
                  51
                ]
              ],
              "doc": null
            }
          }
        },
        "exports": 29
      },
      "src/config.coffee": {
        "objects": {
          "0": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  0,
                  4
                ],
                [
                  0,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "1": {
            "5": {
              "name": "fs",
              "type": "import",
              "range": [
                [
                  1,
                  5
                ],
                [
                  1,
                  21
                ]
              ],
              "bindingType": "variable",
              "module": "fs-plus@^2.2.6"
            }
          },
          "2": {
            "1": {
              "type": "import",
              "range": [
                [
                  2,
                  1
                ],
                [
                  2,
                  7
                ]
              ],
              "bindingType": "variable",
              "module": "emissary@^1.2.2",
              "name": "Emitter",
              "exportsProperty": "Emitter"
            }
          },
          "3": {
            "7": {
              "name": "CSON",
              "type": "import",
              "range": [
                [
                  3,
                  7
                ],
                [
                  3,
                  22
                ]
              ],
              "bindingType": "variable",
              "module": "season@^1.0.2"
            }
          },
          "4": {
            "7": {
              "name": "path",
              "type": "import",
              "range": [
                [
                  4,
                  7
                ],
                [
                  4,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "path",
              "builtin": true
            }
          },
          "5": {
            "8": {
              "name": "async",
              "type": "import",
              "range": [
                [
                  5,
                  8
                ],
                [
                  5,
                  22
                ]
              ],
              "bindingType": "variable",
              "module": "async@0.2.6"
            }
          },
          "6": {
            "14": {
              "name": "pathWatcher",
              "type": "import",
              "range": [
                [
                  6,
                  14
                ],
                [
                  6,
                  34
                ]
              ],
              "bindingType": "variable",
              "module": "pathwatcher@^2.0.6"
            }
          },
          "25": {
            "0": {
              "type": "class",
              "name": "Config",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  29,
                  15
                ],
                [
                  36,
                  29
                ],
                [
                  52,
                  8
                ],
                [
                  57,
                  18
                ],
                [
                  72,
                  21
                ],
                [
                  76,
                  23
                ],
                [
                  80,
                  15
                ],
                [
                  91,
                  21
                ],
                [
                  95,
                  15
                ],
                [
                  104,
                  7
                ],
                [
                  114,
                  10
                ],
                [
                  125,
                  18
                ],
                [
                  136,
                  7
                ],
                [
                  152,
                  10
                ],
                [
                  160,
                  18
                ],
                [
                  168,
                  14
                ],
                [
                  178,
                  13
                ],
                [
                  187,
                  17
                ],
                [
                  199,
                  20
                ],
                [
                  211,
                  19
                ],
                [
                  231,
                  11
                ],
                [
                  253,
                  13
                ],
                [
                  256,
                  10
                ],
                [
                  261,
                  8
                ]
              ],
              "doc": " Public: Used to access all of Atom's configuration details.\n\nAn instance of this class is always available as the `atom.config` global.\n\n## Best practices\n\n* Create your own root keypath using your package's name.\n* Don't depend on (or write to) configuration keys outside of your keypath.\n\n## Example\n\n```coffeescript\natom.config.set('my-package.key', 'value')\natom.config.observe 'my-package.key', ->\n  console.log 'My configuration changed:', atom.config.get('my-package.key')\n``` ",
              "range": [
                [
                  25,
                  0
                ],
                [
                  262,
                  50
                ]
              ]
            }
          },
          "29": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  29,
                  15
                ],
                [
                  36,
                  1
                ]
              ],
              "doc": "Private: Created during initialization, available as `atom.config` "
            }
          },
          "36": {
            "29": {
              "name": "initializeConfigDirectory",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "done"
              ],
              "range": [
                [
                  36,
                  29
                ],
                [
                  52,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "52": {
            "8": {
              "name": "load",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  52,
                  8
                ],
                [
                  57,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "57": {
            "18": {
              "name": "loadUserConfig",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  57,
                  18
                ],
                [
                  72,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "72": {
            "21": {
              "name": "observeUserConfig",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  72,
                  21
                ],
                [
                  76,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "76": {
            "23": {
              "name": "unobserveUserConfig",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  76,
                  23
                ],
                [
                  80,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "80": {
            "15": {
              "name": "setDefaults",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "keyPath",
                "defaults"
              ],
              "range": [
                [
                  80,
                  15
                ],
                [
                  91,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "91": {
            "21": {
              "name": "getUserConfigPath",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  91,
                  21
                ],
                [
                  95,
                  1
                ]
              ],
              "doc": "Public: Get the {String} path to the config file being used. "
            }
          },
          "95": {
            "15": {
              "name": "getSettings",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  95,
                  15
                ],
                [
                  104,
                  1
                ]
              ],
              "doc": "Public: Returns a new {Object} containing all of settings and defaults. "
            }
          },
          "104": {
            "7": {
              "name": "get",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "keyPath"
              ],
              "range": [
                [
                  104,
                  7
                ],
                [
                  114,
                  1
                ]
              ],
              "doc": " Public: Retrieves the setting for the given key.\n\nkeyPath - The {String} name of the key to retrieve.\n\nReturns the value from Atom's default settings, the user's configuration\nfile, or `null` if the key doesn't exist in either. "
            }
          },
          "114": {
            "10": {
              "name": "getInt",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "keyPath"
              ],
              "range": [
                [
                  114,
                  10
                ],
                [
                  125,
                  1
                ]
              ],
              "doc": " Public: Retrieves the setting for the given key as an integer.\n\nkeyPath - The {String} name of the key to retrieve\n\nReturns the value from Atom's default settings, the user's configuration\nfile, or `NaN` if the key doesn't exist in either. "
            }
          },
          "125": {
            "18": {
              "name": "getPositiveInt",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "keyPath",
                "defaultValue"
              ],
              "range": [
                [
                  125,
                  18
                ],
                [
                  136,
                  1
                ]
              ],
              "doc": " Public: Retrieves the setting for the given key as a positive integer.\n\nkeyPath - The {String} name of the key to retrieve\ndefaultValue - The integer {Number} to fall back to if the value isn't\n               positive, defaults to 0.\n\nReturns the value from Atom's default settings, the user's configuration\nfile, or `defaultValue` if the key value isn't greater than zero. "
            }
          },
          "136": {
            "7": {
              "name": "set",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "keyPath",
                "value"
              ],
              "range": [
                [
                  136,
                  7
                ],
                [
                  152,
                  1
                ]
              ],
              "doc": " Public: Sets the value for a configuration setting.\n\nThis value is stored in Atom's internal configuration file.\n\nkeyPath - The {String} name of the key.\nvalue - The value of the setting.\n\nReturns the `value`. "
            }
          },
          "152": {
            "10": {
              "name": "toggle",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "keyPath"
              ],
              "range": [
                [
                  152,
                  10
                ],
                [
                  160,
                  1
                ]
              ],
              "doc": " Public: Toggle the value at the key path.\n\nThe new value will be `true` if the value is currently falsy and will be\n`false` if the value is currently truthy.\n\nkeyPath - The {String} name of the key.\n\nReturns the new value. "
            }
          },
          "160": {
            "18": {
              "name": "restoreDefault",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "keyPath"
              ],
              "range": [
                [
                  160,
                  18
                ],
                [
                  168,
                  1
                ]
              ],
              "doc": " Public: Restore the key path to its default value.\n\nkeyPath - The {String} name of the key.\n\nReturns the new value. "
            }
          },
          "168": {
            "14": {
              "name": "getDefault",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "keyPath"
              ],
              "range": [
                [
                  168,
                  14
                ],
                [
                  178,
                  1
                ]
              ],
              "doc": " Public: Get the default value of the key path.\n\nkeyPath - The {String} name of the key.\n\nReturns the default value. "
            }
          },
          "178": {
            "13": {
              "name": "isDefault",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "keyPath"
              ],
              "range": [
                [
                  178,
                  13
                ],
                [
                  187,
                  1
                ]
              ],
              "doc": " Public: Is the key path value its default value?\n\nkeyPath - The {String} name of the key.\n\nReturns a {Boolean}, `true` if the current value is the default, `false`\notherwise. "
            }
          },
          "187": {
            "17": {
              "name": "pushAtKeyPath",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "keyPath",
                "value"
              ],
              "range": [
                [
                  187,
                  17
                ],
                [
                  199,
                  1
                ]
              ],
              "doc": " Public: Push the value to the array at the key path.\n\nkeyPath - The {String} key path.\nvalue - The value to push to the array.\n\nReturns the new array length {Number} of the setting. "
            }
          },
          "199": {
            "20": {
              "name": "unshiftAtKeyPath",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "keyPath",
                "value"
              ],
              "range": [
                [
                  199,
                  20
                ],
                [
                  211,
                  1
                ]
              ],
              "doc": " Public: Add the value to the beginning of the array at the key path.\n\nkeyPath - The {String} key path.\nvalue - The value to shift onto the array.\n\nReturns the new array length {Number} of the setting. "
            }
          },
          "211": {
            "19": {
              "name": "removeAtKeyPath",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "keyPath",
                "value"
              ],
              "range": [
                [
                  211,
                  19
                ],
                [
                  231,
                  1
                ]
              ],
              "doc": " Public: Remove the value from the array at the key path.\n\nkeyPath - The {String} key path.\nvalue - The value to remove from the array.\n\nReturns the new array value of the setting. "
            }
          },
          "231": {
            "11": {
              "name": "observe",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "keyPath",
                "options",
                "callback"
              ],
              "range": [
                [
                  231,
                  11
                ],
                [
                  253,
                  1
                ]
              ],
              "doc": " Public: Establishes an event listener for a given key.\n\n`callback` is fired whenever the value of the key is changed and will\n be fired immediately unless the `callNow` option is `false`.\n\nkeyPath - The {String} name of the key to observe\noptions - An optional {Object} containing the `callNow` key.\ncallback - The {Function} to call when the value of the key changes.\n           The first argument will be the new value of the key and the\n           second argument will be an {Object} with a `previous` property\n           that is the prior value of the key.\n\nReturns an {Object} with the following keys:\n :off - A {Function} that unobserves the `keyPath` when called. "
            }
          },
          "253": {
            "13": {
              "name": "unobserve",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "keyPath"
              ],
              "range": [
                [
                  253,
                  13
                ],
                [
                  256,
                  1
                ]
              ],
              "doc": " Public: Unobserve all callbacks on a given key.\n\nkeyPath - The {String} name of the key to unobserve. "
            }
          },
          "256": {
            "10": {
              "name": "update",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  256,
                  10
                ],
                [
                  261,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "261": {
            "8": {
              "name": "save",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  261,
                  8
                ],
                [
                  262,
                  50
                ]
              ],
              "doc": "~Private~"
            }
          }
        },
        "exports": 25
      },
      "src/context-menu-manager.coffee": {
        "objects": {
          "0": {
            "1": {
              "type": "import",
              "range": [
                [
                  0,
                  1
                ],
                [
                  0,
                  1
                ]
              ],
              "bindingType": "variable",
              "path": "./space-pen-extensions",
              "name": "$",
              "exportsProperty": "$"
            }
          },
          "1": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  1,
                  4
                ],
                [
                  1,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "2": {
            "9": {
              "name": "remote",
              "type": "import",
              "range": [
                [
                  2,
                  9
                ],
                [
                  2,
                  24
                ]
              ],
              "bindingType": "variable",
              "module": "remote"
            }
          },
          "10": {
            "0": {
              "type": "class",
              "name": "ContextMenuManager",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  11,
                  15
                ],
                [
                  33,
                  7
                ],
                [
                  45,
                  17
                ],
                [
                  60,
                  17
                ],
                [
                  66,
                  25
                ],
                [
                  82,
                  38
                ],
                [
                  91,
                  34
                ],
                [
                  105,
                  24
                ],
                [
                  111,
                  16
                ]
              ],
              "doc": " Public: Provides a registry for commands that you'd like to appear in the\ncontext menu.\n\nAn instance of this class is always available as the `atom.contextMenu`\nglobal. ",
              "range": [
                [
                  10,
                  0
                ],
                [
                  116,
                  64
                ]
              ]
            }
          },
          "11": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  11,
                  15
                ],
                [
                  33,
                  1
                ]
              ]
            }
          },
          "33": {
            "7": {
              "name": "add",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "name",
                "object",
                null
              ],
              "range": [
                [
                  33,
                  7
                ],
                [
                  45,
                  1
                ]
              ],
              "doc": " Public: Creates menu definitions from the object specified by the menu\ncson API.\n\nname - The path of the file that contains the menu definitions.\nobject - The 'context-menu' object specified in the menu cson API.\noptions - An {Object} with the following keys:\n  :devMode - Determines whether the entries should only be shown when\n             the window is in dev mode.\n\nReturns nothing. "
            }
          },
          "45": {
            "17": {
              "name": "buildMenuItem",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "label",
                "command"
              ],
              "range": [
                [
                  45,
                  17
                ],
                [
                  60,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "60": {
            "17": {
              "name": "addBySelector",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "selector",
                "definition",
                null
              ],
              "range": [
                [
                  60,
                  17
                ],
                [
                  66,
                  1
                ]
              ],
              "doc": " Private: Registers a command to be displayed when the relevant item is right\nclicked.\n\nselector - The css selector for the active element which should include\n           the given command in its context menu.\ndefinition - The object containing keys which match the menu template API.\noptions - An {Object} with the following keys:\n  :devMode - Indicates whether this command should only appear while the\n             editor is in dev mode. "
            }
          },
          "66": {
            "25": {
              "name": "definitionsForElement",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "element",
                null
              ],
              "range": [
                [
                  66,
                  25
                ],
                [
                  82,
                  1
                ]
              ],
              "doc": "Private: Returns definitions which match the element and devMode. "
            }
          },
          "82": {
            "38": {
              "name": "menuTemplateForMostSpecificElement",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "element",
                null
              ],
              "range": [
                [
                  82,
                  38
                ],
                [
                  91,
                  1
                ]
              ],
              "doc": " Private: Used to generate the context menu for a specific element and it's\nparents.\n\nThe menu items are sorted such that menu items that match closest to the\nactive element are listed first. The further down the list you go, the higher\nup the ancestor hierarchy they match.\n\nelement - The DOM element to generate the menu template for. "
            }
          },
          "91": {
            "34": {
              "name": "combinedMenuTemplateForElement",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "element"
              ],
              "range": [
                [
                  91,
                  34
                ],
                [
                  105,
                  1
                ]
              ],
              "doc": " Private: Returns a menu template for both normal entries as well as\ndevelopment mode entries. "
            }
          },
          "105": {
            "24": {
              "name": "executeBuildHandlers",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "event",
                "menuTemplate"
              ],
              "range": [
                [
                  105,
                  24
                ],
                [
                  111,
                  1
                ]
              ],
              "doc": " Private: Executes `executeAtBuild` if defined for each menu item with\nthe provided event and then removes the `executeAtBuild` property from\nthe menu item.\n\nThis is useful for commands that need to provide data about the event\nto the command. "
            }
          },
          "111": {
            "16": {
              "name": "showForEvent",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "event"
              ],
              "range": [
                [
                  111,
                  16
                ],
                [
                  116,
                  64
                ]
              ],
              "doc": "Public: Request a context menu to be displayed. "
            }
          }
        },
        "exports": 10
      },
      "src/cursor-component.coffee": {
        "objects": {
          "0": {
            "8": {
              "name": "React",
              "type": "import",
              "range": [
                [
                  0,
                  8
                ],
                [
                  0,
                  32
                ]
              ],
              "bindingType": "variable",
              "module": "react-atom-fork@^0.11.1"
            }
          },
          "1": {
            "1": {
              "type": "import",
              "range": [
                [
                  1,
                  1
                ],
                [
                  1,
                  3
                ]
              ],
              "bindingType": "variable",
              "module": "reactionary-atom-fork@^1.0.0",
              "name": "div",
              "exportsProperty": "div"
            }
          },
          "2": {
            "1": {
              "type": "import",
              "range": [
                [
                  2,
                  1
                ],
                [
                  2,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1",
              "name": "isEqualForProperties",
              "exportsProperty": "isEqualForProperties"
            }
          },
          "5": {
            "18": {
              "name": "CursorComponent",
              "type": "function",
              "range": [
                [
                  5,
                  18
                ],
                [
                  17,
                  79
                ]
              ]
            }
          },
          "6": {
            "15": {
              "name": "'CursorComponent'",
              "type": "primitive",
              "range": [
                [
                  6,
                  15
                ],
                [
                  6,
                  31
                ]
              ]
            }
          },
          "8": {
            "10": {
              "name": "render",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  8,
                  10
                ],
                [
                  16,
                  1
                ]
              ],
              "doc": null
            }
          },
          "16": {
            "25": {
              "name": "shouldComponentUpdate",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "newProps"
              ],
              "range": [
                [
                  16,
                  25
                ],
                [
                  17,
                  79
                ]
              ],
              "doc": null
            }
          }
        },
        "exports": 5
      },
      "src/cursor-view.coffee": {
        "objects": {
          "0": {
            "1": {
              "type": "import",
              "range": [
                [
                  0,
                  1
                ],
                [
                  0,
                  4
                ]
              ],
              "bindingType": "variable",
              "path": "./space-pen-extensions",
              "name": "View",
              "exportsProperty": "View"
            }
          },
          "1": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  1,
                  4
                ],
                [
                  1,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "4": {
            "0": {
              "type": "class",
              "name": "CursorView",
              "superClass": "View",
              "bindingType": "exports",
              "classProperties": [
                [
                  5,
                  12
                ],
                [
                  8,
                  16
                ],
                [
                  10,
                  17
                ],
                [
                  13,
                  18
                ],
                [
                  19,
                  17
                ]
              ],
              "prototypeProperties": [
                [
                  24,
                  12
                ],
                [
                  25,
                  11
                ],
                [
                  26,
                  15
                ],
                [
                  27,
                  16
                ],
                [
                  28,
                  23
                ],
                [
                  30,
                  14
                ],
                [
                  44,
                  16
                ],
                [
                  48,
                  17
                ],
                [
                  65,
                  12
                ],
                [
                  68,
                  19
                ],
                [
                  71,
                  19
                ],
                [
                  74,
                  20
                ],
                [
                  77,
                  14
                ],
                [
                  86,
                  16
                ],
                [
                  90,
                  17
                ],
                [
                  94,
                  17
                ],
                [
                  98,
                  21
                ],
                [
                  101,
                  21
                ],
                [
                  104,
                  30
                ],
                [
                  109,
                  24
                ]
              ],
              "doc": "~Private~",
              "range": [
                [
                  4,
                  0
                ],
                [
                  112,
                  31
                ]
              ]
            }
          },
          "5": {
            "12": {
              "name": "content",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  5,
                  12
                ],
                [
                  8,
                  1
                ]
              ]
            }
          },
          "8": {
            "16": {
              "name": "blinkPeriod",
              "type": "primitive",
              "range": [
                [
                  8,
                  16
                ],
                [
                  8,
                  18
                ]
              ],
              "bindingType": "classProperty"
            }
          },
          "10": {
            "17": {
              "name": "blinkCursors",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  10,
                  17
                ],
                [
                  13,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "13": {
            "18": {
              "name": "startBlinking",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "cursorView"
              ],
              "range": [
                [
                  13,
                  18
                ],
                [
                  19,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "19": {
            "17": {
              "name": "stopBlinking",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "cursorView"
              ],
              "range": [
                [
                  19,
                  17
                ],
                [
                  24,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "24": {
            "12": {
              "name": "blinking",
              "type": "primitive",
              "range": [
                [
                  24,
                  12
                ],
                [
                  24,
                  16
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "25": {
            "11": {
              "name": "visible",
              "type": "primitive",
              "range": [
                [
                  25,
                  11
                ],
                [
                  25,
                  14
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "26": {
            "15": {
              "name": "needsUpdate",
              "type": "primitive",
              "range": [
                [
                  26,
                  15
                ],
                [
                  26,
                  18
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "27": {
            "16": {
              "name": "needsRemoval",
              "type": "primitive",
              "range": [
                [
                  27,
                  16
                ],
                [
                  27,
                  20
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "28": {
            "23": {
              "name": "shouldPauseBlinking",
              "type": "primitive",
              "range": [
                [
                  28,
                  23
                ],
                [
                  28,
                  27
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "30": {
            "14": {
              "name": "initialize",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null,
                null
              ],
              "range": [
                [
                  30,
                  14
                ],
                [
                  44,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "44": {
            "16": {
              "name": "beforeRemove",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  44,
                  16
                ],
                [
                  48,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "48": {
            "17": {
              "name": "updateDisplay",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  48,
                  17
                ],
                [
                  65,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "65": {
            "12": {
              "name": "isHidden",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  65,
                  12
                ],
                [
                  68,
                  1
                ]
              ],
              "doc": "Private: Override for speed. The base function checks the computedStyle "
            }
          },
          "68": {
            "19": {
              "name": "needsAutoscroll",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  68,
                  19
                ],
                [
                  71,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "71": {
            "19": {
              "name": "clearAutoscroll",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  71,
                  19
                ],
                [
                  74,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "74": {
            "20": {
              "name": "getPixelPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  74,
                  20
                ],
                [
                  77,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "77": {
            "14": {
              "name": "setVisible",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "visible"
              ],
              "range": [
                [
                  77,
                  14
                ],
                [
                  86,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "86": {
            "16": {
              "name": "stopBlinking",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  86,
                  16
                ],
                [
                  90,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "90": {
            "17": {
              "name": "startBlinking",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  90,
                  17
                ],
                [
                  94,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "94": {
            "17": {
              "name": "resetBlinking",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  94,
                  17
                ],
                [
                  98,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "98": {
            "21": {
              "name": "getBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  98,
                  21
                ],
                [
                  101,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "101": {
            "21": {
              "name": "getScreenPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  101,
                  21
                ],
                [
                  104,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "104": {
            "30": {
              "name": "removeIdleClassTemporarily",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  104,
                  30
                ],
                [
                  109,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "109": {
            "24": {
              "name": "resetCursorAnimation",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  109,
                  24
                ],
                [
                  112,
                  31
                ]
              ],
              "doc": "~Private~"
            }
          }
        },
        "exports": 4
      },
      "src/cursor.coffee": {
        "objects": {
          "0": {
            "1": {
              "type": "import",
              "range": [
                [
                  0,
                  1
                ],
                [
                  0,
                  5
                ]
              ],
              "bindingType": "variable",
              "module": "text-buffer@^3.0.0",
              "name": "Point",
              "exportsProperty": "Point"
            },
            "8": {
              "type": "import",
              "range": [
                [
                  0,
                  8
                ],
                [
                  0,
                  12
                ]
              ],
              "bindingType": "variable",
              "module": "text-buffer@^3.0.0",
              "name": "Range",
              "exportsProperty": "Range"
            }
          },
          "1": {
            "1": {
              "type": "import",
              "range": [
                [
                  1,
                  1
                ],
                [
                  1,
                  5
                ]
              ],
              "bindingType": "variable",
              "module": "theorist@^1",
              "name": "Model",
              "exportsProperty": "Model"
            }
          },
          "2": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  2,
                  4
                ],
                [
                  2,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "10": {
            "0": {
              "type": "class",
              "name": "Cursor",
              "superClass": "Model",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  11,
                  18
                ],
                [
                  12,
                  18
                ],
                [
                  13,
                  14
                ],
                [
                  14,
                  11
                ],
                [
                  15,
                  19
                ],
                [
                  18,
                  15
                ],
                [
                  49,
                  11
                ],
                [
                  52,
                  18
                ],
                [
                  60,
                  16
                ],
                [
                  70,
                  21
                ],
                [
                  75,
                  21
                ],
                [
                  78,
                  18
                ],
                [
                  89,
                  21
                ],
                [
                  94,
                  21
                ],
                [
                  97,
                  14
                ],
                [
                  101,
                  20
                ],
                [
                  105,
                  14
                ],
                [
                  112,
                  13
                ],
                [
                  122,
                  14
                ],
                [
                  136,
                  16
                ],
                [
                  145,
                  28
                ],
                [
                  158,
                  27
                ],
                [
                  170,
                  16
                ],
                [
                  176,
                  19
                ],
                [
                  180,
                  18
                ],
                [
                  184,
                  16
                ],
                [
                  188,
                  19
                ],
                [
                  192,
                  16
                ],
                [
                  196,
                  19
                ],
                [
                  201,
                  24
                ],
                [
                  205,
                  10
                ],
                [
                  217,
                  12
                ],
                [
                  233,
                  12
                ],
                [
                  247,
                  13
                ],
                [
                  256,
                  13
                ],
                [
                  260,
                  16
                ],
                [
                  264,
                  31
                ],
                [
                  268,
                  25
                ],
                [
                  273,
                  30
                ],
                [
                  283,
                  25
                ],
                [
                  293,
                  25
                ],
                [
                  297,
                  19
                ],
                [
                  301,
                  25
                ],
                [
                  305,
                  19
                ],
                [
                  310,
                  29
                ],
                [
                  315,
                  30
                ],
                [
                  320,
                  26
                ],
                [
                  336,
                  43
                ],
                [
                  358,
                  41
                ],
                [
                  380,
                  41
                ],
                [
                  409,
                  37
                ],
                [
                  430,
                  40
                ],
                [
                  447,
                  29
                ],
                [
                  457,
                  29
                ],
                [
                  461,
                  34
                ],
                [
                  466,
                  38
                ],
                [
                  470,
                  45
                ],
                [
                  484,
                  49
                ],
                [
                  502,
                  34
                ],
                [
                  506,
                  24
                ],
                [
                  510,
                  23
                ],
                [
                  514,
                  18
                ],
                [
                  521,
                  17
                ],
                [
                  527,
                  13
                ],
                [
                  532,
                  32
                ]
              ],
              "doc": " Public: The `Cursor` class represents the little blinking line identifying\nwhere text can be inserted.\n\nCursors belong to {Editor}s and have some metadata attached in the form\nof a {Marker}. ",
              "range": [
                [
                  10,
                  0
                ],
                [
                  540,
                  50
                ]
              ]
            }
          },
          "11": {
            "18": {
              "name": "screenPosition",
              "type": "primitive",
              "range": [
                [
                  11,
                  18
                ],
                [
                  11,
                  21
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "12": {
            "18": {
              "name": "bufferPosition",
              "type": "primitive",
              "range": [
                [
                  12,
                  18
                ],
                [
                  12,
                  21
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "13": {
            "14": {
              "name": "goalColumn",
              "type": "primitive",
              "range": [
                [
                  13,
                  14
                ],
                [
                  13,
                  17
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "14": {
            "11": {
              "name": "visible",
              "type": "primitive",
              "range": [
                [
                  14,
                  11
                ],
                [
                  14,
                  14
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "15": {
            "19": {
              "name": "needsAutoscroll",
              "type": "primitive",
              "range": [
                [
                  15,
                  19
                ],
                [
                  15,
                  22
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "18": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  18,
                  15
                ],
                [
                  49,
                  1
                ]
              ],
              "doc": "Private: Instantiated by an {Editor} "
            }
          },
          "49": {
            "11": {
              "name": "destroy",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  49,
                  11
                ],
                [
                  52,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "52": {
            "18": {
              "name": "changePosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "options",
                "fn"
              ],
              "range": [
                [
                  52,
                  18
                ],
                [
                  60,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "60": {
            "16": {
              "name": "getPixelRect",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  60,
                  16
                ],
                [
                  70,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "70": {
            "21": {
              "name": "setScreenPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenPosition",
                "options"
              ],
              "range": [
                [
                  70,
                  21
                ],
                [
                  75,
                  1
                ]
              ],
              "doc": " Public: Moves a cursor to a given screen position.\n\nscreenPosition - An {Array} of two numbers: the screen row, and the screen\n                 column.\noptions - An {Object} with the following keys:\n  :autoscroll - A Boolean which, if `true`, scrolls the {Editor} to wherever\n                the cursor moves to. "
            }
          },
          "75": {
            "21": {
              "name": "getScreenPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  75,
                  21
                ],
                [
                  78,
                  1
                ]
              ],
              "doc": "Public: Returns the screen position of the cursor as an Array. "
            }
          },
          "78": {
            "18": {
              "name": "getScreenRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  78,
                  18
                ],
                [
                  89,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "89": {
            "21": {
              "name": "setBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferPosition",
                "options"
              ],
              "range": [
                [
                  89,
                  21
                ],
                [
                  94,
                  1
                ]
              ],
              "doc": " Public: Moves a cursor to a given buffer position.\n\nbufferPosition - An {Array} of two numbers: the buffer row, and the buffer\n                 column.\noptions - An {Object} with the following keys:\n  :autoscroll - A Boolean which, if `true`, scrolls the {Editor} to wherever\n                the cursor moves to. "
            }
          },
          "94": {
            "21": {
              "name": "getBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  94,
                  21
                ],
                [
                  97,
                  1
                ]
              ],
              "doc": "Public: Returns the current buffer position as an Array. "
            }
          },
          "97": {
            "14": {
              "name": "autoscroll",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "options"
              ],
              "range": [
                [
                  97,
                  14
                ],
                [
                  101,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "101": {
            "20": {
              "name": "updateVisibility",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  101,
                  20
                ],
                [
                  105,
                  1
                ]
              ],
              "doc": "Public: If the marker range is empty, the cursor is marked as being visible. "
            }
          },
          "105": {
            "14": {
              "name": "setVisible",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "visible"
              ],
              "range": [
                [
                  105,
                  14
                ],
                [
                  112,
                  1
                ]
              ],
              "doc": "Public: Sets whether the cursor is visible. "
            }
          },
          "112": {
            "13": {
              "name": "isVisible",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  112,
                  13
                ],
                [
                  112,
                  23
                ]
              ],
              "doc": "Public: Returns the visibility of the cursor. "
            }
          },
          "122": {
            "14": {
              "name": "wordRegExp",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  122,
                  14
                ],
                [
                  136,
                  1
                ]
              ],
              "doc": " Public: Get the RegExp used by the cursor to determine what a \"word\" is.\n\noptions: An optional {Object} with the following keys:\n  :includeNonWordCharacters - A {Boolean} indicating whether to include\n                              non-word characters in the regex.\n                              (default: true)\n\nReturns a {RegExp}. "
            }
          },
          "136": {
            "16": {
              "name": "isLastCursor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  136,
                  16
                ],
                [
                  145,
                  1
                ]
              ],
              "doc": " Public: Identifies if this cursor is the last in the {Editor}.\n\n\"Last\" is defined as the most recently added cursor.\n\nReturns a {Boolean}. "
            }
          },
          "145": {
            "28": {
              "name": "isSurroundedByWhitespace",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  145,
                  28
                ],
                [
                  158,
                  1
                ]
              ],
              "doc": " Public: Identifies if the cursor is surrounded by whitespace.\n\n\"Surrounded\" here means that the character directly before and after the\ncursor are both whitespace.\n\nReturns a {Boolean}. "
            }
          },
          "158": {
            "27": {
              "name": "isBetweenWordAndNonWord",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  158,
                  27
                ],
                [
                  170,
                  1
                ]
              ],
              "doc": " Public: Returns whether the cursor is currently between a word and non-word\ncharacter. The non-word characters are defined by the\n`editor.nonWordCharacters` config value.\n\nThis method returns false if the character before or after the cursor is\nwhitespace.\n\nReturns a Boolean. "
            }
          },
          "170": {
            "16": {
              "name": "isInsideWord",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  170,
                  16
                ],
                [
                  176,
                  1
                ]
              ],
              "doc": "Public: Returns whether this cursor is between a word's start and end. "
            }
          },
          "176": {
            "19": {
              "name": "clearAutoscroll",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  176,
                  19
                ],
                [
                  180,
                  1
                ]
              ],
              "doc": "Public: Prevents this cursor from causing scrolling. "
            }
          },
          "180": {
            "18": {
              "name": "clearSelection",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  180,
                  18
                ],
                [
                  184,
                  1
                ]
              ],
              "doc": "Public: Deselects the current selection. "
            }
          },
          "184": {
            "16": {
              "name": "getScreenRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  184,
                  16
                ],
                [
                  188,
                  1
                ]
              ],
              "doc": "Public: Returns the cursor's current screen row. "
            }
          },
          "188": {
            "19": {
              "name": "getScreenColumn",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  188,
                  19
                ],
                [
                  192,
                  1
                ]
              ],
              "doc": "Public: Returns the cursor's current screen column. "
            }
          },
          "192": {
            "16": {
              "name": "getBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  192,
                  16
                ],
                [
                  196,
                  1
                ]
              ],
              "doc": "Public: Retrieves the cursor's current buffer row. "
            }
          },
          "196": {
            "19": {
              "name": "getBufferColumn",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  196,
                  19
                ],
                [
                  201,
                  1
                ]
              ],
              "doc": "Public: Returns the cursor's current buffer column. "
            }
          },
          "201": {
            "24": {
              "name": "getCurrentBufferLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  201,
                  24
                ],
                [
                  205,
                  1
                ]
              ],
              "doc": " Public: Returns the cursor's current buffer row of text excluding its line\nending. "
            }
          },
          "205": {
            "10": {
              "name": "moveUp",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "rowCount",
                null
              ],
              "range": [
                [
                  205,
                  10
                ],
                [
                  217,
                  1
                ]
              ],
              "doc": "Public: Moves the cursor up one screen row. "
            }
          },
          "217": {
            "12": {
              "name": "moveDown",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "rowCount",
                null
              ],
              "range": [
                [
                  217,
                  12
                ],
                [
                  233,
                  1
                ]
              ],
              "doc": "Public: Moves the cursor down one screen row. "
            }
          },
          "233": {
            "12": {
              "name": "moveLeft",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  233,
                  12
                ],
                [
                  247,
                  1
                ]
              ],
              "doc": " Public: Moves the cursor left one screen column.\n\noptions - An {Object} with the following keys:\n  :moveToEndOfSelection - if true, move to the left of the selection if a\n                          selection exists. "
            }
          },
          "247": {
            "13": {
              "name": "moveRight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  247,
                  13
                ],
                [
                  256,
                  1
                ]
              ],
              "doc": " Public: Moves the cursor right one screen column.\n\noptions - An {Object} with the following keys:\n  :moveToEndOfSelection - if true, move to the right of the selection if a\n                          selection exists. "
            }
          },
          "256": {
            "13": {
              "name": "moveToTop",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  256,
                  13
                ],
                [
                  260,
                  1
                ]
              ],
              "doc": "Public: Moves the cursor to the top of the buffer. "
            }
          },
          "260": {
            "16": {
              "name": "moveToBottom",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  260,
                  16
                ],
                [
                  264,
                  1
                ]
              ],
              "doc": "Public: Moves the cursor to the bottom of the buffer. "
            }
          },
          "264": {
            "31": {
              "name": "moveToBeginningOfScreenLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  264,
                  31
                ],
                [
                  268,
                  1
                ]
              ],
              "doc": "Public: Moves the cursor to the beginning of the line. "
            }
          },
          "268": {
            "25": {
              "name": "moveToBeginningOfLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  268,
                  25
                ],
                [
                  273,
                  1
                ]
              ],
              "doc": "Public: Moves the cursor to the beginning of the buffer line. "
            }
          },
          "273": {
            "30": {
              "name": "moveToFirstCharacterOfLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  273,
                  30
                ],
                [
                  283,
                  1
                ]
              ],
              "doc": " Public: Moves the cursor to the beginning of the first character in the\nline. "
            }
          },
          "283": {
            "25": {
              "name": "skipLeadingWhitespace",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  283,
                  25
                ],
                [
                  293,
                  1
                ]
              ],
              "doc": " Public: Moves the cursor to the beginning of the buffer line, skipping all\nwhitespace. "
            }
          },
          "293": {
            "25": {
              "name": "moveToEndOfScreenLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  293,
                  25
                ],
                [
                  297,
                  1
                ]
              ],
              "doc": "Public: Moves the cursor to the end of the line. "
            }
          },
          "297": {
            "19": {
              "name": "moveToEndOfLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  297,
                  19
                ],
                [
                  301,
                  1
                ]
              ],
              "doc": "Public: Moves the cursor to the end of the buffer line. "
            }
          },
          "301": {
            "25": {
              "name": "moveToBeginningOfWord",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  301,
                  25
                ],
                [
                  305,
                  1
                ]
              ],
              "doc": "Public: Moves the cursor to the beginning of the word. "
            }
          },
          "305": {
            "19": {
              "name": "moveToEndOfWord",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  305,
                  19
                ],
                [
                  310,
                  1
                ]
              ],
              "doc": "Public: Moves the cursor to the end of the word. "
            }
          },
          "310": {
            "29": {
              "name": "moveToBeginningOfNextWord",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  310,
                  29
                ],
                [
                  315,
                  1
                ]
              ],
              "doc": "Public: Moves the cursor to the beginning of the next word. "
            }
          },
          "315": {
            "30": {
              "name": "moveToPreviousWordBoundary",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  315,
                  30
                ],
                [
                  320,
                  1
                ]
              ],
              "doc": "Public: Moves the cursor to the previous word boundary. "
            }
          },
          "320": {
            "26": {
              "name": "moveToNextWordBoundary",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  320,
                  26
                ],
                [
                  336,
                  1
                ]
              ],
              "doc": "Public: Moves the cursor to the next word boundary. "
            }
          },
          "336": {
            "43": {
              "name": "getBeginningOfCurrentWordBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "options"
              ],
              "range": [
                [
                  336,
                  43
                ],
                [
                  358,
                  1
                ]
              ],
              "doc": " Public: Retrieves the buffer position of where the current word starts.\n\noptions - An {Object} with the following keys:\n  :wordRegex - A {RegExp} indicating what constitutes a \"word\"\n               (default: {::wordRegExp}).\n  :includeNonWordCharacters - A {Boolean} indicating whether to include\n                              non-word characters in the default word regex.\n                              Has no effect if wordRegex is set.\n  :allowPrevious - A {Boolean} indicating whether the beginning of the\n                   previous word can be returned.\n\nReturns a {Range}. "
            }
          },
          "358": {
            "41": {
              "name": "getPreviousWordBoundaryBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "options"
              ],
              "range": [
                [
                  358,
                  41
                ],
                [
                  380,
                  1
                ]
              ],
              "doc": " Public: Retrieves buffer position of previous word boundary. It might be on\nthe current word, or the previous word. "
            }
          },
          "380": {
            "41": {
              "name": "getMoveNextWordBoundaryBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "options"
              ],
              "range": [
                [
                  380,
                  41
                ],
                [
                  409,
                  1
                ]
              ],
              "doc": " Public: Retrieves buffer position of the next word boundary. It might be on\nthe current word, or the previous word. "
            }
          },
          "409": {
            "37": {
              "name": "getEndOfCurrentWordBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "options"
              ],
              "range": [
                [
                  409,
                  37
                ],
                [
                  430,
                  1
                ]
              ],
              "doc": " Public: Retrieves the buffer position of where the current word ends.\n\noptions - An {Object} with the following keys:\n  :wordRegex - A {RegExp} indicating what constitutes a \"word\"\n               (default: {::wordRegExp})\n  :includeNonWordCharacters - A Boolean indicating whether to include\n                              non-word characters in the default word regex.\n                              Has no effect if wordRegex is set.\n\nReturns a {Range}. "
            }
          },
          "430": {
            "40": {
              "name": "getBeginningOfNextWordBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "options"
              ],
              "range": [
                [
                  430,
                  40
                ],
                [
                  447,
                  1
                ]
              ],
              "doc": " Public: Retrieves the buffer position of where the next word starts.\n\noptions -\n  :wordRegex - A {RegExp} indicating what constitutes a \"word\"\n               (default: {::wordRegExp}).\n\nReturns a {Range}. "
            }
          },
          "447": {
            "29": {
              "name": "getCurrentWordBufferRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "options"
              ],
              "range": [
                [
                  447,
                  29
                ],
                [
                  457,
                  1
                ]
              ],
              "doc": " Public: Returns the buffer Range occupied by the word located under the cursor.\n\noptions -\n  :wordRegex - A {RegExp} indicating what constitutes a \"word\"\n               (default: {::wordRegExp}). "
            }
          },
          "457": {
            "29": {
              "name": "getCurrentLineBufferRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "options"
              ],
              "range": [
                [
                  457,
                  29
                ],
                [
                  461,
                  1
                ]
              ],
              "doc": " Public: Returns the buffer Range for the current line.\n\noptions -\n  :includeNewline: - A {Boolean} which controls whether the Range should\n                     include the newline. "
            }
          },
          "461": {
            "34": {
              "name": "moveToBeginningOfNextParagraph",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  461,
                  34
                ],
                [
                  466,
                  1
                ]
              ],
              "doc": "Public: Moves the cursor to the beginning of the next paragraph "
            }
          },
          "466": {
            "38": {
              "name": "moveToBeginningOfPreviousParagraph",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  466,
                  38
                ],
                [
                  470,
                  1
                ]
              ],
              "doc": "Public: Moves the cursor to the beginning of the previous paragraph "
            }
          },
          "470": {
            "45": {
              "name": "getBeginningOfNextParagraphBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "editor"
              ],
              "range": [
                [
                  470,
                  45
                ],
                [
                  484,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "484": {
            "49": {
              "name": "getBeginningOfPreviousParagraphBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "editor"
              ],
              "range": [
                [
                  484,
                  49
                ],
                [
                  502,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "502": {
            "34": {
              "name": "getCurrentParagraphBufferRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  502,
                  34
                ],
                [
                  506,
                  1
                ]
              ],
              "doc": " Public: Retrieves the range for the current paragraph.\n\nA paragraph is defined as a block of text surrounded by empty lines.\n\nReturns a {Range}. "
            }
          },
          "506": {
            "24": {
              "name": "getCurrentWordPrefix",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  506,
                  24
                ],
                [
                  510,
                  1
                ]
              ],
              "doc": "Public: Returns the characters preceding the cursor in the current word. "
            }
          },
          "510": {
            "23": {
              "name": "isAtBeginningOfLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  510,
                  23
                ],
                [
                  514,
                  1
                ]
              ],
              "doc": "Public: Returns whether the cursor is at the start of a line. "
            }
          },
          "514": {
            "18": {
              "name": "getIndentLevel",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  514,
                  18
                ],
                [
                  521,
                  1
                ]
              ],
              "doc": "Public: Returns the indentation level of the current line. "
            }
          },
          "521": {
            "17": {
              "name": "isAtEndOfLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  521,
                  17
                ],
                [
                  527,
                  1
                ]
              ],
              "doc": "Public: Returns whether the cursor is on the line return character. "
            }
          },
          "527": {
            "13": {
              "name": "getScopes",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  527,
                  13
                ],
                [
                  532,
                  1
                ]
              ],
              "doc": " Public: Retrieves the grammar's token scopes for the line.\n\nReturns an {Array} of {String}s. "
            }
          },
          "532": {
            "32": {
              "name": "hasPrecedingCharactersOnLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  532,
                  32
                ],
                [
                  540,
                  50
                ]
              ],
              "doc": " Public: Returns true if this cursor has no non-whitespace characters before\nits current position. "
            }
          }
        },
        "exports": 10
      },
      "src/cursors-component.coffee": {
        "objects": {
          "0": {
            "8": {
              "name": "React",
              "type": "import",
              "range": [
                [
                  0,
                  8
                ],
                [
                  0,
                  32
                ]
              ],
              "bindingType": "variable",
              "module": "react-atom-fork@^0.11.1"
            }
          },
          "1": {
            "1": {
              "type": "import",
              "range": [
                [
                  1,
                  1
                ],
                [
                  1,
                  3
                ]
              ],
              "bindingType": "variable",
              "module": "reactionary-atom-fork@^1.0.0",
              "name": "div",
              "exportsProperty": "div"
            }
          },
          "2": {
            "1": {
              "type": "import",
              "range": [
                [
                  2,
                  1
                ],
                [
                  2,
                  8
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1",
              "name": "debounce",
              "exportsProperty": "debounce"
            },
            "11": {
              "type": "import",
              "range": [
                [
                  2,
                  11
                ],
                [
                  2,
                  17
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1",
              "name": "toArray",
              "exportsProperty": "toArray"
            },
            "20": {
              "type": "import",
              "range": [
                [
                  2,
                  20
                ],
                [
                  2,
                  39
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1",
              "name": "isEqualForProperties",
              "exportsProperty": "isEqualForProperties"
            },
            "42": {
              "type": "import",
              "range": [
                [
                  2,
                  42
                ],
                [
                  2,
                  48
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1",
              "name": "isEqual",
              "exportsProperty": "isEqual"
            }
          },
          "3": {
            "18": {
              "name": "SubscriberMixin",
              "type": "import",
              "range": [
                [
                  3,
                  18
                ],
                [
                  3,
                  45
                ]
              ],
              "bindingType": "variable",
              "path": "./subscriber-mixin"
            }
          },
          "4": {
            "18": {
              "name": "CursorComponent",
              "type": "import",
              "range": [
                [
                  4,
                  18
                ],
                [
                  4,
                  45
                ]
              ],
              "bindingType": "variable",
              "path": "./cursor-component"
            }
          },
          "7": {
            "19": {
              "name": "CursorsComponent",
              "type": "function",
              "range": [
                [
                  7,
                  19
                ],
                [
                  60,
                  37
                ]
              ]
            }
          },
          "8": {
            "15": {
              "name": "'CursorsComponent'",
              "type": "primitive",
              "range": [
                [
                  8,
                  15
                ],
                [
                  8,
                  32
                ]
              ]
            }
          },
          "9": {
            "10": {
              "type": "primitive",
              "range": [
                [
                  9,
                  10
                ],
                [
                  9,
                  26
                ]
              ]
            }
          },
          "11": {
            "29": {
              "type": "primitive",
              "range": [
                [
                  11,
                  29
                ],
                [
                  11,
                  32
                ]
              ]
            }
          },
          "13": {
            "10": {
              "name": "render",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  13,
                  10
                ],
                [
                  25,
                  1
                ]
              ],
              "doc": null
            }
          },
          "25": {
            "19": {
              "name": "getInitialState",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  25,
                  19
                ],
                [
                  28,
                  1
                ]
              ],
              "doc": null
            }
          },
          "28": {
            "21": {
              "name": "componentDidMount",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  28,
                  21
                ],
                [
                  31,
                  1
                ]
              ],
              "doc": null
            }
          },
          "31": {
            "24": {
              "name": "componentWillUnmount",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  31,
                  24
                ],
                [
                  34,
                  1
                ]
              ],
              "doc": null
            }
          },
          "34": {
            "25": {
              "name": "shouldComponentUpdate",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "newProps",
                "newState"
              ],
              "range": [
                [
                  34,
                  25
                ],
                [
                  38,
                  1
                ]
              ],
              "doc": null
            }
          },
          "38": {
            "23": {
              "name": "componentWillUpdate",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "newProps"
              ],
              "range": [
                [
                  38,
                  23
                ],
                [
                  45,
                  1
                ]
              ],
              "doc": null
            }
          },
          "45": {
            "24": {
              "name": "startBlinkingCursors",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  45,
                  24
                ],
                [
                  48,
                  1
                ]
              ],
              "doc": null
            }
          },
          "48": {
            "34": {
              "type": "primitive",
              "range": [
                [
                  48,
                  34
                ],
                [
                  48,
                  37
                ]
              ]
            }
          },
          "50": {
            "23": {
              "name": "stopBlinkingCursors",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  50,
                  23
                ],
                [
                  53,
                  1
                ]
              ],
              "doc": null
            }
          },
          "53": {
            "21": {
              "name": "toggleCursorBlink",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  53,
                  21
                ],
                [
                  56,
                  1
                ]
              ],
              "doc": null
            }
          },
          "56": {
            "23": {
              "name": "pauseCursorBlinking",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  56,
                  23
                ],
                [
                  60,
                  37
                ]
              ],
              "doc": null
            }
          }
        },
        "exports": 7
      },
      "src/custom-event-mixin.coffee": {
        "objects": {
          "2": {
            "2": {
              "type": "primitive",
              "range": [
                [
                  2,
                  2
                ],
                [
                  14,
                  52
                ]
              ]
            },
            "22": {
              "name": "componentWillMount",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  2,
                  22
                ],
                [
                  5,
                  1
                ]
              ],
              "doc": null
            }
          },
          "5": {
            "24": {
              "name": "componentWillUnmount",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  5,
                  24
                ],
                [
                  10,
                  1
                ]
              ],
              "doc": null
            }
          },
          "10": {
            "27": {
              "name": "addCustomEventListeners",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "customEventListeners"
              ],
              "range": [
                [
                  10,
                  27
                ],
                [
                  14,
                  52
                ]
              ],
              "doc": null
            }
          }
        },
        "exports": 2
      },
      "src/decoration.coffee": {
        "objects": {
          "0": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  0,
                  4
                ],
                [
                  0,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "1": {
            "1": {
              "type": "import",
              "range": [
                [
                  1,
                  1
                ],
                [
                  1,
                  10
                ]
              ],
              "bindingType": "variable",
              "module": "emissary@^1.2.2",
              "name": "Subscriber",
              "exportsProperty": "Subscriber"
            },
            "13": {
              "type": "import",
              "range": [
                [
                  1,
                  13
                ],
                [
                  1,
                  19
                ]
              ],
              "bindingType": "variable",
              "module": "emissary@^1.2.2",
              "name": "Emitter",
              "exportsProperty": "Emitter"
            }
          },
          "3": {
            "12": {
              "name": "0",
              "type": "primitive",
              "range": [
                [
                  3,
                  12
                ],
                [
                  3,
                  12
                ]
              ]
            }
          },
          "4": {
            "9": {
              "name": "nextId",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  4,
                  9
                ],
                [
                  4,
                  22
                ]
              ]
            }
          },
          "40": {
            "0": {
              "type": "class",
              "name": "Decoration",
              "bindingType": "exports",
              "classProperties": [
                [
                  43,
                  11
                ]
              ],
              "prototypeProperties": [
                [
                  49,
                  15
                ],
                [
                  59,
                  11
                ],
                [
                  70,
                  10
                ],
                [
                  79,
                  13
                ],
                [
                  82,
                  13
                ],
                [
                  89,
                  10
                ],
                [
                  92,
                  18
                ],
                [
                  98,
                  9
                ],
                [
                  104,
                  20
                ]
              ],
              "doc": " Public: Represents a decoration that follows a {Marker}. A decoration is\nbasically a visual representation of a marker. It allows you to add CSS\nclasses to line numbers in the gutter, lines, and add selection-line regions\naround marked ranges of text.\n\n{Decoration} objects are not meant to be created directly, but created with\n{Editor::decorateMarker}. eg.\n\n```coffee\nrange = editor.getSelectedBufferRange() # any range you like\nmarker = editor.markBufferRange(range)\ndecoration = editor.decorateMarker(marker, {type: 'line', class: 'my-line-class'})\n```\n\nBest practice for destorying the decoration is by destroying the {Marker}.\n\n```\nmarker.destroy()\n```\n\nYou should only use {Decoration::destroy} when you still need or do not own\nthe marker.\n\n### IDs\nEach {Decoration} has a unique ID available via `decoration.id`.\n\n### Events\nA couple of events are emitted:\n\n* `destroyed`: When the {Decoration} is destroyed\n* `updated`: When the {Decoration} is updated via {Decoration::update}.\n    Event object has properties `oldParams` and `newParams`\n\n ",
              "range": [
                [
                  40,
                  0
                ],
                [
                  106,
                  8
                ]
              ]
            }
          },
          "43": {
            "11": {
              "name": "isType",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "decorationParams",
                "type"
              ],
              "range": [
                [
                  43,
                  11
                ],
                [
                  49,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "49": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null,
                null,
                null
              ],
              "range": [
                [
                  49,
                  15
                ],
                [
                  59,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "59": {
            "11": {
              "name": "destroy",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  59,
                  11
                ],
                [
                  70,
                  1
                ]
              ],
              "doc": " Public: Destroy this marker.\n\nIf you own the marker, you should use {Marker::destroy} which will destroy\nthis decoration. "
            }
          },
          "70": {
            "10": {
              "name": "update",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "newParams"
              ],
              "range": [
                [
                  70,
                  10
                ],
                [
                  79,
                  1
                ]
              ],
              "doc": " Public: Update the marker with new params. Allows you to change the decoration's class.\n\n```\ndecoration.update({type: 'gutter', class: 'my-new-class'})\n``` "
            }
          },
          "79": {
            "13": {
              "name": "getMarker",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  79,
                  13
                ],
                [
                  79,
                  22
                ]
              ],
              "doc": "Public: Returns the marker associated with this {Decoration} "
            }
          },
          "82": {
            "13": {
              "name": "getParams",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  82,
                  13
                ],
                [
                  82,
                  22
                ]
              ],
              "doc": "Public: Returns the {Decoration}'s params. "
            }
          },
          "89": {
            "10": {
              "name": "isType",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "type"
              ],
              "range": [
                [
                  89,
                  10
                ],
                [
                  92,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "92": {
            "18": {
              "name": "matchesPattern",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "decorationPattern"
              ],
              "range": [
                [
                  92,
                  18
                ],
                [
                  98,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "98": {
            "9": {
              "name": "flash",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "klass",
                "duration"
              ],
              "range": [
                [
                  98,
                  9
                ],
                [
                  104,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "104": {
            "20": {
              "name": "consumeNextFlash",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  104,
                  20
                ],
                [
                  106,
                  8
                ]
              ],
              "doc": "~Private~"
            }
          }
        },
        "exports": 40
      },
      "src/deserializer-manager.coffee": {
        "objects": {
          "20": {
            "0": {
              "type": "class",
              "name": "DeserializerManager",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  21,
                  15
                ],
                [
                  27,
                  7
                ],
                [
                  33,
                  10
                ],
                [
                  41,
                  15
                ],
                [
                  54,
                  7
                ]
              ],
              "doc": " Public: Manages the deserializers used for serialized state\n\nAn instance of this class is always available as the `atom.deserializers`\nglobal.\n\n### Registering a deserializer\n\n```coffee\nclass MyPackageView extends View\n  atom.deserializers.add(this)\n\n  @deserialize: (state) ->\n    new MyPackageView(state)\n\n  constructor: (@state) ->\n\n  serialize: ->\n    @state\n``` ",
              "range": [
                [
                  20,
                  0
                ],
                [
                  58,
                  24
                ]
              ]
            }
          },
          "21": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  21,
                  15
                ],
                [
                  27,
                  1
                ]
              ]
            }
          },
          "27": {
            "7": {
              "name": "add",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "classes"
              ],
              "range": [
                [
                  27,
                  7
                ],
                [
                  33,
                  1
                ]
              ],
              "doc": " Public: Register the given class(es) as deserializers.\n\nclasses - One or more classes to register. "
            }
          },
          "33": {
            "10": {
              "name": "remove",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "classes"
              ],
              "range": [
                [
                  33,
                  10
                ],
                [
                  41,
                  1
                ]
              ],
              "doc": " Public: Remove the given class(es) as deserializers.\n\nclasses - One or more classes to remove. "
            }
          },
          "41": {
            "15": {
              "name": "deserialize",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "state",
                "params"
              ],
              "range": [
                [
                  41,
                  15
                ],
                [
                  54,
                  1
                ]
              ],
              "doc": " Public: Deserialize the state and params.\n\nstate  - The state {Object} to deserialize.\nparams - The params {Object} to pass as the second arguments to the\n         deserialize method of the deserializer. "
            }
          },
          "54": {
            "7": {
              "name": "get",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "state"
              ],
              "range": [
                [
                  54,
                  7
                ],
                [
                  58,
                  24
                ]
              ],
              "doc": " Private: Get the deserializer for the state.\n\nstate - The state {Object} being deserialized. "
            }
          }
        },
        "exports": 20
      },
      "src/display-buffer-marker.coffee": {
        "objects": {
          "0": {
            "1": {
              "type": "import",
              "range": [
                [
                  0,
                  1
                ],
                [
                  0,
                  5
                ]
              ],
              "bindingType": "variable",
              "module": "text-buffer@^3.0.0",
              "name": "Range",
              "exportsProperty": "Range"
            }
          },
          "1": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  1,
                  4
                ],
                [
                  1,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "2": {
            "1": {
              "type": "import",
              "range": [
                [
                  2,
                  1
                ],
                [
                  2,
                  7
                ]
              ],
              "bindingType": "variable",
              "module": "emissary@^1.2.2",
              "name": "Emitter",
              "exportsProperty": "Emitter"
            },
            "10": {
              "type": "import",
              "range": [
                [
                  2,
                  10
                ],
                [
                  2,
                  19
                ]
              ],
              "bindingType": "variable",
              "module": "emissary@^1.2.2",
              "name": "Subscriber",
              "exportsProperty": "Subscriber"
            }
          },
          "5": {
            "0": {
              "type": "class",
              "name": "DisplayBufferMarker",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  9,
                  28
                ],
                [
                  10,
                  25
                ],
                [
                  11,
                  25
                ],
                [
                  12,
                  25
                ],
                [
                  13,
                  25
                ],
                [
                  14,
                  12
                ],
                [
                  16,
                  15
                ],
                [
                  27,
                  8
                ],
                [
                  33,
                  18
                ],
                [
                  40,
                  18
                ],
                [
                  46,
                  18
                ],
                [
                  53,
                  18
                ],
                [
                  56,
                  17
                ],
                [
                  62,
                  25
                ],
                [
                  69,
                  25
                ],
                [
                  76,
                  25
                ],
                [
                  83,
                  25
                ],
                [
                  89,
                  25
                ],
                [
                  96,
                  25
                ],
                [
                  103,
                  25
                ],
                [
                  110,
                  25
                ],
                [
                  117,
                  26
                ],
                [
                  124,
                  26
                ],
                [
                  131,
                  24
                ],
                [
                  138,
                  24
                ],
                [
                  146,
                  13
                ],
                [
                  150,
                  13
                ],
                [
                  153,
                  11
                ],
                [
                  157,
                  14
                ],
                [
                  162,
                  11
                ],
                [
                  169,
                  15
                ],
                [
                  172,
                  17
                ],
                [
                  175,
                  17
                ],
                [
                  178,
                  21
                ],
                [
                  183,
                  11
                ],
                [
                  187,
                  11
                ],
                [
                  191,
                  11
                ],
                [
                  195,
                  11
                ],
                [
                  198,
                  13
                ],
                [
                  202,
                  19
                ]
              ],
              "doc": "~Private~",
              "range": [
                [
                  5,
                  0
                ],
                [
                  230,
                  23
                ]
              ]
            }
          },
          "9": {
            "28": {
              "name": "bufferMarkerSubscription",
              "type": "primitive",
              "range": [
                [
                  9,
                  28
                ],
                [
                  9,
                  31
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "10": {
            "25": {
              "name": "oldHeadBufferPosition",
              "type": "primitive",
              "range": [
                [
                  10,
                  25
                ],
                [
                  10,
                  28
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "11": {
            "25": {
              "name": "oldHeadScreenPosition",
              "type": "primitive",
              "range": [
                [
                  11,
                  25
                ],
                [
                  11,
                  28
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "12": {
            "25": {
              "name": "oldTailBufferPosition",
              "type": "primitive",
              "range": [
                [
                  12,
                  25
                ],
                [
                  12,
                  28
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "13": {
            "25": {
              "name": "oldTailScreenPosition",
              "type": "primitive",
              "range": [
                [
                  13,
                  25
                ],
                [
                  13,
                  28
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "14": {
            "12": {
              "name": "wasValid",
              "type": "primitive",
              "range": [
                [
                  14,
                  12
                ],
                [
                  14,
                  15
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "16": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  16,
                  15
                ],
                [
                  27,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "27": {
            "8": {
              "name": "copy",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "attributes"
              ],
              "range": [
                [
                  27,
                  8
                ],
                [
                  33,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "33": {
            "18": {
              "name": "getScreenRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  33,
                  18
                ],
                [
                  40,
                  1
                ]
              ],
              "doc": " Private: Gets the screen range of the display marker.\n\nReturns a {Range}. "
            }
          },
          "40": {
            "18": {
              "name": "setScreenRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenRange",
                "options"
              ],
              "range": [
                [
                  40,
                  18
                ],
                [
                  46,
                  1
                ]
              ],
              "doc": " Private: Modifies the screen range of the display marker.\n\nscreenRange - The new {Range} to use\noptions - A hash of options matching those found in {Marker::setRange} "
            }
          },
          "46": {
            "18": {
              "name": "getBufferRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  46,
                  18
                ],
                [
                  53,
                  1
                ]
              ],
              "doc": " Private: Gets the buffer range of the display marker.\n\nReturns a {Range}. "
            }
          },
          "53": {
            "18": {
              "name": "setBufferRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRange",
                "options"
              ],
              "range": [
                [
                  53,
                  18
                ],
                [
                  56,
                  1
                ]
              ],
              "doc": " Private: Modifies the buffer range of the display marker.\n\nscreenRange - The new {Range} to use\noptions - A hash of options matching those found in {Marker::setRange} "
            }
          },
          "56": {
            "17": {
              "name": "getPixelRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  56,
                  17
                ],
                [
                  62,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "62": {
            "25": {
              "name": "getHeadScreenPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  62,
                  25
                ],
                [
                  69,
                  1
                ]
              ],
              "doc": " Private: Retrieves the screen position of the marker's head.\n\nReturns a {Point}. "
            }
          },
          "69": {
            "25": {
              "name": "setHeadScreenPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenPosition",
                "options"
              ],
              "range": [
                [
                  69,
                  25
                ],
                [
                  76,
                  1
                ]
              ],
              "doc": " Private: Sets the screen position of the marker's head.\n\nscreenRange - The new {Point} to use\noptions - A hash of options matching those found in {DisplayBuffer::bufferPositionForScreenPosition} "
            }
          },
          "76": {
            "25": {
              "name": "getHeadBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  76,
                  25
                ],
                [
                  83,
                  1
                ]
              ],
              "doc": " Private: Retrieves the buffer position of the marker's head.\n\nReturns a {Point}. "
            }
          },
          "83": {
            "25": {
              "name": "setHeadBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferPosition"
              ],
              "range": [
                [
                  83,
                  25
                ],
                [
                  89,
                  1
                ]
              ],
              "doc": " Private: Sets the buffer position of the marker's head.\n\nscreenRange - The new {Point} to use\noptions - A hash of options matching those found in {DisplayBuffer::bufferPositionForScreenPosition} "
            }
          },
          "89": {
            "25": {
              "name": "getTailScreenPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  89,
                  25
                ],
                [
                  96,
                  1
                ]
              ],
              "doc": " Private: Retrieves the screen position of the marker's tail.\n\nReturns a {Point}. "
            }
          },
          "96": {
            "25": {
              "name": "setTailScreenPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenPosition",
                "options"
              ],
              "range": [
                [
                  96,
                  25
                ],
                [
                  103,
                  1
                ]
              ],
              "doc": " Private: Sets the screen position of the marker's tail.\n\nscreenRange - The new {Point} to use\noptions - A hash of options matching those found in {DisplayBuffer::bufferPositionForScreenPosition} "
            }
          },
          "103": {
            "25": {
              "name": "getTailBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  103,
                  25
                ],
                [
                  110,
                  1
                ]
              ],
              "doc": " Private: Retrieves the buffer position of the marker's tail.\n\nReturns a {Point}. "
            }
          },
          "110": {
            "25": {
              "name": "setTailBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferPosition"
              ],
              "range": [
                [
                  110,
                  25
                ],
                [
                  117,
                  1
                ]
              ],
              "doc": " Private: Sets the buffer position of the marker's tail.\n\nscreenRange - The new {Point} to use\noptions - A hash of options matching those found in {DisplayBuffer::bufferPositionForScreenPosition} "
            }
          },
          "117": {
            "26": {
              "name": "getStartScreenPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  117,
                  26
                ],
                [
                  124,
                  1
                ]
              ],
              "doc": " Private: Retrieves the screen position of the marker's start. This will always be\nless than or equal to the result of {DisplayBufferMarker::getEndScreenPosition}.\n\nReturns a {Point}. "
            }
          },
          "124": {
            "26": {
              "name": "getStartBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  124,
                  26
                ],
                [
                  131,
                  1
                ]
              ],
              "doc": " Private: Retrieves the buffer position of the marker's start. This will always be\nless than or equal to the result of {DisplayBufferMarker::getEndBufferPosition}.\n\nReturns a {Point}. "
            }
          },
          "131": {
            "24": {
              "name": "getEndScreenPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  131,
                  24
                ],
                [
                  138,
                  1
                ]
              ],
              "doc": " Private: Retrieves the screen position of the marker's end. This will always be\ngreater than or equal to the result of {DisplayBufferMarker::getStartScreenPosition}.\n\nReturns a {Point}. "
            }
          },
          "138": {
            "24": {
              "name": "getEndBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  138,
                  24
                ],
                [
                  146,
                  1
                ]
              ],
              "doc": " Private: Retrieves the buffer position of the marker's end. This will always be\ngreater than or equal to the result of {DisplayBufferMarker::getStartBufferPosition}.\n\nReturns a {Point}. "
            }
          },
          "146": {
            "13": {
              "name": "plantTail",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  146,
                  13
                ],
                [
                  150,
                  1
                ]
              ],
              "doc": " Private: Sets the marker's tail to the same position as the marker's head.\n\nThis only works if there isn't already a tail position.\n\nReturns a {Point} representing the new tail position. "
            }
          },
          "150": {
            "13": {
              "name": "clearTail",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  150,
                  13
                ],
                [
                  153,
                  1
                ]
              ],
              "doc": "Private: Removes the tail from the marker. "
            }
          },
          "153": {
            "11": {
              "name": "hasTail",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  153,
                  11
                ],
                [
                  157,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "157": {
            "14": {
              "name": "isReversed",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  157,
                  14
                ],
                [
                  162,
                  1
                ]
              ],
              "doc": "Private: Returns whether the head precedes the tail in the buffer "
            }
          },
          "162": {
            "11": {
              "name": "isValid",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  162,
                  11
                ],
                [
                  169,
                  1
                ]
              ],
              "doc": " Private: Returns a {Boolean} indicating whether the marker is valid. Markers can be\ninvalidated when a region surrounding them in the buffer is changed. "
            }
          },
          "169": {
            "15": {
              "name": "isDestroyed",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  169,
                  15
                ],
                [
                  172,
                  1
                ]
              ],
              "doc": " Private: Returns a {Boolean} indicating whether the marker has been destroyed. A marker\ncan be invalid without being destroyed, in which case undoing the invalidating\noperation would restore the marker. Once a marker is destroyed by calling\n{Marker::destroy}, no undo/redo operation can ever bring it back. "
            }
          },
          "172": {
            "17": {
              "name": "getAttributes",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  172,
                  17
                ],
                [
                  175,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "175": {
            "17": {
              "name": "setAttributes",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "attributes"
              ],
              "range": [
                [
                  175,
                  17
                ],
                [
                  178,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "178": {
            "21": {
              "name": "matchesAttributes",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "attributes"
              ],
              "range": [
                [
                  178,
                  21
                ],
                [
                  183,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "183": {
            "11": {
              "name": "destroy",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  183,
                  11
                ],
                [
                  187,
                  1
                ]
              ],
              "doc": "Private: Destroys the marker "
            }
          },
          "187": {
            "11": {
              "name": "isEqual",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "other"
              ],
              "range": [
                [
                  187,
                  11
                ],
                [
                  191,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "191": {
            "11": {
              "name": "compare",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "other"
              ],
              "range": [
                [
                  191,
                  11
                ],
                [
                  195,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "195": {
            "11": {
              "name": "inspect",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  195,
                  11
                ],
                [
                  198,
                  1
                ]
              ],
              "doc": "Private: Returns a {String} representation of the marker "
            }
          },
          "198": {
            "13": {
              "name": "destroyed",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  198,
                  13
                ],
                [
                  202,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "202": {
            "19": {
              "name": "notifyObservers",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  202,
                  19
                ],
                [
                  230,
                  23
                ]
              ],
              "doc": "~Private~"
            }
          }
        },
        "exports": 5
      },
      "src/display-buffer.coffee": {
        "objects": {
          "0": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  0,
                  4
                ],
                [
                  0,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "1": {
            "1": {
              "type": "import",
              "range": [
                [
                  1,
                  1
                ],
                [
                  1,
                  7
                ]
              ],
              "bindingType": "variable",
              "module": "emissary@^1.2.2",
              "name": "Emitter",
              "exportsProperty": "Emitter"
            }
          },
          "2": {
            "7": {
              "name": "guid",
              "type": "import",
              "range": [
                [
                  2,
                  7
                ],
                [
                  2,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "guid@0.0.10"
            }
          },
          "3": {
            "15": {
              "name": "Serializable",
              "type": "import",
              "range": [
                [
                  3,
                  15
                ],
                [
                  3,
                  36
                ]
              ],
              "bindingType": "variable",
              "module": "serializable@^1"
            }
          },
          "4": {
            "1": {
              "type": "import",
              "range": [
                [
                  4,
                  1
                ],
                [
                  4,
                  5
                ]
              ],
              "bindingType": "variable",
              "module": "theorist@^1",
              "name": "Model",
              "exportsProperty": "Model"
            }
          },
          "5": {
            "1": {
              "type": "import",
              "range": [
                [
                  5,
                  1
                ],
                [
                  5,
                  5
                ]
              ],
              "bindingType": "variable",
              "module": "text-buffer@^3.0.0",
              "name": "Point",
              "exportsProperty": "Point"
            },
            "8": {
              "type": "import",
              "range": [
                [
                  5,
                  8
                ],
                [
                  5,
                  12
                ]
              ],
              "bindingType": "variable",
              "module": "text-buffer@^3.0.0",
              "name": "Range",
              "exportsProperty": "Range"
            }
          },
          "6": {
            "18": {
              "name": "TokenizedBuffer",
              "type": "import",
              "range": [
                [
                  6,
                  18
                ],
                [
                  6,
                  45
                ]
              ],
              "bindingType": "variable",
              "path": "./tokenized-buffer"
            }
          },
          "7": {
            "9": {
              "name": "RowMap",
              "type": "import",
              "range": [
                [
                  7,
                  9
                ],
                [
                  7,
                  27
                ]
              ],
              "bindingType": "variable",
              "path": "./row-map"
            }
          },
          "8": {
            "7": {
              "name": "Fold",
              "type": "import",
              "range": [
                [
                  8,
                  7
                ],
                [
                  8,
                  22
                ]
              ],
              "bindingType": "variable",
              "path": "./fold"
            }
          },
          "9": {
            "8": {
              "name": "Token",
              "type": "import",
              "range": [
                [
                  9,
                  8
                ],
                [
                  9,
                  24
                ]
              ],
              "bindingType": "variable",
              "path": "./token"
            }
          },
          "10": {
            "13": {
              "name": "Decoration",
              "type": "import",
              "range": [
                [
                  10,
                  13
                ],
                [
                  10,
                  34
                ]
              ],
              "bindingType": "variable",
              "path": "./decoration"
            }
          },
          "11": {
            "22": {
              "name": "DisplayBufferMarker",
              "type": "import",
              "range": [
                [
                  11,
                  22
                ],
                [
                  11,
                  54
                ]
              ],
              "bindingType": "variable",
              "path": "./display-buffer-marker"
            }
          },
          "13": {
            "0": {
              "type": "class",
              "name": "BufferToScreenConversionError",
              "superClass": "Error",
              "classProperties": [],
              "prototypeProperties": [
                [
                  14,
                  15
                ]
              ],
              "doc": "~Private~",
              "range": [
                [
                  13,
                  0
                ],
                [
                  17,
                  0
                ]
              ]
            }
          },
          "14": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null,
                null
              ],
              "range": [
                [
                  14,
                  15
                ],
                [
                  17,
                  0
                ]
              ]
            }
          },
          "19": {
            "0": {
              "type": "class",
              "name": "DisplayBuffer",
              "superClass": "Model",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  34,
                  24
                ],
                [
                  35,
                  26
                ],
                [
                  36,
                  29
                ],
                [
                  37,
                  26
                ],
                [
                  38,
                  36
                ],
                [
                  40,
                  15
                ],
                [
                  70,
                  19
                ],
                [
                  78,
                  21
                ],
                [
                  82,
                  8
                ],
                [
                  91,
                  24
                ],
                [
                  97,
                  15
                ],
                [
                  104,
                  28
                ],
                [
                  115,
                  14
                ],
                [
                  117,
                  27
                ],
                [
                  118,
                  27
                ],
                [
                  120,
                  29
                ],
                [
                  121,
                  29
                ],
                [
                  123,
                  32
                ],
                [
                  124,
                  32
                ],
                [
                  126,
                  29
                ],
                [
                  127,
                  29
                ],
                [
                  129,
                  13
                ],
                [
                  138,
                  13
                ],
                [
                  140,
                  19
                ],
                [
                  146,
                  18
                ],
                [
                  152,
                  26
                ],
                [
                  160,
                  24
                ],
                [
                  167,
                  12
                ],
                [
                  176,
                  12
                ],
                [
                  183,
                  16
                ],
                [
                  184,
                  16
                ],
                [
                  190,
                  19
                ],
                [
                  193,
                  19
                ],
                [
                  194,
                  19
                ],
                [
                  198,
                  17
                ],
                [
                  199,
                  17
                ],
                [
                  206,
                  20
                ],
                [
                  209,
                  18
                ],
                [
                  210,
                  18
                ],
                [
                  214,
                  25
                ],
                [
                  215,
                  25
                ],
                [
                  217,
                  23
                ],
                [
                  218,
                  23
                ],
                [
                  224,
                  18
                ],
                [
                  226,
                  22
                ],
                [
                  229,
                  23
                ],
                [
                  237,
                  29
                ],
                [
                  244,
                  22
                ],
                [
                  249,
                  26
                ],
                [
                  253,
                  25
                ],
                [
                  256,
                  19
                ],
                [
                  261,
                  18
                ],
                [
                  264,
                  22
                ],
                [
                  273,
                  29
                ],
                [
                  277,
                  38
                ],
                [
                  281,
                  23
                ],
                [
                  311,
                  26
                ],
                [
                  314,
                  26
                ],
                [
                  317,
                  27
                ],
                [
                  333,
                  16
                ],
                [
                  339,
                  16
                ],
                [
                  343,
                  15
                ],
                [
                  346,
                  15
                ],
                [
                  351,
                  25
                ],
                [
                  359,
                  25
                ],
                [
                  367,
                  21
                ],
                [
                  378,
                  14
                ],
                [
                  387,
                  16
                ],
                [
                  393,
                  12
                ],
                [
                  396,
                  22
                ],
                [
                  406,
                  27
                ],
                [
                  416,
                  14
                ],
                [
                  422,
                  23
                ],
                [
                  425,
                  23
                ],
                [
                  429,
                  21
                ],
                [
                  435,
                  19
                ],
                [
                  446,
                  34
                ],
                [
                  454,
                  28
                ],
                [
                  466,
                  34
                ],
                [
                  477,
                  34
                ],
                [
                  482,
                  34
                ],
                [
                  493,
                  28
                ],
                [
                  502,
                  25
                ],
                [
                  505,
                  29
                ],
                [
                  513,
                  25
                ],
                [
                  521,
                  29
                ],
                [
                  532,
                  29
                ],
                [
                  538,
                  28
                ],
                [
                  542,
                  34
                ],
                [
                  561,
                  34
                ],
                [
                  581,
                  34
                ],
                [
                  587,
                  16
                ],
                [
                  593,
                  14
                ],
                [
                  599,
                  20
                ],
                [
                  605,
                  23
                ],
                [
                  617,
                  35
                ],
                [
                  651,
                  35
                ],
                [
                  661,
                  27
                ],
                [
                  664,
                  33
                ],
                [
                  672,
                  26
                ],
                [
                  678,
                  14
                ],
                [
                  684,
                  14
                ],
                [
                  688,
                  17
                ],
                [
                  704,
                  22
                ],
                [
                  740,
                  18
                ],
                [
                  758,
                  20
                ],
                [
                  761,
                  19
                ],
                [
                  764,
                  32
                ],
                [
                  771,
                  18
                ],
                [
                  793,
                  20
                ],
                [
                  804,
                  33
                ],
                [
                  810,
                  31
                ],
                [
                  818,
                  21
                ],
                [
                  826,
                  13
                ],
                [
                  836,
                  14
                ],
                [
                  839,
                  18
                ],
                [
                  848,
                  19
                ],
                [
                  858,
                  19
                ],
                [
                  867,
                  22
                ],
                [
                  876,
                  22
                ],
                [
                  882,
                  17
                ],
                [
                  891,
                  14
                ],
                [
                  912,
                  15
                ],
                [
                  916,
                  33
                ],
                [
                  954,
                  18
                ],
                [
                  957,
                  19
                ],
                [
                  960,
                  27
                ],
                [
                  963,
                  24
                ],
                [
                  966,
                  25
                ],
                [
                  970,
                  32
                ],
                [
                  974,
                  13
                ],
                [
                  979,
                  12
                ],
                [
                  984,
                  31
                ],
                [
                  989,
                  21
                ],
                [
                  1015,
                  20
                ],
                [
                  1061,
                  21
                ],
                [
                  1083,
                  22
                ],
                [
                  1088,
                  30
                ],
                [
                  1093,
                  29
                ],
                [
                  1097,
                  23
                ],
                [
                  1101,
                  17
                ]
              ],
              "doc": "~Private~",
              "range": [
                [
                  19,
                  0
                ],
                [
                  1102,
                  31
                ]
              ]
            }
          },
          "34": {
            "24": {
              "name": "verticalScrollMargin",
              "type": "primitive",
              "range": [
                [
                  34,
                  24
                ],
                [
                  34,
                  24
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "35": {
            "26": {
              "name": "horizontalScrollMargin",
              "type": "primitive",
              "range": [
                [
                  35,
                  26
                ],
                [
                  35,
                  26
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "36": {
            "29": {
              "name": "horizontalScrollbarHeight",
              "type": "primitive",
              "range": [
                [
                  36,
                  29
                ],
                [
                  36,
                  30
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "37": {
            "26": {
              "name": "verticalScrollbarWidth",
              "type": "primitive",
              "range": [
                [
                  37,
                  26
                ],
                [
                  37,
                  27
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "38": {
            "36": {
              "name": "scopedCharacterWidthsChangeCount",
              "type": "primitive",
              "range": [
                [
                  38,
                  36
                ],
                [
                  38,
                  36
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "40": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  40,
                  15
                ],
                [
                  70,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "70": {
            "19": {
              "name": "serializeParams",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  70,
                  19
                ],
                [
                  78,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "78": {
            "21": {
              "name": "deserializeParams",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "params"
              ],
              "range": [
                [
                  78,
                  21
                ],
                [
                  82,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "82": {
            "8": {
              "name": "copy",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  82,
                  8
                ],
                [
                  91,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "91": {
            "24": {
              "name": "updateAllScreenLines",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  91,
                  24
                ],
                [
                  97,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "97": {
            "15": {
              "name": "emitChanged",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "eventProperties",
                "refreshMarkers"
              ],
              "range": [
                [
                  97,
                  15
                ],
                [
                  104,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "104": {
            "28": {
              "name": "updateWrappedScreenLines",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  104,
                  28
                ],
                [
                  115,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "115": {
            "14": {
              "name": "setVisible",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "visible"
              ],
              "range": [
                [
                  115,
                  14
                ],
                [
                  115,
                  62
                ]
              ],
              "doc": " Private: Sets the visibility of the tokenized buffer.\n\nvisible - A {Boolean} indicating of the tokenized buffer is shown "
            }
          },
          "117": {
            "27": {
              "name": "getVerticalScrollMargin",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  117,
                  27
                ],
                [
                  117,
                  50
                ]
              ],
              "doc": "~Private~"
            }
          },
          "118": {
            "27": {
              "name": "setVerticalScrollMargin",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  118,
                  27
                ],
                [
                  118,
                  74
                ]
              ]
            }
          },
          "120": {
            "29": {
              "name": "getHorizontalScrollMargin",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  120,
                  29
                ],
                [
                  120,
                  54
                ]
              ],
              "doc": "~Private~"
            }
          },
          "121": {
            "29": {
              "name": "setHorizontalScrollMargin",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  121,
                  29
                ],
                [
                  121,
                  80
                ]
              ]
            }
          },
          "123": {
            "32": {
              "name": "getHorizontalScrollbarHeight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  123,
                  32
                ],
                [
                  123,
                  60
                ]
              ],
              "doc": "~Private~"
            }
          },
          "124": {
            "32": {
              "name": "setHorizontalScrollbarHeight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  124,
                  32
                ],
                [
                  124,
                  89
                ]
              ]
            }
          },
          "126": {
            "29": {
              "name": "getVerticalScrollbarWidth",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  126,
                  29
                ],
                [
                  126,
                  54
                ]
              ],
              "doc": "~Private~"
            }
          },
          "127": {
            "29": {
              "name": "setVerticalScrollbarWidth",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  127,
                  29
                ],
                [
                  127,
                  80
                ]
              ]
            }
          },
          "129": {
            "13": {
              "name": "getHeight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  129,
                  13
                ],
                [
                  138,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "138": {
            "13": {
              "name": "setHeight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  138,
                  13
                ],
                [
                  138,
                  32
                ]
              ],
              "doc": "~Private~"
            }
          },
          "140": {
            "19": {
              "name": "getClientHeight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "reentrant"
              ],
              "range": [
                [
                  140,
                  19
                ],
                [
                  146,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "146": {
            "18": {
              "name": "getClientWidth",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "reentrant"
              ],
              "range": [
                [
                  146,
                  18
                ],
                [
                  152,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "152": {
            "26": {
              "name": "horizontallyScrollable",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "reentrant"
              ],
              "range": [
                [
                  152,
                  26
                ],
                [
                  160,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "160": {
            "24": {
              "name": "verticallyScrollable",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "reentrant"
              ],
              "range": [
                [
                  160,
                  24
                ],
                [
                  167,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "167": {
            "12": {
              "name": "getWidth",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  167,
                  12
                ],
                [
                  176,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "176": {
            "12": {
              "name": "setWidth",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "newWidth"
              ],
              "range": [
                [
                  176,
                  12
                ],
                [
                  183,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "183": {
            "16": {
              "name": "getScrollTop",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  183,
                  16
                ],
                [
                  183,
                  28
                ]
              ],
              "doc": "~Private~"
            }
          },
          "184": {
            "16": {
              "name": "setScrollTop",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scrollTop"
              ],
              "range": [
                [
                  184,
                  16
                ],
                [
                  190,
                  1
                ]
              ]
            }
          },
          "190": {
            "19": {
              "name": "getMaxScrollTop",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  190,
                  19
                ],
                [
                  193,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "193": {
            "19": {
              "name": "getScrollBottom",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  193,
                  19
                ],
                [
                  193,
                  41
                ]
              ],
              "doc": "~Private~"
            }
          },
          "194": {
            "19": {
              "name": "setScrollBottom",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scrollBottom"
              ],
              "range": [
                [
                  194,
                  19
                ],
                [
                  198,
                  1
                ]
              ]
            }
          },
          "198": {
            "17": {
              "name": "getScrollLeft",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  198,
                  17
                ],
                [
                  198,
                  30
                ]
              ],
              "doc": "~Private~"
            }
          },
          "199": {
            "17": {
              "name": "setScrollLeft",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scrollLeft"
              ],
              "range": [
                [
                  199,
                  17
                ],
                [
                  206,
                  1
                ]
              ]
            }
          },
          "206": {
            "20": {
              "name": "getMaxScrollLeft",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  206,
                  20
                ],
                [
                  209,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "209": {
            "18": {
              "name": "getScrollRight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  209,
                  18
                ],
                [
                  209,
                  40
                ]
              ],
              "doc": "~Private~"
            }
          },
          "210": {
            "18": {
              "name": "setScrollRight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scrollRight"
              ],
              "range": [
                [
                  210,
                  18
                ],
                [
                  214,
                  1
                ]
              ]
            }
          },
          "214": {
            "25": {
              "name": "getLineHeightInPixels",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  214,
                  25
                ],
                [
                  214,
                  46
                ]
              ],
              "doc": "~Private~"
            }
          },
          "215": {
            "25": {
              "name": "setLineHeightInPixels",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  215,
                  25
                ],
                [
                  215,
                  68
                ]
              ]
            }
          },
          "217": {
            "23": {
              "name": "getDefaultCharWidth",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  217,
                  23
                ],
                [
                  217,
                  42
                ]
              ],
              "doc": "~Private~"
            }
          },
          "218": {
            "23": {
              "name": "setDefaultCharWidth",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "defaultCharWidth"
              ],
              "range": [
                [
                  218,
                  23
                ],
                [
                  224,
                  1
                ]
              ]
            }
          },
          "224": {
            "18": {
              "name": "getCursorWidth",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  224,
                  18
                ],
                [
                  224,
                  21
                ]
              ],
              "doc": "~Private~"
            }
          },
          "226": {
            "22": {
              "name": "getScopedCharWidth",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scopeNames",
                "char"
              ],
              "range": [
                [
                  226,
                  22
                ],
                [
                  229,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "229": {
            "23": {
              "name": "getScopedCharWidths",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scopeNames"
              ],
              "range": [
                [
                  229,
                  23
                ],
                [
                  237,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "237": {
            "29": {
              "name": "batchCharacterMeasurement",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "fn"
              ],
              "range": [
                [
                  237,
                  29
                ],
                [
                  244,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "244": {
            "22": {
              "name": "setScopedCharWidth",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scopeNames",
                "char",
                "width"
              ],
              "range": [
                [
                  244,
                  22
                ],
                [
                  249,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "249": {
            "26": {
              "name": "characterWidthsChanged",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  249,
                  26
                ],
                [
                  253,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "253": {
            "25": {
              "name": "clearScopedCharWidths",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  253,
                  25
                ],
                [
                  256,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "256": {
            "19": {
              "name": "getScrollHeight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  256,
                  19
                ],
                [
                  261,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "261": {
            "18": {
              "name": "getScrollWidth",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  261,
                  18
                ],
                [
                  264,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "264": {
            "22": {
              "name": "getVisibleRowRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  264,
                  22
                ],
                [
                  273,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "273": {
            "29": {
              "name": "intersectsVisibleRowRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "startRow",
                "endRow"
              ],
              "range": [
                [
                  273,
                  29
                ],
                [
                  277,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "277": {
            "38": {
              "name": "selectionIntersectsVisibleRowRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "selection"
              ],
              "range": [
                [
                  277,
                  38
                ],
                [
                  281,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "281": {
            "23": {
              "name": "scrollToScreenRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenRange",
                "options"
              ],
              "range": [
                [
                  281,
                  23
                ],
                [
                  311,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "311": {
            "26": {
              "name": "scrollToScreenPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenPosition",
                "options"
              ],
              "range": [
                [
                  311,
                  26
                ],
                [
                  314,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "314": {
            "26": {
              "name": "scrollToBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferPosition",
                "options"
              ],
              "range": [
                [
                  314,
                  26
                ],
                [
                  317,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "317": {
            "27": {
              "name": "pixelRectForScreenRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenRange"
              ],
              "range": [
                [
                  317,
                  27
                ],
                [
                  333,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "333": {
            "16": {
              "name": "getTabLength",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  333,
                  16
                ],
                [
                  339,
                  1
                ]
              ],
              "doc": " Private: Retrieves the current tab length.\n\nReturns a {Number}. "
            }
          },
          "339": {
            "16": {
              "name": "setTabLength",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "tabLength"
              ],
              "range": [
                [
                  339,
                  16
                ],
                [
                  343,
                  1
                ]
              ],
              "doc": " Private: Specifies the tab length.\n\ntabLength - A {Number} that defines the new tab length. "
            }
          },
          "343": {
            "15": {
              "name": "setSoftWrap",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  343,
                  15
                ],
                [
                  343,
                  38
                ]
              ],
              "doc": "Deprecated: Use the softWrap property directly "
            }
          },
          "346": {
            "15": {
              "name": "getSoftWrap",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  346,
                  15
                ],
                [
                  346,
                  26
                ]
              ],
              "doc": "Deprecated: Use the softWrap property directly "
            }
          },
          "351": {
            "25": {
              "name": "setEditorWidthInChars",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "editorWidthInChars"
              ],
              "range": [
                [
                  351,
                  25
                ],
                [
                  359,
                  1
                ]
              ],
              "doc": " Private: Set the number of characters that fit horizontally in the editor.\n\neditorWidthInChars - A {Number} of characters. "
            }
          },
          "359": {
            "25": {
              "name": "getEditorWidthInChars",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  359,
                  25
                ],
                [
                  367,
                  1
                ]
              ],
              "doc": "Private: Returns the editor width in characters for soft wrap. "
            }
          },
          "367": {
            "21": {
              "name": "getSoftWrapColumn",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  367,
                  21
                ],
                [
                  378,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "378": {
            "14": {
              "name": "lineForRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "row"
              ],
              "range": [
                [
                  378,
                  14
                ],
                [
                  387,
                  1
                ]
              ],
              "doc": " Private: Gets the screen line for the given screen row.\n\nscreenRow - A {Number} indicating the screen row.\n\nReturns a {ScreenLine}. "
            }
          },
          "387": {
            "16": {
              "name": "linesForRows",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "startRow",
                "endRow"
              ],
              "range": [
                [
                  387,
                  16
                ],
                [
                  393,
                  1
                ]
              ],
              "doc": " Private: Gets the screen lines for the given screen row range.\n\nstartRow - A {Number} indicating the beginning screen row.\nendRow - A {Number} indicating the ending screen row.\n\nReturns an {Array} of {ScreenLine}s. "
            }
          },
          "393": {
            "12": {
              "name": "getLines",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  393,
                  12
                ],
                [
                  396,
                  1
                ]
              ],
              "doc": " Private: Gets all the screen lines.\n\nReturns an {Array} of {ScreenLines}s. "
            }
          },
          "396": {
            "22": {
              "name": "indentLevelForLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "line"
              ],
              "range": [
                [
                  396,
                  22
                ],
                [
                  406,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "406": {
            "27": {
              "name": "bufferRowsForScreenRows",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "startScreenRow",
                "endScreenRow"
              ],
              "range": [
                [
                  406,
                  27
                ],
                [
                  416,
                  1
                ]
              ],
              "doc": " Private: Given starting and ending screen rows, this returns an array of the\nbuffer rows corresponding to every screen row in the range\n\nstartScreenRow - The screen row {Number} to start at\nendScreenRow - The screen row {Number} to end at (default: the last screen row)\n\nReturns an {Array} of buffer rows as {Numbers}s. "
            }
          },
          "416": {
            "14": {
              "name": "createFold",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "startRow",
                "endRow"
              ],
              "range": [
                [
                  416,
                  14
                ],
                [
                  422,
                  1
                ]
              ],
              "doc": " Private: Creates a new fold between two row numbers.\n\nstartRow - The row {Number} to start folding at\nendRow - The row {Number} to end the fold\n\nReturns the new {Fold}. "
            }
          },
          "422": {
            "23": {
              "name": "isFoldedAtBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRow"
              ],
              "range": [
                [
                  422,
                  23
                ],
                [
                  425,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "425": {
            "23": {
              "name": "isFoldedAtScreenRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenRow"
              ],
              "range": [
                [
                  425,
                  23
                ],
                [
                  429,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "429": {
            "21": {
              "name": "destroyFoldWithId",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "id"
              ],
              "range": [
                [
                  429,
                  21
                ],
                [
                  435,
                  1
                ]
              ],
              "doc": "Private: Destroys the fold with the given id "
            }
          },
          "435": {
            "19": {
              "name": "unfoldBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRow"
              ],
              "range": [
                [
                  435,
                  19
                ],
                [
                  446,
                  1
                ]
              ],
              "doc": " Private: Removes any folds found that contain the given buffer row.\n\nbufferRow - The buffer row {Number} to check against "
            }
          },
          "446": {
            "34": {
              "name": "largestFoldStartingAtBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRow"
              ],
              "range": [
                [
                  446,
                  34
                ],
                [
                  454,
                  1
                ]
              ],
              "doc": " Private: Given a buffer row, this returns the largest fold that starts there.\n\nLargest is defined as the fold whose difference between its start and end points\nare the greatest.\n\nbufferRow - A {Number} indicating the buffer row\n\nReturns a {Fold} or null if none exists. "
            }
          },
          "454": {
            "28": {
              "name": "foldsStartingAtBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRow"
              ],
              "range": [
                [
                  454,
                  28
                ],
                [
                  466,
                  1
                ]
              ],
              "doc": " Public: Given a buffer row, this returns all folds that start there.\n\nbufferRow - A {Number} indicating the buffer row\n\nReturns an {Array} of {Fold}s. "
            }
          },
          "466": {
            "34": {
              "name": "largestFoldStartingAtScreenRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenRow"
              ],
              "range": [
                [
                  466,
                  34
                ],
                [
                  477,
                  1
                ]
              ],
              "doc": " Private: Given a screen row, this returns the largest fold that starts there.\n\nLargest is defined as the fold whose difference between its start and end points\nare the greatest.\n\nscreenRow - A {Number} indicating the screen row\n\nReturns a {Fold}. "
            }
          },
          "477": {
            "34": {
              "name": "largestFoldContainingBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRow"
              ],
              "range": [
                [
                  477,
                  34
                ],
                [
                  482,
                  1
                ]
              ],
              "doc": " Private: Given a buffer row, this returns the largest fold that includes it.\n\nLargest is defined as the fold whose difference between its start and end rows\nis the greatest.\n\nbufferRow - A {Number} indicating the buffer row\n\nReturns a {Fold}. "
            }
          },
          "482": {
            "34": {
              "name": "outermostFoldsInBufferRowRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "startRow",
                "endRow"
              ],
              "range": [
                [
                  482,
                  34
                ],
                [
                  493,
                  1
                ]
              ],
              "doc": " Private: Returns the folds in the given row range (exclusive of end row) that are\nnot contained by any other folds. "
            }
          },
          "493": {
            "28": {
              "name": "foldsContainingBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRow"
              ],
              "range": [
                [
                  493,
                  28
                ],
                [
                  502,
                  1
                ]
              ],
              "doc": " Public: Given a buffer row, this returns folds that include it.\n\n\nbufferRow - A {Number} indicating the buffer row\n\nReturns an {Array} of {Fold}s. "
            }
          },
          "502": {
            "25": {
              "name": "screenRowForBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRow"
              ],
              "range": [
                [
                  502,
                  25
                ],
                [
                  505,
                  1
                ]
              ],
              "doc": " Private: Given a buffer row, this converts it into a screen row.\n\nbufferRow - A {Number} representing a buffer row\n\nReturns a {Number}. "
            }
          },
          "505": {
            "29": {
              "name": "lastScreenRowForBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRow"
              ],
              "range": [
                [
                  505,
                  29
                ],
                [
                  513,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "513": {
            "25": {
              "name": "bufferRowForScreenRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenRow"
              ],
              "range": [
                [
                  513,
                  25
                ],
                [
                  521,
                  1
                ]
              ],
              "doc": " Private: Given a screen row, this converts it into a buffer row.\n\nscreenRow - A {Number} representing a screen row\n\nReturns a {Number}. "
            }
          },
          "521": {
            "29": {
              "name": "screenRangeForBufferRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRange"
              ],
              "range": [
                [
                  521,
                  29
                ],
                [
                  532,
                  1
                ]
              ],
              "doc": " Private: Given a buffer range, this converts it into a screen position.\n\nbufferRange - The {Range} to convert\n\nReturns a {Range}. "
            }
          },
          "532": {
            "29": {
              "name": "bufferRangeForScreenRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenRange"
              ],
              "range": [
                [
                  532,
                  29
                ],
                [
                  538,
                  1
                ]
              ],
              "doc": " Private: Given a screen range, this converts it into a buffer position.\n\nscreenRange - The {Range} to convert\n\nReturns a {Range}. "
            }
          },
          "538": {
            "28": {
              "name": "pixelRangeForScreenRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenRange",
                "clip"
              ],
              "range": [
                [
                  538,
                  28
                ],
                [
                  542,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "542": {
            "34": {
              "name": "pixelPositionForScreenPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenPosition",
                "clip"
              ],
              "range": [
                [
                  542,
                  34
                ],
                [
                  561,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "561": {
            "34": {
              "name": "screenPositionForPixelPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "pixelPosition"
              ],
              "range": [
                [
                  561,
                  34
                ],
                [
                  581,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "581": {
            "34": {
              "name": "pixelPositionForBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferPosition"
              ],
              "range": [
                [
                  581,
                  34
                ],
                [
                  587,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "587": {
            "16": {
              "name": "getLineCount",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  587,
                  16
                ],
                [
                  593,
                  1
                ]
              ],
              "doc": " Private: Gets the number of screen lines.\n\nReturns a {Number}. "
            }
          },
          "593": {
            "14": {
              "name": "getLastRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  593,
                  14
                ],
                [
                  599,
                  1
                ]
              ],
              "doc": " Private: Gets the number of the last screen line.\n\nReturns a {Number}. "
            }
          },
          "599": {
            "20": {
              "name": "getMaxLineLength",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  599,
                  20
                ],
                [
                  605,
                  1
                ]
              ],
              "doc": " Private: Gets the length of the longest screen line.\n\nReturns a {Number}. "
            }
          },
          "605": {
            "23": {
              "name": "getLongestScreenRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  605,
                  23
                ],
                [
                  617,
                  1
                ]
              ],
              "doc": " Private: Gets the row number of the longest screen line.\n\nReturn a {} "
            }
          },
          "617": {
            "35": {
              "name": "screenPositionForBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferPosition",
                "options"
              ],
              "range": [
                [
                  617,
                  35
                ],
                [
                  651,
                  1
                ]
              ],
              "doc": " Private: Given a buffer position, this converts it into a screen position.\n\nbufferPosition - An object that represents a buffer position. It can be either\n                 an {Object} (`{row, column}`), {Array} (`[row, column]`), or {Point}\noptions - A hash of options with the following keys:\n          wrapBeyondNewlines:\n          wrapAtSoftNewlines:\n\nReturns a {Point}. "
            }
          },
          "651": {
            "35": {
              "name": "bufferPositionForScreenPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenPosition",
                "options"
              ],
              "range": [
                [
                  651,
                  35
                ],
                [
                  661,
                  1
                ]
              ],
              "doc": " Private: Given a buffer position, this converts it into a screen position.\n\nscreenPosition - An object that represents a buffer position. It can be either\n                 an {Object} (`{row, column}`), {Array} (`[row, column]`), or {Point}\noptions - A hash of options with the following keys:\n          wrapBeyondNewlines:\n          wrapAtSoftNewlines:\n\nReturns a {Point}. "
            }
          },
          "661": {
            "27": {
              "name": "scopesForBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferPosition"
              ],
              "range": [
                [
                  661,
                  27
                ],
                [
                  664,
                  1
                ]
              ],
              "doc": " Private: Retrieves the grammar's token scopes for a buffer position.\n\nbufferPosition - A {Point} in the {TextBuffer}\n\nReturns an {Array} of {String}s. "
            }
          },
          "664": {
            "33": {
              "name": "bufferRangeForScopeAtPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "selector",
                "position"
              ],
              "range": [
                [
                  664,
                  33
                ],
                [
                  672,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "672": {
            "26": {
              "name": "tokenForBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferPosition"
              ],
              "range": [
                [
                  672,
                  26
                ],
                [
                  678,
                  1
                ]
              ],
              "doc": " Private: Retrieves the grammar's token for a buffer position.\n\nbufferPosition - A {Point} in the {TextBuffer}.\n\nReturns a {Token}. "
            }
          },
          "678": {
            "14": {
              "name": "getGrammar",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  678,
                  14
                ],
                [
                  684,
                  1
                ]
              ],
              "doc": " Private: Get the grammar for this buffer.\n\nReturns the current {Grammar} or the {NullGrammar}. "
            }
          },
          "684": {
            "14": {
              "name": "setGrammar",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "grammar"
              ],
              "range": [
                [
                  684,
                  14
                ],
                [
                  688,
                  1
                ]
              ],
              "doc": " Private: Sets the grammar for the buffer.\n\ngrammar - Sets the new grammar rules "
            }
          },
          "688": {
            "17": {
              "name": "reloadGrammar",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  688,
                  17
                ],
                [
                  704,
                  1
                ]
              ],
              "doc": "Private: Reloads the current grammar. "
            }
          },
          "704": {
            "22": {
              "name": "clipScreenPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenPosition",
                "options"
              ],
              "range": [
                [
                  704,
                  22
                ],
                [
                  740,
                  1
                ]
              ],
              "doc": " Private: Given a position, this clips it to a real position.\n\nFor example, if `position`'s row exceeds the row count of the buffer,\nor if its column goes beyond a line's length, this \"sanitizes\" the value\nto a real position.\n\nposition - The {Point} to clip\noptions - A hash with the following values:\n          wrapBeyondNewlines: if `true`, continues wrapping past newlines\n          wrapAtSoftNewlines: if `true`, continues wrapping past soft newlines\n          screenLine: if `true`, indicates that you're using a line number, not a row number\n\nReturns the new, clipped {Point}. Note that this could be the same as `position` if no clipping was performed. "
            }
          },
          "740": {
            "18": {
              "name": "findWrapColumn",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "line",
                "softWrapColumn"
              ],
              "range": [
                [
                  740,
                  18
                ],
                [
                  758,
                  1
                ]
              ],
              "doc": " Private: Given a line, finds the point where it would wrap.\n\nline - The {String} to check\nsoftWrapColumn - The {Number} where you want soft wrapping to occur\n\nReturns a {Number} representing the `line` position where the wrap would take place.\nReturns `null` if a wrap wouldn't occur. "
            }
          },
          "758": {
            "20": {
              "name": "rangeForAllLines",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  758,
                  20
                ],
                [
                  761,
                  1
                ]
              ],
              "doc": " Private: Calculates a {Range} representing the start of the {TextBuffer} until the end.\n\nReturns a {Range}. "
            }
          },
          "761": {
            "19": {
              "name": "decorationForId",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "id"
              ],
              "range": [
                [
                  761,
                  19
                ],
                [
                  764,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "764": {
            "32": {
              "name": "decorationsForScreenRowRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "startScreenRow",
                "endScreenRow"
              ],
              "range": [
                [
                  764,
                  32
                ],
                [
                  771,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "771": {
            "18": {
              "name": "decorateMarker",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "marker",
                "decorationParams"
              ],
              "range": [
                [
                  771,
                  18
                ],
                [
                  793,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "793": {
            "20": {
              "name": "removeDecoration",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "decoration"
              ],
              "range": [
                [
                  793,
                  20
                ],
                [
                  804,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "804": {
            "33": {
              "name": "removeAllDecorationsForMarker",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "marker"
              ],
              "range": [
                [
                  804,
                  33
                ],
                [
                  810,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "810": {
            "31": {
              "name": "removedAllMarkerDecorations",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "marker"
              ],
              "range": [
                [
                  810,
                  31
                ],
                [
                  818,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "818": {
            "21": {
              "name": "decorationUpdated",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "decoration"
              ],
              "range": [
                [
                  818,
                  21
                ],
                [
                  826,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "826": {
            "13": {
              "name": "getMarker",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "id"
              ],
              "range": [
                [
                  826,
                  13
                ],
                [
                  836,
                  1
                ]
              ],
              "doc": " Private: Retrieves a {DisplayBufferMarker} based on its id.\n\nid - A {Number} representing a marker id\n\nReturns the {DisplayBufferMarker} (if it exists). "
            }
          },
          "836": {
            "14": {
              "name": "getMarkers",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  836,
                  14
                ],
                [
                  839,
                  1
                ]
              ],
              "doc": " Private: Retrieves the active markers in the buffer.\n\nReturns an {Array} of existing {DisplayBufferMarker}s. "
            }
          },
          "839": {
            "18": {
              "name": "getMarkerCount",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  839,
                  18
                ],
                [
                  848,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "848": {
            "19": {
              "name": "markScreenRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "args"
              ],
              "range": [
                [
                  848,
                  19
                ],
                [
                  858,
                  1
                ]
              ],
              "doc": " Public: Constructs a new marker at the given screen range.\n\nrange - The marker {Range} (representing the distance between the head and tail)\noptions - Options to pass to the {Marker} constructor\n\nReturns a {Number} representing the new marker's ID. "
            }
          },
          "858": {
            "19": {
              "name": "markBufferRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "range",
                "options"
              ],
              "range": [
                [
                  858,
                  19
                ],
                [
                  867,
                  1
                ]
              ],
              "doc": " Public: Constructs a new marker at the given buffer range.\n\nrange - The marker {Range} (representing the distance between the head and tail)\noptions - Options to pass to the {Marker} constructor\n\nReturns a {Number} representing the new marker's ID. "
            }
          },
          "867": {
            "22": {
              "name": "markScreenPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenPosition",
                "options"
              ],
              "range": [
                [
                  867,
                  22
                ],
                [
                  876,
                  1
                ]
              ],
              "doc": " Public: Constructs a new marker at the given screen position.\n\nrange - The marker {Range} (representing the distance between the head and tail)\noptions - Options to pass to the {Marker} constructor\n\nReturns a {Number} representing the new marker's ID. "
            }
          },
          "876": {
            "22": {
              "name": "markBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferPosition",
                "options"
              ],
              "range": [
                [
                  876,
                  22
                ],
                [
                  882,
                  1
                ]
              ],
              "doc": " Public: Constructs a new marker at the given buffer position.\n\nrange - The marker {Range} (representing the distance between the head and tail)\noptions - Options to pass to the {Marker} constructor\n\nReturns a {Number} representing the new marker's ID. "
            }
          },
          "882": {
            "17": {
              "name": "destroyMarker",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "id"
              ],
              "range": [
                [
                  882,
                  17
                ],
                [
                  891,
                  1
                ]
              ],
              "doc": " Public: Removes the marker with the given id.\n\nid - The {Number} of the ID to remove "
            }
          },
          "891": {
            "14": {
              "name": "findMarker",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "params"
              ],
              "range": [
                [
                  891,
                  14
                ],
                [
                  912,
                  1
                ]
              ],
              "doc": " Private: Finds the first marker satisfying the given attributes\n\nRefer to {DisplayBuffer::findMarkers} for details.\n\nReturns a {DisplayBufferMarker} or null "
            }
          },
          "912": {
            "15": {
              "name": "findMarkers",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "params"
              ],
              "range": [
                [
                  912,
                  15
                ],
                [
                  916,
                  1
                ]
              ],
              "doc": " Public: Find all markers satisfying a set of parameters.\n\nparams - An {Object} containing parameters that all returned markers must\n  satisfy. Unreserved keys will be compared against the markers' custom\n  properties. There are also the following reserved keys with special\n  meaning for the query:\n  :startBufferRow - A {Number}. Only returns markers starting at this row in\n    buffer coordinates.\n  :endBufferRow - A {Number}. Only returns markers ending at this row in\n    buffer coordinates.\n  :containsBufferRange - A {Range} or range-compatible {Array}. Only returns\n    markers containing this range in buffer coordinates.\n  :containsBufferPosition - A {Point} or point-compatible {Array}. Only\n    returns markers containing this position in buffer coordinates.\n  :containedInBufferRange - A {Range} or range-compatible {Array}. Only\n    returns markers contained within this range.\n\nReturns an {Array} of {DisplayBufferMarker}s "
            }
          },
          "916": {
            "33": {
              "name": "translateToBufferMarkerParams",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "params"
              ],
              "range": [
                [
                  916,
                  33
                ],
                [
                  954,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "954": {
            "18": {
              "name": "findFoldMarker",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "attributes"
              ],
              "range": [
                [
                  954,
                  18
                ],
                [
                  957,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "957": {
            "19": {
              "name": "findFoldMarkers",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "attributes"
              ],
              "range": [
                [
                  957,
                  19
                ],
                [
                  960,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "960": {
            "27": {
              "name": "getFoldMarkerAttributes",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "attributes"
              ],
              "range": [
                [
                  960,
                  27
                ],
                [
                  963,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "963": {
            "24": {
              "name": "pauseMarkerObservers",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  963,
                  24
                ],
                [
                  966,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "966": {
            "25": {
              "name": "resumeMarkerObservers",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  966,
                  25
                ],
                [
                  970,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "970": {
            "32": {
              "name": "refreshMarkerScreenPositions",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  970,
                  32
                ],
                [
                  974,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "974": {
            "13": {
              "name": "destroyed",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  974,
                  13
                ],
                [
                  979,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "979": {
            "12": {
              "name": "logLines",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "start",
                "end"
              ],
              "range": [
                [
                  979,
                  12
                ],
                [
                  984,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "984": {
            "31": {
              "name": "handleTokenizedBufferChange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "tokenizedBufferChange"
              ],
              "range": [
                [
                  984,
                  31
                ],
                [
                  989,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "989": {
            "21": {
              "name": "updateScreenLines",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "startBufferRow",
                "endBufferRow",
                "bufferDelta",
                "options"
              ],
              "range": [
                [
                  989,
                  21
                ],
                [
                  1015,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1015": {
            "20": {
              "name": "buildScreenLines",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "startBufferRow",
                "endBufferRow"
              ],
              "range": [
                [
                  1015,
                  20
                ],
                [
                  1061,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1061": {
            "21": {
              "name": "findMaxLineLength",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "startScreenRow",
                "endScreenRow",
                "newScreenLines",
                "screenDelta"
              ],
              "range": [
                [
                  1061,
                  21
                ],
                [
                  1083,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1083": {
            "22": {
              "name": "computeScrollWidth",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1083,
                  22
                ],
                [
                  1088,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1088": {
            "30": {
              "name": "handleBufferMarkersUpdated",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1088,
                  30
                ],
                [
                  1093,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1093": {
            "29": {
              "name": "handleBufferMarkerCreated",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "marker"
              ],
              "range": [
                [
                  1093,
                  29
                ],
                [
                  1097,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1097": {
            "23": {
              "name": "createFoldForMarker",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "marker"
              ],
              "range": [
                [
                  1097,
                  23
                ],
                [
                  1101,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1101": {
            "17": {
              "name": "foldForMarker",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "marker"
              ],
              "range": [
                [
                  1101,
                  17
                ],
                [
                  1102,
                  31
                ]
              ],
              "doc": "~Private~"
            }
          }
        },
        "exports": 19
      },
      "src/editor-view.coffee": {
        "objects": {
          "0": {
            "1": {
              "type": "import",
              "range": [
                [
                  0,
                  1
                ],
                [
                  0,
                  4
                ]
              ],
              "bindingType": "variable",
              "path": "./space-pen-extensions",
              "name": "View",
              "exportsProperty": "View"
            },
            "7": {
              "type": "import",
              "range": [
                [
                  0,
                  7
                ],
                [
                  0,
                  7
                ]
              ],
              "bindingType": "variable",
              "path": "./space-pen-extensions",
              "name": "$",
              "exportsProperty": "$"
            },
            "10": {
              "type": "import",
              "range": [
                [
                  0,
                  10
                ],
                [
                  0,
                  12
                ]
              ],
              "bindingType": "variable",
              "path": "./space-pen-extensions",
              "name": "$$$",
              "exportsProperty": "$$$"
            }
          },
          "1": {
            "13": {
              "name": "GutterView",
              "type": "import",
              "range": [
                [
                  1,
                  13
                ],
                [
                  1,
                  35
                ]
              ],
              "bindingType": "variable",
              "path": "./gutter-view"
            }
          },
          "2": {
            "1": {
              "type": "import",
              "range": [
                [
                  2,
                  1
                ],
                [
                  2,
                  5
                ]
              ],
              "bindingType": "variable",
              "module": "text-buffer@^3.0.0",
              "name": "Point",
              "exportsProperty": "Point"
            },
            "8": {
              "type": "import",
              "range": [
                [
                  2,
                  8
                ],
                [
                  2,
                  12
                ]
              ],
              "bindingType": "variable",
              "module": "text-buffer@^3.0.0",
              "name": "Range",
              "exportsProperty": "Range"
            }
          },
          "3": {
            "9": {
              "name": "Editor",
              "type": "import",
              "range": [
                [
                  3,
                  9
                ],
                [
                  3,
                  26
                ]
              ],
              "bindingType": "variable",
              "path": "./editor"
            }
          },
          "4": {
            "13": {
              "name": "CursorView",
              "type": "import",
              "range": [
                [
                  4,
                  13
                ],
                [
                  4,
                  35
                ]
              ],
              "bindingType": "variable",
              "path": "./cursor-view"
            }
          },
          "5": {
            "16": {
              "name": "SelectionView",
              "type": "import",
              "range": [
                [
                  5,
                  16
                ],
                [
                  5,
                  41
                ]
              ],
              "bindingType": "variable",
              "path": "./selection-view"
            }
          },
          "6": {
            "5": {
              "name": "fs",
              "type": "import",
              "range": [
                [
                  6,
                  5
                ],
                [
                  6,
                  21
                ]
              ],
              "bindingType": "variable",
              "module": "fs-plus@^2.2.6"
            }
          },
          "7": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  7,
                  4
                ],
                [
                  7,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "8": {
            "13": {
              "name": "TextBuffer",
              "type": "import",
              "range": [
                [
                  8,
                  13
                ],
                [
                  8,
                  33
                ]
              ],
              "bindingType": "variable",
              "module": "text-buffer@^3.0.0"
            }
          },
          "10": {
            "15": {
              "name": "MeasureRange",
              "type": "function",
              "range": [
                [
                  10,
                  15
                ],
                [
                  10,
                  36
                ]
              ]
            }
          },
          "11": {
            "17": {
              "type": "primitive",
              "range": [
                [
                  11,
                  17
                ],
                [
                  11,
                  59
                ]
              ]
            },
            "31": {
              "name": "acceptNode",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  11,
                  31
                ],
                [
                  11,
                  57
                ]
              ],
              "doc": null
            }
          },
          "12": {
            "10": {
              "type": "primitive",
              "range": [
                [
                  12,
                  10
                ],
                [
                  12,
                  21
                ]
              ]
            }
          },
          "13": {
            "17": {
              "name": "1000",
              "type": "primitive",
              "range": [
                [
                  13,
                  17
                ],
                [
                  13,
                  20
                ]
              ]
            }
          },
          "41": {
            "0": {
              "type": "class",
              "name": "EditorView",
              "superClass": "View",
              "bindingType": "exports",
              "classProperties": [
                [
                  42,
                  24
                ],
                [
                  44,
                  4
                ],
                [
                  61,
                  17
                ],
                [
                  63,
                  12
                ],
                [
                  76,
                  12
                ],
                [
                  1271,
                  21
                ],
                [
                  1485,
                  18
                ],
                [
                  1513,
                  21
                ],
                [
                  1529,
                  14
                ],
                [
                  1533,
                  13
                ],
                [
                  1537,
                  23
                ]
              ],
              "prototypeProperties": [
                [
                  81,
                  17
                ],
                [
                  82,
                  17
                ],
                [
                  83,
                  14
                ],
                [
                  84,
                  13
                ],
                [
                  85,
                  14
                ],
                [
                  86,
                  15
                ],
                [
                  87,
                  18
                ],
                [
                  88,
                  13
                ],
                [
                  89,
                  13
                ],
                [
                  90,
                  10
                ],
                [
                  91,
                  12
                ],
                [
                  92,
                  16
                ],
                [
                  93,
                  18
                ],
                [
                  94,
                  14
                ],
                [
                  95,
                  17
                ],
                [
                  96,
                  20
                ],
                [
                  97,
                  24
                ],
                [
                  106,
                  14
                ],
                [
                  141,
                  12
                ],
                [
                  251,
                  13
                ],
                [
                  255,
                  11
                ],
                [
                  259,
                  11
                ],
                [
                  263,
                  14
                ],
                [
                  266,
                  20
                ],
                [
                  271,
                  19
                ],
                [
                  277,
                  12
                ],
                [
                  284,
                  10
                ],
                [
                  292,
                  15
                ],
                [
                  298,
                  21
                ],
                [
                  310,
                  17
                ],
                [
                  322,
                  22
                ],
                [
                  332,
                  22
                ],
                [
                  337,
                  22
                ],
                [
                  341,
                  16
                ],
                [
                  345,
                  13
                ],
                [
                  354,
                  16
                ],
                [
                  436,
                  21
                ],
                [
                  476,
                  28
                ],
                [
                  479,
                  33
                ],
                [
                  505,
                  15
                ],
                [
                  538,
                  8
                ],
                [
                  586,
                  12
                ],
                [
                  589,
                  12
                ],
                [
                  592,
                  27
                ],
                [
                  600,
                  13
                ],
                [
                  618,
                  16
                ],
                [
                  624,
                  14
                ],
                [
                  631,
                  15
                ],
                [
                  639,
                  18
                ],
                [
                  646,
                  26
                ],
                [
                  654,
                  26
                ],
                [
                  662,
                  26
                ],
                [
                  673,
                  25
                ],
                [
                  684,
                  39
                ],
                [
                  696,
                  31
                ],
                [
                  702,
                  18
                ],
                [
                  706,
                  18
                ],
                [
                  710,
                  25
                ],
                [
                  713,
                  26
                ],
                [
                  716,
                  21
                ],
                [
                  723,
                  15
                ],
                [
                  733,
                  15
                ],
                [
                  746,
                  15
                ],
                [
                  752,
                  17
                ],
                [
                  762,
                  17
                ],
                [
                  770,
                  17
                ],
                [
                  776,
                  10
                ],
                [
                  786,
                  13
                ],
                [
                  791,
                  14
                ],
                [
                  796,
                  11
                ],
                [
                  801,
                  13
                ],
                [
                  808,
                  11
                ],
                [
                  811,
                  10
                ],
                [
                  816,
                  16
                ],
                [
                  823,
                  17
                ],
                [
                  827,
                  18
                ],
                [
                  830,
                  17
                ],
                [
                  836,
                  20
                ],
                [
                  839,
                  20
                ],
                [
                  843,
                  21
                ],
                [
                  846,
                  20
                ],
                [
                  852,
                  23
                ],
                [
                  855,
                  36
                ],
                [
                  859,
                  21
                ],
                [
                  863,
                  20
                ],
                [
                  884,
                  22
                ],
                [
                  900,
                  23
                ],
                [
                  912,
                  25
                ],
                [
                  924,
                  25
                ],
                [
                  943,
                  12
                ],
                [
                  950,
                  22
                ],
                [
                  955,
                  16
                ],
                [
                  970,
                  24
                ],
                [
                  978,
                  17
                ],
                [
                  994,
                  21
                ],
                [
                  1006,
                  22
                ],
                [
                  1012,
                  24
                ],
                [
                  1023,
                  25
                ],
                [
                  1031,
                  24
                ],
                [
                  1034,
                  14
                ],
                [
                  1046,
                  25
                ],
                [
                  1057,
                  23
                ],
                [
                  1084,
                  38
                ],
                [
                  1102,
                  23
                ],
                [
                  1144,
                  24
                ],
                [
                  1158,
                  20
                ],
                [
                  1173,
                  13
                ],
                [
                  1178,
                  19
                ],
                [
                  1201,
                  32
                ],
                [
                  1214,
                  28
                ],
                [
                  1223,
                  27
                ],
                [
                  1234,
                  22
                ],
                [
                  1237,
                  27
                ],
                [
                  1241,
                  32
                ],
                [
                  1244,
                  34
                ],
                [
                  1249,
                  21
                ],
                [
                  1256,
                  21
                ],
                [
                  1298,
                  32
                ],
                [
                  1304,
                  26
                ],
                [
                  1313,
                  27
                ],
                [
                  1316,
                  33
                ],
                [
                  1325,
                  34
                ],
                [
                  1334,
                  34
                ],
                [
                  1348,
                  32
                ],
                [
                  1371,
                  19
                ],
                [
                  1416,
                  26
                ],
                [
                  1424,
                  26
                ],
                [
                  1432,
                  28
                ],
                [
                  1435,
                  32
                ],
                [
                  1440,
                  32
                ],
                [
                  1470,
                  23
                ],
                [
                  1481,
                  23
                ],
                [
                  1563,
                  23
                ],
                [
                  1573,
                  25
                ],
                [
                  1575,
                  18
                ],
                [
                  1578,
                  18
                ],
                [
                  1581,
                  20
                ]
              ],
              "doc": " Public: Represents the entire visual pane in Atom.\n\nThe EditorView manages the {Editor}, which manages the file buffers.\n\n## Requiring in packages\n\n```coffee\n{EditorView} = require 'atom'\n\nminiEditorView = new EditorView(mini: true)\n```\n\n## Iterating over the open editor views\n\n```coffee\nfor editorView in atom.workspaceView.getEditorViews()\n  console.log(editorView.getEditor().getPath())\n```\n\n## Subscribing to every current and future editor\n\n```coffee\natom.workspace.eachEditorView (editorView) ->\n  console.log(editorView.getEditor().getPath())\n``` ",
              "range": [
                [
                  41,
                  0
                ],
                [
                  1583,
                  35
                ]
              ]
            }
          },
          "42": {
            "24": {
              "name": "characterWidthCache",
              "type": "primitive",
              "range": [
                [
                  42,
                  24
                ],
                [
                  42,
                  25
                ]
              ],
              "bindingType": "classProperty"
            }
          },
          "44": {
            "4": {
              "name": "configDefaults",
              "type": "primitive",
              "range": [
                [
                  44,
                  4
                ],
                [
                  59,
                  32
                ]
              ],
              "bindingType": "classProperty"
            }
          },
          "61": {
            "17": {
              "name": "nextEditorId",
              "type": "primitive",
              "range": [
                [
                  61,
                  17
                ],
                [
                  61,
                  17
                ]
              ],
              "bindingType": "classProperty"
            }
          },
          "63": {
            "12": {
              "name": "content",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "params"
              ],
              "range": [
                [
                  63,
                  12
                ],
                [
                  76,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "76": {
            "12": {
              "name": "classes",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  76,
                  12
                ],
                [
                  81,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "81": {
            "17": {
              "name": "vScrollMargin",
              "type": "primitive",
              "range": [
                [
                  81,
                  17
                ],
                [
                  81,
                  17
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "82": {
            "17": {
              "name": "hScrollMargin",
              "type": "primitive",
              "range": [
                [
                  82,
                  17
                ],
                [
                  82,
                  18
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "83": {
            "14": {
              "name": "lineHeight",
              "type": "primitive",
              "range": [
                [
                  83,
                  14
                ],
                [
                  83,
                  17
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "84": {
            "13": {
              "name": "charWidth",
              "type": "primitive",
              "range": [
                [
                  84,
                  13
                ],
                [
                  84,
                  16
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "85": {
            "14": {
              "name": "charHeight",
              "type": "primitive",
              "range": [
                [
                  85,
                  14
                ],
                [
                  85,
                  17
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "86": {
            "15": {
              "name": "cursorViews",
              "type": "primitive",
              "range": [
                [
                  86,
                  15
                ],
                [
                  86,
                  18
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "87": {
            "18": {
              "name": "selectionViews",
              "type": "primitive",
              "range": [
                [
                  87,
                  18
                ],
                [
                  87,
                  21
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "88": {
            "13": {
              "name": "lineCache",
              "type": "primitive",
              "range": [
                [
                  88,
                  13
                ],
                [
                  88,
                  16
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "89": {
            "13": {
              "name": "isFocused",
              "type": "primitive",
              "range": [
                [
                  89,
                  13
                ],
                [
                  89,
                  17
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "90": {
            "10": {
              "name": "editor",
              "type": "primitive",
              "range": [
                [
                  90,
                  10
                ],
                [
                  90,
                  13
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "91": {
            "12": {
              "name": "attached",
              "type": "primitive",
              "range": [
                [
                  91,
                  12
                ],
                [
                  91,
                  16
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "92": {
            "16": {
              "name": "lineOverdraw",
              "type": "primitive",
              "range": [
                [
                  92,
                  16
                ],
                [
                  92,
                  17
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "93": {
            "18": {
              "name": "pendingChanges",
              "type": "primitive",
              "range": [
                [
                  93,
                  18
                ],
                [
                  93,
                  21
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "94": {
            "14": {
              "name": "newCursors",
              "type": "primitive",
              "range": [
                [
                  94,
                  14
                ],
                [
                  94,
                  17
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "95": {
            "17": {
              "name": "newSelections",
              "type": "primitive",
              "range": [
                [
                  95,
                  17
                ],
                [
                  95,
                  20
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "96": {
            "20": {
              "name": "redrawOnReattach",
              "type": "primitive",
              "range": [
                [
                  96,
                  20
                ],
                [
                  96,
                  24
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "97": {
            "24": {
              "name": "bottomPaddingInLines",
              "type": "primitive",
              "range": [
                [
                  97,
                  24
                ],
                [
                  97,
                  25
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "106": {
            "14": {
              "name": "initialize",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "editorOrOptions"
              ],
              "range": [
                [
                  106,
                  14
                ],
                [
                  141,
                  1
                ]
              ],
              "doc": " Private: The constructor for setting up an `EditorView` instance.\n\neditorOrOptions - Either an {Editor}, or an object with one property, `mini`.\n                  If `mini` is `true`, a \"miniature\" `Editor` is constructed.\n                  Typically, this is ideal for scenarios where you need an Atom editor,\n                  but without all the chrome, like scrollbars, gutter, _e.t.c._.\n\n "
            }
          },
          "141": {
            "12": {
              "name": "bindKeys",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  141,
                  12
                ],
                [
                  251,
                  1
                ]
              ],
              "doc": " Private: Sets up the core Atom commands.\n\nSome commands are excluded from mini-editors. "
            }
          },
          "251": {
            "13": {
              "name": "getEditor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  251,
                  13
                ],
                [
                  255,
                  1
                ]
              ],
              "doc": " Public: Get the underlying editor model for this view.\n\nReturns an {Editor}. "
            }
          },
          "255": {
            "11": {
              "name": "getText",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  255,
                  11
                ],
                [
                  259,
                  1
                ]
              ],
              "doc": "Private: {Delegates to: Editor.getText} "
            }
          },
          "259": {
            "11": {
              "name": "setText",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "text"
              ],
              "range": [
                [
                  259,
                  11
                ],
                [
                  263,
                  1
                ]
              ],
              "doc": "Private: {Delegates to: Editor.setText} "
            }
          },
          "263": {
            "14": {
              "name": "insertText",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "text",
                "options"
              ],
              "range": [
                [
                  263,
                  14
                ],
                [
                  266,
                  1
                ]
              ],
              "doc": "Private: {Delegates to: Editor.insertText} "
            }
          },
          "266": {
            "20": {
              "name": "setHeightInLines",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "heightInLines"
              ],
              "range": [
                [
                  266,
                  20
                ],
                [
                  271,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "271": {
            "19": {
              "name": "setWidthInChars",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "widthInChars"
              ],
              "range": [
                [
                  271,
                  19
                ],
                [
                  277,
                  1
                ]
              ],
              "doc": "Private: {Delegates to: Editor.setEditorWidthInChars} "
            }
          },
          "277": {
            "12": {
              "name": "pageDown",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  277,
                  12
                ],
                [
                  284,
                  1
                ]
              ],
              "doc": " Public: Emulates the \"page down\" key, where the last row of a buffer scrolls\nto become the first. "
            }
          },
          "284": {
            "10": {
              "name": "pageUp",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  284,
                  10
                ],
                [
                  292,
                  1
                ]
              ],
              "doc": " Public: Emulates the \"page up\" key, where the frst row of a buffer scrolls\nto become the last. "
            }
          },
          "292": {
            "15": {
              "name": "getPageRows",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  292,
                  15
                ],
                [
                  298,
                  1
                ]
              ],
              "doc": " Private: Gets the number of actual page rows existing in an editor.\n\nReturns a {Number}. "
            }
          },
          "298": {
            "21": {
              "name": "setShowInvisibles",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "showInvisibles"
              ],
              "range": [
                [
                  298,
                  21
                ],
                [
                  310,
                  1
                ]
              ],
              "doc": " Public: Set whether invisible characters are shown.\n\nshowInvisibles - A {Boolean} which, if `true`, show invisible characters. "
            }
          },
          "310": {
            "17": {
              "name": "setInvisibles",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  310,
                  17
                ],
                [
                  322,
                  1
                ]
              ],
              "doc": " Public: Defines which characters are invisible.\n\ninvisibles - An {Object} defining the invisible characters:\n  :eol   - The end of line invisible {String} (default: `\\u00ac`).\n  :space - The space invisible {String} (default: `\\u00b7`).\n  :tab   - The tab invisible {String} (default: `\\u00bb`).\n  :cr    - The carriage return invisible {String} (default: `\\u00a4`). "
            }
          },
          "322": {
            "22": {
              "name": "setShowIndentGuide",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "showIndentGuide"
              ],
              "range": [
                [
                  322,
                  22
                ],
                [
                  332,
                  1
                ]
              ],
              "doc": " Public: Sets whether you want to show the indentation guides.\n\nshowIndentGuide - A {Boolean} you can set to `true` if you want to see the\n                  indentation guides. "
            }
          },
          "332": {
            "22": {
              "name": "setPlaceholderText",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "placeholderText"
              ],
              "range": [
                [
                  332,
                  22
                ],
                [
                  337,
                  1
                ]
              ],
              "doc": " Public: Set the text to appear in the editor when it is empty.\n\nThis only affects mini editors.\n\nplaceholderText - A {String} of text to display when empty. "
            }
          },
          "337": {
            "22": {
              "name": "getPlaceholderText",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  337,
                  22
                ],
                [
                  341,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "341": {
            "16": {
              "name": "checkoutHead",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  341,
                  16
                ],
                [
                  345,
                  1
                ]
              ],
              "doc": "Private: Checkout the HEAD revision of this editor's file. "
            }
          },
          "345": {
            "13": {
              "name": "configure",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  345,
                  13
                ],
                [
                  354,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "354": {
            "16": {
              "name": "handleEvents",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  354,
                  16
                ],
                [
                  436,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "436": {
            "21": {
              "name": "handleInputEvents",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  436,
                  21
                ],
                [
                  476,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "476": {
            "28": {
              "name": "bringHiddenInputIntoView",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  476,
                  28
                ],
                [
                  479,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "479": {
            "33": {
              "name": "selectOnMousemoveUntilMouseup",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  479,
                  33
                ],
                [
                  505,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "505": {
            "15": {
              "name": "afterAttach",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "onDom"
              ],
              "range": [
                [
                  505,
                  15
                ],
                [
                  538,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "538": {
            "8": {
              "name": "edit",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "editor"
              ],
              "range": [
                [
                  538,
                  8
                ],
                [
                  586,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "586": {
            "12": {
              "name": "getModel",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  586,
                  12
                ],
                [
                  589,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "589": {
            "12": {
              "name": "setModel",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "editor"
              ],
              "range": [
                [
                  589,
                  12
                ],
                [
                  592,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "592": {
            "27": {
              "name": "showBufferConflictAlert",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "editor"
              ],
              "range": [
                [
                  592,
                  27
                ],
                [
                  600,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "600": {
            "13": {
              "name": "scrollTop",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scrollTop",
                "options"
              ],
              "range": [
                [
                  600,
                  13
                ],
                [
                  618,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "618": {
            "16": {
              "name": "scrollBottom",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scrollBottom"
              ],
              "range": [
                [
                  618,
                  16
                ],
                [
                  624,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "624": {
            "14": {
              "name": "scrollLeft",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scrollLeft"
              ],
              "range": [
                [
                  624,
                  14
                ],
                [
                  631,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "631": {
            "15": {
              "name": "scrollRight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scrollRight"
              ],
              "range": [
                [
                  631,
                  15
                ],
                [
                  639,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "639": {
            "18": {
              "name": "scrollToBottom",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  639,
                  18
                ],
                [
                  646,
                  1
                ]
              ],
              "doc": "Public: Scrolls the editor to the bottom. "
            }
          },
          "646": {
            "26": {
              "name": "scrollToCursorPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  646,
                  26
                ],
                [
                  654,
                  1
                ]
              ],
              "doc": " Public: Scrolls the editor to the position of the most recently added\ncursor if it isn't current on screen.\n\nThe editor is centered around the cursor's position if possible. "
            }
          },
          "654": {
            "26": {
              "name": "scrollToBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferPosition",
                "options"
              ],
              "range": [
                [
                  654,
                  26
                ],
                [
                  662,
                  1
                ]
              ],
              "doc": " Public: Scrolls the editor to the given buffer position.\n\nbufferPosition - An object that represents a buffer position. It can be either\n                 an {Object} (`{row, column}`), {Array} (`[row, column]`), or {Point}\noptions - A hash matching the options available to {::scrollToPixelPosition} "
            }
          },
          "662": {
            "26": {
              "name": "scrollToScreenPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenPosition",
                "options"
              ],
              "range": [
                [
                  662,
                  26
                ],
                [
                  673,
                  1
                ]
              ],
              "doc": " Public: Scrolls the editor to the given screen position.\n\nscreenPosition - An object that represents a buffer position. It can be either\n                 an {Object} (`{row, column}`), {Array} (`[row, column]`), or {Point}\noptions - A hash matching the options available to {::scrollToPixelPosition} "
            }
          },
          "673": {
            "25": {
              "name": "scrollToPixelPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "pixelPosition",
                "options"
              ],
              "range": [
                [
                  673,
                  25
                ],
                [
                  684,
                  1
                ]
              ],
              "doc": " Public: Scrolls the editor to the given pixel position.\n\npixelPosition - An object that represents a pixel position. It can be either\n                an {Object} (`{row, column}`), {Array} (`[row, column]`), or\n                {Point}.\noptions - A hash with the following keys:\n  :center - if `true`, the position is scrolled such that it's in\n            the center of the editor "
            }
          },
          "684": {
            "39": {
              "name": "highlightFoldsContainingBufferRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRange"
              ],
              "range": [
                [
                  684,
                  39
                ],
                [
                  696,
                  1
                ]
              ],
              "doc": " Public: Highlight all the folds within the given buffer range.\n\n\"Highlighting\" essentially just adds the `fold-selected` class to the line's\nDOM element.\n\nbufferRange - The {Range} to check. "
            }
          },
          "696": {
            "31": {
              "name": "saveScrollPositionForEditor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  696,
                  31
                ],
                [
                  702,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "702": {
            "18": {
              "name": "toggleSoftTabs",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  702,
                  18
                ],
                [
                  706,
                  1
                ]
              ],
              "doc": "Public: Toggle soft tabs on the edit session. "
            }
          },
          "706": {
            "18": {
              "name": "toggleSoftWrap",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  706,
                  18
                ],
                [
                  710,
                  1
                ]
              ],
              "doc": "Public: Toggle soft wrap on the edit session. "
            }
          },
          "710": {
            "25": {
              "name": "calculateWidthInChars",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  710,
                  25
                ],
                [
                  713,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "713": {
            "26": {
              "name": "calculateHeightInLines",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  713,
                  26
                ],
                [
                  716,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "716": {
            "21": {
              "name": "getScrollbarWidth",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  716,
                  21
                ],
                [
                  723,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "723": {
            "15": {
              "name": "setSoftWrap",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "softWrap"
              ],
              "range": [
                [
                  723,
                  15
                ],
                [
                  733,
                  1
                ]
              ],
              "doc": " Public: Enables/disables soft wrap on the editor.\n\nsoftWrap - A {Boolean} which, if `true`, enables soft wrap "
            }
          },
          "733": {
            "15": {
              "name": "setFontSize",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "fontSize"
              ],
              "range": [
                [
                  733,
                  15
                ],
                [
                  746,
                  1
                ]
              ],
              "doc": " Public: Sets the font size for the editor.\n\nfontSize - A {Number} indicating the font size in pixels. "
            }
          },
          "746": {
            "15": {
              "name": "getFontSize",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  746,
                  15
                ],
                [
                  752,
                  1
                ]
              ],
              "doc": " Public: Retrieves the font size for the editor.\n\nReturns a {Number} indicating the font size in pixels. "
            }
          },
          "752": {
            "17": {
              "name": "setFontFamily",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "fontFamily"
              ],
              "range": [
                [
                  752,
                  17
                ],
                [
                  762,
                  1
                ]
              ],
              "doc": " Public: Sets the font family for the editor.\n\nfontFamily - A {String} identifying the CSS `font-family`. "
            }
          },
          "762": {
            "17": {
              "name": "getFontFamily",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  762,
                  17
                ],
                [
                  762,
                  38
                ]
              ],
              "doc": " Public: Gets the font family for the editor.\n\nReturns a {String} identifying the CSS `font-family`. "
            }
          },
          "770": {
            "17": {
              "name": "setLineHeight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "lineHeight"
              ],
              "range": [
                [
                  770,
                  17
                ],
                [
                  776,
                  1
                ]
              ],
              "doc": " Public: Sets the line height of the editor.\n\nCalling this method has no effect when called on a mini editor.\n\nlineHeight - A {Number} without a unit suffix identifying the CSS\n`line-height`. "
            }
          },
          "776": {
            "10": {
              "name": "redraw",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  776,
                  10
                ],
                [
                  786,
                  1
                ]
              ],
              "doc": "Public: Redraw the editor "
            }
          },
          "786": {
            "13": {
              "name": "splitLeft",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  786,
                  13
                ],
                [
                  791,
                  1
                ]
              ],
              "doc": "Public: Split the editor view left. "
            }
          },
          "791": {
            "14": {
              "name": "splitRight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  791,
                  14
                ],
                [
                  796,
                  1
                ]
              ],
              "doc": "Public: Split the editor view right. "
            }
          },
          "796": {
            "11": {
              "name": "splitUp",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  796,
                  11
                ],
                [
                  801,
                  1
                ]
              ],
              "doc": "Public: Split the editor view up. "
            }
          },
          "801": {
            "13": {
              "name": "splitDown",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  801,
                  13
                ],
                [
                  808,
                  1
                ]
              ],
              "doc": "Public: Split the editor view down. "
            }
          },
          "808": {
            "11": {
              "name": "getPane",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  808,
                  11
                ],
                [
                  811,
                  1
                ]
              ],
              "doc": " Public: Get this view's pane.\n\nReturns a {Pane}. "
            }
          },
          "811": {
            "10": {
              "name": "remove",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "selector",
                "keepData"
              ],
              "range": [
                [
                  811,
                  10
                ],
                [
                  816,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "816": {
            "16": {
              "name": "beforeRemove",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  816,
                  16
                ],
                [
                  823,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "823": {
            "17": {
              "name": "getCursorView",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "index"
              ],
              "range": [
                [
                  823,
                  17
                ],
                [
                  827,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "827": {
            "18": {
              "name": "getCursorViews",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  827,
                  18
                ],
                [
                  830,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "830": {
            "17": {
              "name": "addCursorView",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "cursor",
                "options"
              ],
              "range": [
                [
                  830,
                  17
                ],
                [
                  836,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "836": {
            "20": {
              "name": "removeCursorView",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "cursorView"
              ],
              "range": [
                [
                  836,
                  20
                ],
                [
                  839,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "839": {
            "20": {
              "name": "getSelectionView",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "index"
              ],
              "range": [
                [
                  839,
                  20
                ],
                [
                  843,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "843": {
            "21": {
              "name": "getSelectionViews",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  843,
                  21
                ],
                [
                  846,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "846": {
            "20": {
              "name": "addSelectionView",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "selection"
              ],
              "range": [
                [
                  846,
                  20
                ],
                [
                  852,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "852": {
            "23": {
              "name": "removeSelectionView",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "selectionView"
              ],
              "range": [
                [
                  852,
                  23
                ],
                [
                  855,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "855": {
            "36": {
              "name": "removeAllCursorAndSelectionViews",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  855,
                  36
                ],
                [
                  859,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "859": {
            "21": {
              "name": "appendToLinesView",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "view"
              ],
              "range": [
                [
                  859,
                  21
                ],
                [
                  863,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "863": {
            "20": {
              "name": "scrollVertically",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "pixelPosition",
                null
              ],
              "range": [
                [
                  863,
                  20
                ],
                [
                  884,
                  1
                ]
              ],
              "doc": "Private: Scrolls the editor vertically to a given position. "
            }
          },
          "884": {
            "22": {
              "name": "scrollHorizontally",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "pixelPosition"
              ],
              "range": [
                [
                  884,
                  22
                ],
                [
                  900,
                  1
                ]
              ],
              "doc": "Private: Scrolls the editor horizontally to a given position. "
            }
          },
          "900": {
            "23": {
              "name": "calculateDimensions",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  900,
                  23
                ],
                [
                  912,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "912": {
            "25": {
              "name": "recalculateDimensions",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  912,
                  25
                ],
                [
                  924,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "924": {
            "25": {
              "name": "updateLayerDimensions",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scrollViewWidth"
              ],
              "range": [
                [
                  924,
                  25
                ],
                [
                  943,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "943": {
            "12": {
              "name": "isHidden",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  943,
                  12
                ],
                [
                  950,
                  1
                ]
              ],
              "doc": "Private: Override for speed. The base function checks computedStyle, unnecessary here. "
            }
          },
          "950": {
            "22": {
              "name": "clearRenderedLines",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  950,
                  22
                ],
                [
                  955,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "955": {
            "16": {
              "name": "resetDisplay",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  955,
                  16
                ],
                [
                  970,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "970": {
            "24": {
              "name": "requestDisplayUpdate",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  970,
                  24
                ],
                [
                  978,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "978": {
            "17": {
              "name": "updateDisplay",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "options"
              ],
              "range": [
                [
                  978,
                  17
                ],
                [
                  994,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "994": {
            "21": {
              "name": "updateCursorViews",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  994,
                  21
                ],
                [
                  1006,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1006": {
            "22": {
              "name": "shouldUpdateCursor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "cursorView"
              ],
              "range": [
                [
                  1006,
                  22
                ],
                [
                  1012,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1012": {
            "24": {
              "name": "updateSelectionViews",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1012,
                  24
                ],
                [
                  1023,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1023": {
            "25": {
              "name": "shouldUpdateSelection",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "selectionView"
              ],
              "range": [
                [
                  1023,
                  25
                ],
                [
                  1031,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1031": {
            "24": {
              "name": "syncCursorAnimations",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1031,
                  24
                ],
                [
                  1034,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1034": {
            "14": {
              "name": "autoscroll",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "suppressAutoscroll"
              ],
              "range": [
                [
                  1034,
                  14
                ],
                [
                  1046,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1046": {
            "25": {
              "name": "updatePlaceholderText",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1046,
                  25
                ],
                [
                  1057,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1057": {
            "23": {
              "name": "updateRenderedLines",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scrollViewWidth"
              ],
              "range": [
                [
                  1057,
                  23
                ],
                [
                  1084,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1084": {
            "38": {
              "name": "computeSurroundingEmptyLineChanges",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "change"
              ],
              "range": [
                [
                  1084,
                  38
                ],
                [
                  1102,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1102": {
            "23": {
              "name": "computeIntactRanges",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "renderFrom",
                "renderTo"
              ],
              "range": [
                [
                  1102,
                  23
                ],
                [
                  1144,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1144": {
            "24": {
              "name": "truncateIntactRanges",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "intactRanges",
                "renderFrom",
                "renderTo"
              ],
              "range": [
                [
                  1144,
                  24
                ],
                [
                  1158,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1158": {
            "20": {
              "name": "clearDirtyRanges",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "intactRanges"
              ],
              "range": [
                [
                  1158,
                  20
                ],
                [
                  1173,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1173": {
            "13": {
              "name": "clearLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "lineElement"
              ],
              "range": [
                [
                  1173,
                  13
                ],
                [
                  1178,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1178": {
            "19": {
              "name": "fillDirtyRanges",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "intactRanges",
                "renderFrom",
                "renderTo"
              ],
              "range": [
                [
                  1178,
                  19
                ],
                [
                  1201,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1201": {
            "32": {
              "name": "updatePaddingOfRenderedLines",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1201,
                  32
                ],
                [
                  1214,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1214": {
            "28": {
              "name": "getFirstVisibleScreenRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1214,
                  28
                ],
                [
                  1223,
                  1
                ]
              ],
              "doc": " Public: Retrieves the number of the row that is visible and currently at the\ntop of the editor.\n\nReturns a {Number}. "
            }
          },
          "1223": {
            "27": {
              "name": "getLastVisibleScreenRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1223,
                  27
                ],
                [
                  1234,
                  1
                ]
              ],
              "doc": " Public: Retrieves the number of the row that is visible and currently at the\nbottom of the editor.\n\nReturns a {Number}. "
            }
          },
          "1234": {
            "22": {
              "name": "isScreenRowVisible",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "row"
              ],
              "range": [
                [
                  1234,
                  22
                ],
                [
                  1237,
                  1
                ]
              ],
              "doc": " Public: Given a row number, identifies if it is currently visible.\n\nrow - A row {Number} to check\n\nReturns a {Boolean}. "
            }
          },
          "1237": {
            "27": {
              "name": "handleScreenLinesChange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "change"
              ],
              "range": [
                [
                  1237,
                  27
                ],
                [
                  1241,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1241": {
            "32": {
              "name": "buildLineElementForScreenRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenRow"
              ],
              "range": [
                [
                  1241,
                  32
                ],
                [
                  1244,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1244": {
            "34": {
              "name": "buildLineElementsForScreenRows",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "startRow",
                "endRow"
              ],
              "range": [
                [
                  1244,
                  34
                ],
                [
                  1249,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1249": {
            "21": {
              "name": "htmlForScreenRows",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "startRow",
                "endRow"
              ],
              "range": [
                [
                  1249,
                  21
                ],
                [
                  1256,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1256": {
            "21": {
              "name": "htmlForScreenLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenLine",
                "screenRow"
              ],
              "range": [
                [
                  1256,
                  21
                ],
                [
                  1271,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1271": {
            "21": {
              "name": "buildIndentation",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "screenRow",
                "editor"
              ],
              "range": [
                [
                  1271,
                  21
                ],
                [
                  1298,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1298": {
            "32": {
              "name": "buildHtmlEndOfLineInvisibles",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenLine"
              ],
              "range": [
                [
                  1298,
                  32
                ],
                [
                  1304,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1304": {
            "26": {
              "name": "getEndOfLineInvisibles",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenLine"
              ],
              "range": [
                [
                  1304,
                  26
                ],
                [
                  1313,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1313": {
            "27": {
              "name": "lineElementForScreenRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenRow"
              ],
              "range": [
                [
                  1313,
                  27
                ],
                [
                  1316,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1316": {
            "33": {
              "name": "toggleLineCommentsInSelection",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1316,
                  33
                ],
                [
                  1325,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1325": {
            "34": {
              "name": "pixelPositionForBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "position"
              ],
              "range": [
                [
                  1325,
                  34
                ],
                [
                  1334,
                  1
                ]
              ],
              "doc": " Public: Converts a buffer position to a pixel position.\n\nposition - An object that represents a buffer position. It can be either\n           an {Object} (`{row, column}`), {Array} (`[row, column]`), or {Point}\n\nReturns an object with two values: `top` and `left`, representing the pixel positions. "
            }
          },
          "1334": {
            "34": {
              "name": "pixelPositionForScreenPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "position"
              ],
              "range": [
                [
                  1334,
                  34
                ],
                [
                  1348,
                  1
                ]
              ],
              "doc": " Public: Converts a screen position to a pixel position.\n\nposition - An object that represents a screen position. It can be either\n           an {Object} (`{row, column}`), {Array} (`[row, column]`), or {Point}\n\nReturns an object with two values: `top` and `left`, representing the pixel positions. "
            }
          },
          "1348": {
            "32": {
              "name": "positionLeftForLineAndColumn",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "lineElement",
                "screenRow",
                "screenColumn"
              ],
              "range": [
                [
                  1348,
                  32
                ],
                [
                  1371,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1371": {
            "19": {
              "name": "measureToColumn",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "lineElement",
                "tokenizedLine",
                "screenColumn"
              ],
              "range": [
                [
                  1371,
                  19
                ],
                [
                  1416,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1416": {
            "26": {
              "name": "getCharacterWidthCache",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scopes",
                "char"
              ],
              "range": [
                [
                  1416,
                  26
                ],
                [
                  1424,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1424": {
            "26": {
              "name": "setCharacterWidthCache",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scopes",
                "char",
                "val"
              ],
              "range": [
                [
                  1424,
                  26
                ],
                [
                  1432,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1432": {
            "28": {
              "name": "clearCharacterWidthCache",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1432,
                  28
                ],
                [
                  1435,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1435": {
            "32": {
              "name": "pixelOffsetForScreenPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "position"
              ],
              "range": [
                [
                  1435,
                  32
                ],
                [
                  1440,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1440": {
            "32": {
              "name": "screenPositionFromMouseEvent",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "e"
              ],
              "range": [
                [
                  1440,
                  32
                ],
                [
                  1470,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1470": {
            "23": {
              "name": "highlightCursorLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1470,
                  23
                ],
                [
                  1481,
                  1
                ]
              ],
              "doc": "Private: Highlights the current line the cursor is on. "
            }
          },
          "1481": {
            "23": {
              "name": "copyPathToClipboard",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1481,
                  23
                ],
                [
                  1485,
                  1
                ]
              ],
              "doc": "Private: Copies the current file path to the native clipboard. "
            }
          },
          "1485": {
            "18": {
              "name": "buildLineHtml",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  1485,
                  18
                ],
                [
                  1513,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1513": {
            "21": {
              "name": "updateScopeStack",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "line",
                "scopeStack",
                "desiredScopes"
              ],
              "range": [
                [
                  1513,
                  21
                ],
                [
                  1529,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1529": {
            "14": {
              "name": "pushScope",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "line",
                "scopeStack",
                "scope"
              ],
              "range": [
                [
                  1529,
                  14
                ],
                [
                  1533,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1533": {
            "13": {
              "name": "popScope",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "line",
                "scopeStack"
              ],
              "range": [
                [
                  1533,
                  13
                ],
                [
                  1537,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1537": {
            "23": {
              "name": "buildEmptyLineHtml",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "showIndentGuide",
                "eolInvisibles",
                "htmlEolInvisibles",
                "indentation",
                "editor",
                "mini"
              ],
              "range": [
                [
                  1537,
                  23
                ],
                [
                  1563,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1563": {
            "23": {
              "name": "replaceSelectedText",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "replaceFn"
              ],
              "range": [
                [
                  1563,
                  23
                ],
                [
                  1573,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1573": {
            "25": {
              "name": "consolidateSelections",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "e"
              ],
              "range": [
                [
                  1573,
                  25
                ],
                [
                  1573,
                  89
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1575": {
            "18": {
              "name": "logCursorScope",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1575,
                  18
                ],
                [
                  1578,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1578": {
            "18": {
              "name": "logScreenLines",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "start",
                "end"
              ],
              "range": [
                [
                  1578,
                  18
                ],
                [
                  1581,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1581": {
            "20": {
              "name": "logRenderedLines",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1581,
                  20
                ],
                [
                  1583,
                  35
                ]
              ],
              "doc": "~Private~"
            }
          }
        },
        "exports": 41
      },
      "src/editor.coffee": {
        "objects": {
          "0": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  0,
                  4
                ],
                [
                  0,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "1": {
            "7": {
              "name": "path",
              "type": "import",
              "range": [
                [
                  1,
                  7
                ],
                [
                  1,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "path",
              "builtin": true
            }
          },
          "2": {
            "15": {
              "name": "Serializable",
              "type": "import",
              "range": [
                [
                  2,
                  15
                ],
                [
                  2,
                  36
                ]
              ],
              "bindingType": "variable",
              "module": "serializable@^1"
            }
          },
          "3": {
            "12": {
              "name": "Delegator",
              "type": "import",
              "range": [
                [
                  3,
                  12
                ],
                [
                  3,
                  29
                ]
              ],
              "bindingType": "variable",
              "module": "delegato@^1"
            }
          },
          "4": {
            "1": {
              "type": "import",
              "range": [
                [
                  4,
                  1
                ],
                [
                  4,
                  9
                ]
              ],
              "bindingType": "variable",
              "module": "grim@0.11.0",
              "name": "deprecate",
              "exportsProperty": "deprecate"
            }
          },
          "5": {
            "1": {
              "type": "import",
              "range": [
                [
                  5,
                  1
                ],
                [
                  5,
                  5
                ]
              ],
              "bindingType": "variable",
              "module": "theorist@^1",
              "name": "Model",
              "exportsProperty": "Model"
            }
          },
          "6": {
            "1": {
              "type": "import",
              "range": [
                [
                  6,
                  1
                ],
                [
                  6,
                  5
                ]
              ],
              "bindingType": "variable",
              "module": "text-buffer@^3.0.0",
              "name": "Point",
              "exportsProperty": "Point"
            },
            "8": {
              "type": "import",
              "range": [
                [
                  6,
                  8
                ],
                [
                  6,
                  12
                ]
              ],
              "bindingType": "variable",
              "module": "text-buffer@^3.0.0",
              "name": "Range",
              "exportsProperty": "Range"
            }
          },
          "7": {
            "15": {
              "name": "LanguageMode",
              "type": "import",
              "range": [
                [
                  7,
                  15
                ],
                [
                  7,
                  39
                ]
              ],
              "bindingType": "variable",
              "path": "./language-mode"
            }
          },
          "8": {
            "16": {
              "name": "DisplayBuffer",
              "type": "import",
              "range": [
                [
                  8,
                  16
                ],
                [
                  8,
                  41
                ]
              ],
              "bindingType": "variable",
              "path": "./display-buffer"
            }
          },
          "9": {
            "9": {
              "name": "Cursor",
              "type": "import",
              "range": [
                [
                  9,
                  9
                ],
                [
                  9,
                  26
                ]
              ],
              "bindingType": "variable",
              "path": "./cursor"
            }
          },
          "10": {
            "12": {
              "name": "Selection",
              "type": "import",
              "range": [
                [
                  10,
                  12
                ],
                [
                  10,
                  32
                ]
              ],
              "bindingType": "variable",
              "path": "./selection"
            }
          },
          "11": {
            "24": {
              "type": "primitive",
              "range": [
                [
                  11,
                  24
                ],
                [
                  11,
                  58
                ]
              ]
            }
          },
          "138": {
            "0": {
              "type": "class",
              "name": "Editor",
              "superClass": "Model",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  143,
                  17
                ],
                [
                  144,
                  32
                ],
                [
                  145,
                  18
                ],
                [
                  146,
                  10
                ],
                [
                  147,
                  16
                ],
                [
                  148,
                  11
                ],
                [
                  149,
                  14
                ],
                [
                  150,
                  28
                ],
                [
                  151,
                  20
                ],
                [
                  152,
                  26
                ],
                [
                  161,
                  15
                ],
                [
                  190,
                  19
                ],
                [
                  197,
                  21
                ],
                [
                  202,
                  21
                ],
                [
                  215,
                  28
                ],
                [
                  228,
                  16
                ],
                [
                  234,
                  13
                ],
                [
                  242,
                  8
                ],
                [
                  258,
                  12
                ],
                [
                  271,
                  16
                ],
                [
                  281,
                  14
                ],
                [
                  288,
                  25
                ],
                [
                  292,
                  21
                ],
                [
                  296,
                  15
                ],
                [
                  301,
                  15
                ],
                [
                  304,
                  18
                ],
                [
                  307,
                  15
                ],
                [
                  312,
                  15
                ],
                [
                  315,
                  18
                ],
                [
                  323,
                  14
                ],
                [
                  328,
                  16
                ],
                [
                  331,
                  16
                ],
                [
                  339,
                  16
                ],
                [
                  361,
                  22
                ],
                [
                  369,
                  19
                ],
                [
                  381,
                  27
                ],
                [
                  396,
                  30
                ],
                [
                  414,
                  22
                ],
                [
                  418,
                  21
                ],
                [
                  428,
                  8
                ],
                [
                  435,
                  10
                ],
                [
                  437,
                  16
                ],
                [
                  442,
                  23
                ],
                [
                  447,
                  11
                ],
                [
                  450,
                  11
                ],
                [
                  453,
                  11
                ],
                [
                  458,
                  18
                ],
                [
                  461,
                  16
                ],
                [
                  464,
                  13
                ],
                [
                  467,
                  10
                ],
                [
                  470,
                  20
                ],
                [
                  473,
                  24
                ],
                [
                  479,
                  25
                ],
                [
                  482,
                  24
                ],
                [
                  486,
                  20
                ],
                [
                  494,
                  27
                ],
                [
                  500,
                  20
                ],
                [
                  506,
                  26
                ],
                [
                  509,
                  8
                ],
                [
                  512,
                  21
                ],
                [
                  515,
                  30
                ],
                [
                  518,
                  14
                ],
                [
                  520,
                  11
                ],
                [
                  524,
                  22
                ],
                [
                  536,
                  35
                ],
                [
                  546,
                  35
                ],
                [
                  551,
                  29
                ],
                [
                  556,
                  29
                ],
                [
                  573,
                  22
                ],
                [
                  576,
                  20
                ],
                [
                  579,
                  22
                ],
                [
                  582,
                  22
                ],
                [
                  585,
                  26
                ],
                [
                  588,
                  20
                ],
                [
                  591,
                  27
                ],
                [
                  593,
                  25
                ],
                [
                  605,
                  27
                ],
                [
                  614,
                  31
                ],
                [
                  618,
                  26
                ],
                [
                  624,
                  19
                ],
                [
                  626,
                  18
                ],
                [
                  633,
                  14
                ],
                [
                  639,
                  17
                ],
                [
                  643,
                  22
                ],
                [
                  649,
                  22
                ],
                [
                  668,
                  10
                ],
                [
                  674,
                  13
                ],
                [
                  678,
                  30
                ],
                [
                  683,
                  30
                ],
                [
                  690,
                  27
                ],
                [
                  696,
                  27
                ],
                [
                  701,
                  10
                ],
                [
                  708,
                  21
                ],
                [
                  714,
                  21
                ],
                [
                  718,
                  14
                ],
                [
                  722,
                  22
                ],
                [
                  726,
                  23
                ],
                [
                  734,
                  33
                ],
                [
                  739,
                  26
                ],
                [
                  744,
                  30
                ],
                [
                  751,
                  18
                ],
                [
                  758,
                  19
                ],
                [
                  765,
                  20
                ],
                [
                  779,
                  13
                ],
                [
                  798,
                  8
                ],
                [
                  803,
                  8
                ],
                [
                  812,
                  18
                ],
                [
                  817,
                  20
                ],
                [
                  822,
                  21
                ],
                [
                  826,
                  11
                ],
                [
                  830,
                  13
                ],
                [
                  836,
                  24
                ],
                [
                  846,
                  17
                ],
                [
                  852,
                  19
                ],
                [
                  862,
                  25
                ],
                [
                  865,
                  25
                ],
                [
                  870,
                  14
                ],
                [
                  874,
                  21
                ],
                [
                  878,
                  39
                ],
                [
                  884,
                  25
                ],
                [
                  893,
                  23
                ],
                [
                  901,
                  23
                ],
                [
                  909,
                  23
                ],
                [
                  913,
                  34
                ],
                [
                  917,
                  34
                ],
                [
                  921,
                  34
                ],
                [
                  926,
                  14
                ],
                [
                  979,
                  16
                ],
                [
                  1034,
                  18
                ],
                [
                  1060,
                  17
                ],
                [
                  1072,
                  22
                ],
                [
                  1075,
                  23
                ],
                [
                  1096,
                  32
                ],
                [
                  1137,
                  18
                ],
                [
                  1140,
                  19
                ],
                [
                  1144,
                  13
                ],
                [
                  1148,
                  14
                ],
                [
                  1170,
                  15
                ],
                [
                  1179,
                  19
                ],
                [
                  1188,
                  19
                ],
                [
                  1197,
                  22
                ],
                [
                  1206,
                  22
                ],
                [
                  1210,
                  17
                ],
                [
                  1216,
                  18
                ],
                [
                  1220,
                  22
                ],
                [
                  1224,
                  14
                ],
                [
                  1227,
                  13
                ],
                [
                  1233,
                  29
                ],
                [
                  1240,
                  29
                ],
                [
                  1245,
                  13
                ],
                [
                  1255,
                  16
                ],
                [
                  1264,
                  16
                ],
                [
                  1288,
                  30
                ],
                [
                  1301,
                  26
                ],
                [
                  1311,
                  26
                ],
                [
                  1321,
                  27
                ],
                [
                  1336,
                  19
                ],
                [
                  1342,
                  19
                ],
                [
                  1347,
                  25
                ],
                [
                  1355,
                  31
                ],
                [
                  1361,
                  17
                ],
                [
                  1363,
                  27
                ],
                [
                  1374,
                  16
                ],
                [
                  1381,
                  20
                ],
                [
                  1388,
                  40
                ],
                [
                  1394,
                  28
                ],
                [
                  1403,
                  34
                ],
                [
                  1415,
                  27
                ],
                [
                  1422,
                  27
                ],
                [
                  1428,
                  22
                ],
                [
                  1439,
                  27
                ],
                [
                  1446,
                  27
                ],
                [
                  1453,
                  26
                ],
                [
                  1460,
                  26
                ],
                [
                  1468,
                  27
                ],
                [
                  1476,
                  27
                ],
                [
                  1482,
                  19
                ],
                [
                  1490,
                  24
                ],
                [
                  1499,
                  24
                ],
                [
                  1505,
                  34
                ],
                [
                  1511,
                  22
                ],
                [
                  1515,
                  16
                ],
                [
                  1519,
                  18
                ],
                [
                  1523,
                  18
                ],
                [
                  1527,
                  19
                ],
                [
                  1533,
                  19
                ],
                [
                  1539,
                  22
                ],
                [
                  1543,
                  37
                ],
                [
                  1547,
                  31
                ],
                [
                  1551,
                  36
                ],
                [
                  1555,
                  31
                ],
                [
                  1559,
                  25
                ],
                [
                  1563,
                  31
                ],
                [
                  1567,
                  25
                ],
                [
                  1571,
                  35
                ],
                [
                  1575,
                  36
                ],
                [
                  1579,
                  32
                ],
                [
                  1583,
                  40
                ],
                [
                  1587,
                  44
                ],
                [
                  1596,
                  26
                ],
                [
                  1599,
                  10
                ],
                [
                  1604,
                  12
                ],
                [
                  1609,
                  16
                ],
                [
                  1612,
                  18
                ],
                [
                  1616,
                  18
                ],
                [
                  1619,
                  15
                ],
                [
                  1626,
                  15
                ],
                [
                  1636,
                  26
                ],
                [
                  1645,
                  15
                ],
                [
                  1652,
                  14
                ],
                [
                  1659,
                  12
                ],
                [
                  1666,
                  14
                ],
                [
                  1673,
                  15
                ],
                [
                  1679,
                  13
                ],
                [
                  1686,
                  18
                ],
                [
                  1693,
                  27
                ],
                [
                  1702,
                  32
                ],
                [
                  1709,
                  21
                ],
                [
                  1716,
                  32
                ],
                [
                  1723,
                  28
                ],
                [
                  1729,
                  14
                ],
                [
                  1740,
                  21
                ],
                [
                  1751,
                  21
                ],
                [
                  1759,
                  28
                ],
                [
                  1776,
                  13
                ],
                [
                  1791,
                  13
                ],
                [
                  1798,
                  13
                ],
                [
                  1809,
                  13
                ],
                [
                  1816,
                  27
                ],
                [
                  1823,
                  21
                ],
                [
                  1830,
                  31
                ],
                [
                  1834,
                  14
                ],
                [
                  1841,
                  36
                ],
                [
                  1848,
                  40
                ],
                [
                  1856,
                  16
                ],
                [
                  1863,
                  16
                ],
                [
                  1873,
                  27
                ],
                [
                  1879,
                  28
                ],
                [
                  1883,
                  22
                ],
                [
                  1889,
                  31
                ],
                [
                  1910,
                  40
                ],
                [
                  1919,
                  14
                ],
                [
                  1926,
                  14
                ],
                [
                  1930,
                  17
                ],
                [
                  1933,
                  20
                ],
                [
                  1944,
                  12
                ],
                [
                  1952,
                  20
                ],
                [
                  1958,
                  21
                ],
                [
                  1962,
                  20
                ],
                [
                  1964,
                  11
                ],
                [
                  1967,
                  18
                ],
                [
                  1969,
                  22
                ],
                [
                  1972,
                  23
                ],
                [
                  1976,
                  23
                ],
                [
                  1980,
                  32
                ],
                [
                  1983,
                  27
                ],
                [
                  1984,
                  27
                ],
                [
                  1986,
                  29
                ],
                [
                  1987,
                  29
                ],
                [
                  1989,
                  25
                ],
                [
                  1990,
                  25
                ],
                [
                  1992,
                  29
                ],
                [
                  1994,
                  22
                ],
                [
                  1995,
                  22
                ],
                [
                  1997,
                  23
                ],
                [
                  1999,
                  25
                ],
                [
                  2001,
                  23
                ],
                [
                  2002,
                  23
                ],
                [
                  2004,
                  13
                ],
                [
                  2005,
                  13
                ],
                [
                  2007,
                  19
                ],
                [
                  2009,
                  12
                ],
                [
                  2010,
                  12
                ],
                [
                  2012,
                  16
                ],
                [
                  2013,
                  16
                ],
                [
                  2015,
                  19
                ],
                [
                  2016,
                  19
                ],
                [
                  2018,
                  17
                ],
                [
                  2019,
                  17
                ],
                [
                  2021,
                  18
                ],
                [
                  2022,
                  18
                ],
                [
                  2024,
                  19
                ],
                [
                  2025,
                  18
                ],
                [
                  2027,
                  22
                ],
                [
                  2029,
                  29
                ],
                [
                  2031,
                  38
                ],
                [
                  2033,
                  34
                ],
                [
                  2035,
                  34
                ],
                [
                  2037,
                  34
                ],
                [
                  2039,
                  27
                ],
                [
                  2041,
                  23
                ],
                [
                  2043,
                  26
                ],
                [
                  2045,
                  26
                ],
                [
                  2047,
                  26
                ],
                [
                  2049,
                  24
                ],
                [
                  2051,
                  32
                ],
                [
                  2052,
                  32
                ],
                [
                  2054,
                  29
                ],
                [
                  2055,
                  29
                ],
                [
                  2058,
                  12
                ]
              ],
              "doc": " Public: This class represents all essential editing state for a single\n{TextBuffer}, including cursor and selection positions, folds, and soft wraps.\nIf you're manipulating the state of an editor, use this class. If you're\ninterested in the visual appearance of editors, use {EditorView} instead.\n\nA single {TextBuffer} can belong to multiple editors. For example, if the\nsame file is open in two different panes, Atom creates a separate editor for\neach pane. If the buffer is manipulated the changes are reflected in both\neditors, but each maintains its own cursor position, folded lines, etc.\n\n## Accessing Editor Instances\n\nThe easiest way to get hold of `Editor` objects is by registering a callback\nwith `::eachEditor` on the `atom.workspace` global. Your callback will then\nbe called with all current editor instances and also when any editor is\ncreated in the future.\n\n```coffeescript\n  atom.workspace.eachEditor (editor) ->\n    editor.insertText('Hello World')\n```\n\n## Buffer vs. Screen Coordinates\n\nBecause editors support folds and soft-wrapping, the lines on screen don't\nalways match the lines in the buffer. For example, a long line that soft wraps\ntwice renders as three lines on screen, but only represents one line in the\nbuffer. Similarly, if rows 5-10 are folded, then row 6 on screen corresponds\nto row 11 in the buffer.\n\nYour choice of coordinates systems will depend on what you're trying to\nachieve. For example, if you're writing a command that jumps the cursor up or\ndown by 10 lines, you'll want to use screen coordinates because the user\nprobably wants to skip lines *on screen*. However, if you're writing a package\nthat jumps between method definitions, you'll want to work in buffer\ncoordinates.\n\n**When in doubt, just default to buffer coordinates**, then experiment with\nsoft wraps and folds to ensure your code interacts with them correctly.\n\n## Common Tasks\n\nThis is a subset of methods on this class. Refer to the complete summary for\nits full capabilities.\n\n### Cursors\n- {::setCursorBufferPosition}\n- {::setCursorScreenPosition}\n- {::moveCursorUp}\n- {::moveCursorDown}\n- {::moveCursorLeft}\n- {::moveCursorRight}\n- {::moveCursorToBeginningOfWord}\n- {::moveCursorToEndOfWord}\n- {::moveCursorToPreviousWordBoundary}\n- {::moveCursorToNextWordBoundary}\n- {::moveCursorToBeginningOfNextWord}\n- {::moveCursorToBeginningOfLine}\n- {::moveCursorToEndOfLine}\n- {::moveCursorToFirstCharacterOfLine}\n- {::moveCursorToTop}\n- {::moveCursorToBottom}\n\n### Selections\n- {::getSelectedBufferRange}\n- {::getSelectedBufferRanges}\n- {::setSelectedBufferRange}\n- {::setSelectedBufferRanges}\n- {::selectUp}\n- {::selectDown}\n- {::selectLeft}\n- {::selectRight}\n- {::selectToBeginningOfWord}\n- {::selectToEndOfWord}\n- {::selectToPreviousWordBoundary}\n- {::selectToNextWordBoundary}\n- {::selectWord}\n- {::selectToBeginningOfLine}\n- {::selectToEndOfLine}\n- {::selectToFirstCharacterOfLine}\n- {::selectToTop}\n- {::selectToBottom}\n- {::selectAll}\n- {::addSelectionForBufferRange}\n- {::addSelectionAbove}\n- {::addSelectionBelow}\n- {::splitSelectionsIntoLines}\n\n### Manipulating Text\n- {::getText}\n- {::getSelectedText}\n- {::setText}\n- {::setTextInBufferRange}\n- {::insertText}\n- {::insertNewline}\n- {::insertNewlineAbove}\n- {::insertNewlineBelow}\n- {::backspace}\n- {::deleteToBeginningOfWord}\n- {::deleteToBeginningOfLine}\n- {::delete}\n- {::deleteToEndOfLine}\n- {::deleteToEndOfWord}\n- {::deleteLine}\n- {::cutSelectedText}\n- {::cutToEndOfLine}\n- {::copySelectedText}\n- {::pasteText}\n\n### Undo, Redo, and Transactions\n- {::undo}\n- {::redo}\n- {::transact}\n- {::abortTransaction}\n\n### Markers\n- {::markBufferRange}\n- {::markScreenRange}\n- {::getMarker}\n- {::findMarkers}\n\n### Decorations\n- {::decorateMarker}\n- {::decorationsForScreenRowRange} ",
              "range": [
                [
                  138,
                  0
                ],
                [
                  2060,
                  16
                ]
              ]
            }
          },
          "143": {
            "17": {
              "name": "deserializing",
              "type": "primitive",
              "range": [
                [
                  143,
                  17
                ],
                [
                  143,
                  21
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "144": {
            "32": {
              "name": "callDisplayBufferCreatedHook",
              "type": "primitive",
              "range": [
                [
                  144,
                  32
                ],
                [
                  144,
                  36
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "145": {
            "18": {
              "name": "registerEditor",
              "type": "primitive",
              "range": [
                [
                  145,
                  18
                ],
                [
                  145,
                  22
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "146": {
            "10": {
              "name": "buffer",
              "type": "primitive",
              "range": [
                [
                  146,
                  10
                ],
                [
                  146,
                  13
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "147": {
            "16": {
              "name": "languageMode",
              "type": "primitive",
              "range": [
                [
                  147,
                  16
                ],
                [
                  147,
                  19
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "148": {
            "11": {
              "name": "cursors",
              "type": "primitive",
              "range": [
                [
                  148,
                  11
                ],
                [
                  148,
                  14
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "149": {
            "14": {
              "name": "selections",
              "type": "primitive",
              "range": [
                [
                  149,
                  14
                ],
                [
                  149,
                  17
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "150": {
            "28": {
              "name": "suppressSelectionMerging",
              "type": "primitive",
              "range": [
                [
                  150,
                  28
                ],
                [
                  150,
                  32
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "151": {
            "20": {
              "name": "updateBatchDepth",
              "type": "primitive",
              "range": [
                [
                  151,
                  20
                ],
                [
                  151,
                  20
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "152": {
            "26": {
              "name": "selectionFlashDuration",
              "type": "primitive",
              "range": [
                [
                  152,
                  26
                ],
                [
                  152,
                  28
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "161": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  161,
                  15
                ],
                [
                  190,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "190": {
            "19": {
              "name": "serializeParams",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  190,
                  19
                ],
                [
                  197,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "197": {
            "21": {
              "name": "deserializeParams",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "params"
              ],
              "range": [
                [
                  197,
                  21
                ],
                [
                  202,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "202": {
            "21": {
              "name": "subscribeToBuffer",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  202,
                  21
                ],
                [
                  215,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "215": {
            "28": {
              "name": "subscribeToDisplayBuffer",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  215,
                  28
                ],
                [
                  228,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "228": {
            "16": {
              "name": "getViewClass",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  228,
                  16
                ],
                [
                  234,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "234": {
            "13": {
              "name": "destroyed",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  234,
                  13
                ],
                [
                  242,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "242": {
            "8": {
              "name": "copy",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  242,
                  8
                ],
                [
                  258,
                  1
                ]
              ],
              "doc": "Private: Create an {Editor} with its initial state based on this object "
            }
          },
          "258": {
            "12": {
              "name": "getTitle",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  258,
                  12
                ],
                [
                  271,
                  1
                ]
              ],
              "doc": " Public: Get the title the editor's title for display in other parts of the\nUI such as the tabs.\n\nIf the editor's buffer is saved, its title is the file name. If it is\nunsaved, its title is \"untitled\".\n\nReturns a {String}. "
            }
          },
          "271": {
            "16": {
              "name": "getLongTitle",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  271,
                  16
                ],
                [
                  281,
                  1
                ]
              ],
              "doc": " Public: Get the editor's long title for display in other parts of the UI\nsuch as the window title.\n\nIf the editor's buffer is saved, its long title is formatted as\n\"<filename> - <directory>\". If it is unsaved, its title is \"untitled\"\n\nReturns a {String}. "
            }
          },
          "281": {
            "14": {
              "name": "setVisible",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "visible"
              ],
              "range": [
                [
                  281,
                  14
                ],
                [
                  281,
                  60
                ]
              ],
              "doc": "Private: Controls visibility based on the given {Boolean}. "
            }
          },
          "288": {
            "25": {
              "name": "setEditorWidthInChars",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "editorWidthInChars"
              ],
              "range": [
                [
                  288,
                  25
                ],
                [
                  292,
                  1
                ]
              ],
              "doc": " Private: Set the number of characters that can be displayed horizontally in the\neditor.\n\neditorWidthInChars - A {Number} representing the width of the {EditorView}\nin characters. "
            }
          },
          "292": {
            "21": {
              "name": "getSoftWrapColumn",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  292,
                  21
                ],
                [
                  292,
                  57
                ]
              ],
              "doc": "Public: Sets the column at which column will soft wrap "
            }
          },
          "296": {
            "15": {
              "name": "getSoftTabs",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  296,
                  15
                ],
                [
                  296,
                  26
                ]
              ],
              "doc": " Public: Returns a {Boolean} indicating whether softTabs are enabled for this\neditor. "
            }
          },
          "301": {
            "15": {
              "name": "setSoftTabs",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  301,
                  15
                ],
                [
                  301,
                  38
                ]
              ],
              "doc": " Public: Enable or disable soft tabs for this editor.\n\nsoftTabs - A {Boolean} "
            }
          },
          "304": {
            "18": {
              "name": "toggleSoftTabs",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  304,
                  18
                ],
                [
                  304,
                  52
                ]
              ],
              "doc": "Public: Toggle soft tabs for this editor "
            }
          },
          "307": {
            "15": {
              "name": "getSoftWrap",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  307,
                  15
                ],
                [
                  307,
                  45
                ]
              ],
              "doc": "Public: Get whether soft wrap is enabled for this editor. "
            }
          },
          "312": {
            "15": {
              "name": "setSoftWrap",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "softWrap"
              ],
              "range": [
                [
                  312,
                  15
                ],
                [
                  312,
                  64
                ]
              ],
              "doc": " Public: Enable or disable soft wrap for this editor.\n\nsoftWrap - A {Boolean} "
            }
          },
          "315": {
            "18": {
              "name": "toggleSoftWrap",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  315,
                  18
                ],
                [
                  315,
                  52
                ]
              ],
              "doc": "Public: Toggle soft wrap for this editor "
            }
          },
          "323": {
            "14": {
              "name": "getTabText",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  323,
                  14
                ],
                [
                  323,
                  37
                ]
              ],
              "doc": " Public: Get the text representing a single level of indent.\n\nIf soft tabs are enabled, the text is composed of N spaces, where N is the\ntab length. Otherwise the text is a tab character (`\\t`).\n\nReturns a {String}. "
            }
          },
          "328": {
            "16": {
              "name": "getTabLength",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  328,
                  16
                ],
                [
                  328,
                  47
                ]
              ],
              "doc": " Public: Get the on-screen length of tab characters.\n\nReturns a {Number}. "
            }
          },
          "331": {
            "16": {
              "name": "setTabLength",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "tabLength"
              ],
              "range": [
                [
                  331,
                  16
                ],
                [
                  331,
                  68
                ]
              ],
              "doc": "Public: Set the on-screen length of tab characters. "
            }
          },
          "339": {
            "16": {
              "name": "usesSoftTabs",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  339,
                  16
                ],
                [
                  361,
                  1
                ]
              ],
              "doc": " Public: Determine if the buffer uses hard or soft tabs.\n\nReturns `true` if the first non-comment line with leading whitespace starts\nwith a space character. Returns `false` if it starts with a hard tab (`\\t`).\n\nReturns a {Boolean}, "
            }
          },
          "361": {
            "22": {
              "name": "clipBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferPosition"
              ],
              "range": [
                [
                  361,
                  22
                ],
                [
                  361,
                  77
                ]
              ],
              "doc": " Public: Clip the given {Point} to a valid position in the buffer.\n\nIf the given {Point} describes a position that is actually reachable by the\ncursor based on the current contents of the buffer, it is returned\nunchanged. If the {Point} does not describe a valid position, the closest\nvalid position is returned instead.\n\nFor example:\n  * `[-1, -1]` is converted to `[0, 0]`.\n  * If the line at row 2 is 10 long, `[2, Infinity]` is converted to\n    `[2, 10]`.\n\nbufferPosition - The {Point} representing the position to clip.\n\nReturns a {Point}. "
            }
          },
          "369": {
            "19": {
              "name": "clipBufferRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "range"
              ],
              "range": [
                [
                  369,
                  19
                ],
                [
                  369,
                  53
                ]
              ],
              "doc": " Public: Clip the start and end of the given range to valid positions in the\nbuffer. See {::clipBufferPosition} for more information.\n\nrange - The {Range} to clip.\n\nReturns a {Range}. "
            }
          },
          "381": {
            "27": {
              "name": "indentationForBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRow"
              ],
              "range": [
                [
                  381,
                  27
                ],
                [
                  396,
                  1
                ]
              ],
              "doc": " Public: Get the indentation level of the given a buffer row.\n\nReturns how deeply the given row is indented based on the soft tabs and\ntab length settings of this editor. Note that if soft tabs are enabled and\nthe tab length is 2, a row with 4 leading spaces would have an indentation\nlevel of 2.\n\nbufferRow - A {Number} indicating the buffer row.\n\nReturns a {Number}. "
            }
          },
          "396": {
            "30": {
              "name": "setIndentationForBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRow",
                "newLevel",
                null
              ],
              "range": [
                [
                  396,
                  30
                ],
                [
                  414,
                  1
                ]
              ],
              "doc": " Public: Set the indentation level for the given buffer row.\n\nInserts or removes hard tabs or spaces based on the soft tabs and tab length\nsettings of this editor in order to bring it to the given indentation level.\nNote that if soft tabs are enabled and the tab length is 2, a row with 4\nleading spaces would have an indentation level of 2.\n\nbufferRow - A {Number} indicating the buffer row.\nnewLevel - A {Number} indicating the new indentation level.\noptions - An {Object} with the following keys:\n  :preserveLeadingWhitespace - true to preserve any whitespace already at\n                               the beginning of the line (default: false). "
            }
          },
          "414": {
            "22": {
              "name": "indentLevelForLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "line"
              ],
              "range": [
                [
                  414,
                  22
                ],
                [
                  418,
                  1
                ]
              ],
              "doc": " Public: Get the indentation level of the given line of text.\n\nReturns how deeply the given line is indented based on the soft tabs and\ntab length settings of this editor. Note that if soft tabs are enabled and\nthe tab length is 2, a row with 4 leading spaces would have an indentation\nlevel of 2.\n\nline - A {String} representing a line of text.\n\nReturns a {Number}. "
            }
          },
          "418": {
            "21": {
              "name": "buildIndentString",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "number",
                "column"
              ],
              "range": [
                [
                  418,
                  21
                ],
                [
                  428,
                  1
                ]
              ],
              "doc": "Private: Constructs the string used for tabs. "
            }
          },
          "428": {
            "8": {
              "name": "save",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  428,
                  8
                ],
                [
                  428,
                  24
                ]
              ],
              "doc": " Public: Saves the editor's text buffer.\n\nSee {TextBuffer::save} for more details. "
            }
          },
          "435": {
            "10": {
              "name": "saveAs",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "filePath"
              ],
              "range": [
                [
                  435,
                  10
                ],
                [
                  435,
                  47
                ]
              ],
              "doc": " Public: Saves the editor's text buffer as the given path.\n\nSee {TextBuffer::saveAs} for more details.\n\nfilePath - A {String} path. "
            }
          },
          "437": {
            "16": {
              "name": "checkoutHead",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  437,
                  16
                ],
                [
                  442,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "442": {
            "23": {
              "name": "copyPathToClipboard",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  442,
                  23
                ],
                [
                  447,
                  1
                ]
              ],
              "doc": "Private: Copies the current file path to the native clipboard. "
            }
          },
          "447": {
            "11": {
              "name": "getPath",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  447,
                  11
                ],
                [
                  447,
                  30
                ]
              ],
              "doc": "Public: Returns the {String} path of this editor's text buffer. "
            }
          },
          "450": {
            "11": {
              "name": "getText",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  450,
                  11
                ],
                [
                  450,
                  30
                ]
              ],
              "doc": "Public: Returns a {String} representing the entire contents of the editor. "
            }
          },
          "453": {
            "11": {
              "name": "setText",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "text"
              ],
              "range": [
                [
                  453,
                  11
                ],
                [
                  453,
                  41
                ]
              ],
              "doc": "Public: Replaces the entire contents of the buffer with the given {String}. "
            }
          },
          "458": {
            "18": {
              "name": "getTextInRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "range"
              ],
              "range": [
                [
                  458,
                  18
                ],
                [
                  458,
                  57
                ]
              ],
              "doc": " Private: Get the text in the given {Range}.\n\nReturns a {String}. "
            }
          },
          "461": {
            "16": {
              "name": "getLineCount",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  461,
                  16
                ],
                [
                  461,
                  40
                ]
              ],
              "doc": "Public: Returns a {Number} representing the number of lines in the editor. "
            }
          },
          "464": {
            "13": {
              "name": "getBuffer",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  464,
                  13
                ],
                [
                  464,
                  22
                ]
              ],
              "doc": "Private: Retrieves the current {TextBuffer}. "
            }
          },
          "467": {
            "10": {
              "name": "getUri",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  467,
                  10
                ],
                [
                  467,
                  28
                ]
              ],
              "doc": "Public: Retrieves the current buffer's URI. "
            }
          },
          "470": {
            "20": {
              "name": "isBufferRowBlank",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRow"
              ],
              "range": [
                [
                  470,
                  20
                ],
                [
                  470,
                  63
                ]
              ],
              "doc": "Private: {Delegates to: TextBuffer.isRowBlank} "
            }
          },
          "473": {
            "24": {
              "name": "isBufferRowCommented",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRow"
              ],
              "range": [
                [
                  473,
                  24
                ],
                [
                  479,
                  1
                ]
              ],
              "doc": "Public: Determine if the given row is entirely a comment "
            }
          },
          "479": {
            "25": {
              "name": "nextNonBlankBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRow"
              ],
              "range": [
                [
                  479,
                  25
                ],
                [
                  479,
                  73
                ]
              ],
              "doc": "Private: {Delegates to: TextBuffer.nextNonBlankRow} "
            }
          },
          "482": {
            "24": {
              "name": "getEofBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  482,
                  24
                ],
                [
                  482,
                  50
                ]
              ],
              "doc": "Private: {Delegates to: TextBuffer.getEndPosition} "
            }
          },
          "486": {
            "20": {
              "name": "getLastBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  486,
                  20
                ],
                [
                  486,
                  42
                ]
              ],
              "doc": " Public: Returns a {Number} representing the last zero-indexed buffer row\nnumber of the editor. "
            }
          },
          "494": {
            "27": {
              "name": "bufferRangeForBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "row",
                null
              ],
              "range": [
                [
                  494,
                  27
                ],
                [
                  494,
                  96
                ]
              ],
              "doc": " Private: Returns the range for the given buffer row.\n\nrow - A row {Number}.\noptions - An options hash with an `includeNewline` key.\n\nReturns a {Range}. "
            }
          },
          "500": {
            "20": {
              "name": "lineForBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "row"
              ],
              "range": [
                [
                  500,
                  20
                ],
                [
                  500,
                  51
                ]
              ],
              "doc": " Public: Returns a {String} representing the contents of the line at the\ngiven buffer row.\n\nrow - A {Number} representing a zero-indexed buffer row. "
            }
          },
          "506": {
            "26": {
              "name": "lineLengthForBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "row"
              ],
              "range": [
                [
                  506,
                  26
                ],
                [
                  506,
                  63
                ]
              ],
              "doc": " Public: Returns a {Number} representing the line length for the given\nbuffer row, exclusive of its line-ending character(s).\n\nrow - A {Number} indicating the buffer row. "
            }
          },
          "509": {
            "8": {
              "name": "scan",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "args"
              ],
              "range": [
                [
                  509,
                  8
                ],
                [
                  509,
                  41
                ]
              ],
              "doc": "Private: {Delegates to: TextBuffer.scan} "
            }
          },
          "512": {
            "21": {
              "name": "scanInBufferRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "args"
              ],
              "range": [
                [
                  512,
                  21
                ],
                [
                  512,
                  61
                ]
              ],
              "doc": "Private: {Delegates to: TextBuffer.scanInRange} "
            }
          },
          "515": {
            "30": {
              "name": "backwardsScanInBufferRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "args"
              ],
              "range": [
                [
                  515,
                  30
                ],
                [
                  515,
                  79
                ]
              ],
              "doc": "Private: {Delegates to: TextBuffer.backwardsScanInRange} "
            }
          },
          "518": {
            "14": {
              "name": "isModified",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  518,
                  14
                ],
                [
                  518,
                  36
                ]
              ],
              "doc": "Private: {Delegates to: TextBuffer.isModified} "
            }
          },
          "520": {
            "11": {
              "name": "isEmpty",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  520,
                  11
                ],
                [
                  520,
                  30
                ]
              ],
              "doc": "~Private~"
            }
          },
          "524": {
            "22": {
              "name": "shouldPromptToSave",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  524,
                  22
                ],
                [
                  524,
                  74
                ]
              ],
              "doc": " Public: Determine whether the user should be prompted to save before closing\nthis editor. "
            }
          },
          "536": {
            "35": {
              "name": "screenPositionForBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferPosition",
                "options"
              ],
              "range": [
                [
                  536,
                  35
                ],
                [
                  536,
                  134
                ]
              ],
              "doc": " Public: Convert a position in buffer-coordinates to screen-coordinates.\n\nThe position is clipped via {::clipBufferPosition} prior to the conversion.\nThe position is also clipped via {::clipScreenPosition} following the\nconversion, which only makes a difference when `options` are supplied.\n\nbufferPosition - A {Point} or {Array} of [row, column].\noptions - An options hash for {::clipScreenPosition}.\n\nReturns a {Point}. "
            }
          },
          "546": {
            "35": {
              "name": "bufferPositionForScreenPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenPosition",
                "options"
              ],
              "range": [
                [
                  546,
                  35
                ],
                [
                  546,
                  134
                ]
              ],
              "doc": " Public: Convert a position in screen-coordinates to buffer-coordinates.\n\nThe position is clipped via {::clipScreenPosition} prior to the conversion.\n\nbufferPosition - A {Point} or {Array} of [row, column].\noptions - An options hash for {::clipScreenPosition}.\n\nReturns a {Point}. "
            }
          },
          "551": {
            "29": {
              "name": "screenRangeForBufferRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRange"
              ],
              "range": [
                [
                  551,
                  29
                ],
                [
                  551,
                  98
                ]
              ],
              "doc": " Public: Convert a range in buffer-coordinates to screen-coordinates.\n\nReturns a {Range}. "
            }
          },
          "556": {
            "29": {
              "name": "bufferRangeForScreenRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenRange"
              ],
              "range": [
                [
                  556,
                  29
                ],
                [
                  556,
                  98
                ]
              ],
              "doc": " Public: Convert a range in screen-coordinates to buffer-coordinates.\n\nReturns a {Range}. "
            }
          },
          "573": {
            "22": {
              "name": "clipScreenPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenPosition",
                "options"
              ],
              "range": [
                [
                  573,
                  22
                ],
                [
                  573,
                  108
                ]
              ],
              "doc": " Public: Clip the given {Point} to a valid position on screen.\n\nIf the given {Point} describes a position that is actually reachable by the\ncursor based on the current contents of the screen, it is returned\nunchanged. If the {Point} does not describe a valid position, the closest\nvalid position is returned instead.\n\nFor example:\n  * `[-1, -1]` is converted to `[0, 0]`.\n  * If the line at screen row 2 is 10 long, `[2, Infinity]` is converted to\n    `[2, 10]`.\n\nbufferPosition - The {Point} representing the position to clip.\n\nReturns a {Point}. "
            }
          },
          "576": {
            "20": {
              "name": "lineForScreenRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "row"
              ],
              "range": [
                [
                  576,
                  20
                ],
                [
                  576,
                  58
                ]
              ],
              "doc": "Private: {Delegates to: DisplayBuffer.lineForRow} "
            }
          },
          "579": {
            "22": {
              "name": "linesForScreenRows",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "start",
                "end"
              ],
              "range": [
                [
                  579,
                  22
                ],
                [
                  579,
                  76
                ]
              ],
              "doc": "Private: {Delegates to: DisplayBuffer.linesForRows} "
            }
          },
          "582": {
            "22": {
              "name": "getScreenLineCount",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  582,
                  22
                ],
                [
                  582,
                  53
                ]
              ],
              "doc": "Private: {Delegates to: DisplayBuffer.getLineCount} "
            }
          },
          "585": {
            "26": {
              "name": "getMaxScreenLineLength",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  585,
                  26
                ],
                [
                  585,
                  61
                ]
              ],
              "doc": "Private: {Delegates to: DisplayBuffer.getMaxLineLength} "
            }
          },
          "588": {
            "20": {
              "name": "getLastScreenRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  588,
                  20
                ],
                [
                  588,
                  49
                ]
              ],
              "doc": "Private: {Delegates to: DisplayBuffer.getLastRow} "
            }
          },
          "591": {
            "27": {
              "name": "bufferRowsForScreenRows",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "startRow",
                "endRow"
              ],
              "range": [
                [
                  591,
                  27
                ],
                [
                  591,
                  104
                ]
              ],
              "doc": "Private: {Delegates to: DisplayBuffer.bufferRowsForScreenRows} "
            }
          },
          "593": {
            "25": {
              "name": "bufferRowForScreenRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "row"
              ],
              "range": [
                [
                  593,
                  25
                ],
                [
                  593,
                  74
                ]
              ],
              "doc": "~Private~"
            }
          },
          "605": {
            "27": {
              "name": "scopesForBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferPosition"
              ],
              "range": [
                [
                  605,
                  27
                ],
                [
                  605,
                  100
                ]
              ],
              "doc": " Public: Get the syntactic scopes for the given position in buffer\ncoordinates.\n\nFor example, if called with a position inside the parameter list of an\nanonymous CoffeeScript function, the method returns the following array:\n`[\"source.coffee\", \"meta.inline.function.coffee\", \"variable.parameter.function.coffee\"]`\n\nbufferPosition - A {Point} or {Array} of [row, column].\n\nReturns an {Array} of {String}s. "
            }
          },
          "614": {
            "31": {
              "name": "bufferRangeForScopeAtCursor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "selector"
              ],
              "range": [
                [
                  614,
                  31
                ],
                [
                  618,
                  1
                ]
              ],
              "doc": " Public: Get the range in buffer coordinates of all tokens surrounding the\ncursor that match the given scope selector.\n\nFor example, if you wanted to find the string surrounding the cursor, you\ncould call `editor.bufferRangeForScopeAtCursor(\".string.quoted\")`.\n\nReturns a {Range}. "
            }
          },
          "618": {
            "26": {
              "name": "tokenForBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferPosition"
              ],
              "range": [
                [
                  618,
                  26
                ],
                [
                  618,
                  98
                ]
              ],
              "doc": "Private: {Delegates to: DisplayBuffer.tokenForBufferPosition} "
            }
          },
          "624": {
            "19": {
              "name": "getCursorScopes",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  624,
                  19
                ],
                [
                  624,
                  45
                ]
              ],
              "doc": " Public: Get the syntactic scopes for the most recently added cursor's\nposition. See {::scopesForBufferPosition} for more information.\n\nReturns an {Array} of {String}s. "
            }
          },
          "626": {
            "18": {
              "name": "logCursorScope",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  626,
                  18
                ],
                [
                  633,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "633": {
            "14": {
              "name": "insertText",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "text",
                "options"
              ],
              "range": [
                [
                  633,
                  14
                ],
                [
                  639,
                  1
                ]
              ],
              "doc": " Public: For each selection, replace the selected text with the given text.\n\ntext - A {String} representing the text to insert.\noptions - See {Selection::insertText}. "
            }
          },
          "639": {
            "17": {
              "name": "insertNewline",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  639,
                  17
                ],
                [
                  643,
                  1
                ]
              ],
              "doc": "Public: For each selection, replace the selected text with a newline. "
            }
          },
          "643": {
            "22": {
              "name": "insertNewlineBelow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  643,
                  22
                ],
                [
                  649,
                  1
                ]
              ],
              "doc": "Public: For each cursor, insert a newline at beginning the following line. "
            }
          },
          "649": {
            "22": {
              "name": "insertNewlineAbove",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  649,
                  22
                ],
                [
                  668,
                  1
                ]
              ],
              "doc": "Public: For each cursor, insert a newline at the end of the preceding line. "
            }
          },
          "668": {
            "10": {
              "name": "indent",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "options"
              ],
              "range": [
                [
                  668,
                  10
                ],
                [
                  674,
                  1
                ]
              ],
              "doc": " Private: Indent all lines intersecting selections. See {Selection::indent} for more\ninformation. "
            }
          },
          "674": {
            "13": {
              "name": "backspace",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  674,
                  13
                ],
                [
                  678,
                  1
                ]
              ],
              "doc": " Public: For each selection, if the selection is empty, delete the character\npreceding the cursor. Otherwise delete the selected text. "
            }
          },
          "678": {
            "30": {
              "name": "backspaceToBeginningOfWord",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  678,
                  30
                ],
                [
                  683,
                  1
                ]
              ],
              "doc": "Deprecated: Use {::deleteToBeginningOfWord} instead. "
            }
          },
          "683": {
            "30": {
              "name": "backspaceToBeginningOfLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  683,
                  30
                ],
                [
                  690,
                  1
                ]
              ],
              "doc": "Deprecated: Use {::deleteToBeginningOfLine} instead. "
            }
          },
          "690": {
            "27": {
              "name": "deleteToBeginningOfWord",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  690,
                  27
                ],
                [
                  696,
                  1
                ]
              ],
              "doc": " Public: For each selection, if the selection is empty, delete all characters\nof the containing word that precede the cursor. Otherwise delete the\nselected text. "
            }
          },
          "696": {
            "27": {
              "name": "deleteToBeginningOfLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  696,
                  27
                ],
                [
                  701,
                  1
                ]
              ],
              "doc": " Public: For each selection, if the selection is empty, delete all characters\nof the containing line that precede the cursor. Otherwise delete the\nselected text. "
            }
          },
          "701": {
            "10": {
              "name": "delete",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  701,
                  10
                ],
                [
                  708,
                  1
                ]
              ]
            }
          },
          "708": {
            "21": {
              "name": "deleteToEndOfLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  708,
                  21
                ],
                [
                  714,
                  1
                ]
              ],
              "doc": " Public: For each selection, if the selection is not empty, deletes the\nselection; otherwise, deletes all characters of the containing line\nfollowing the cursor. If the cursor is already at the end of the line,\ndeletes the following newline. "
            }
          },
          "714": {
            "21": {
              "name": "deleteToEndOfWord",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  714,
                  21
                ],
                [
                  718,
                  1
                ]
              ],
              "doc": " Public: For each selection, if the selection is empty, delete all characters\nof the containing word following the cursor. Otherwise delete the selected\ntext. "
            }
          },
          "718": {
            "14": {
              "name": "deleteLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  718,
                  14
                ],
                [
                  722,
                  1
                ]
              ],
              "doc": "Public: Delete all lines intersecting selections. "
            }
          },
          "722": {
            "22": {
              "name": "indentSelectedRows",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  722,
                  22
                ],
                [
                  726,
                  1
                ]
              ],
              "doc": "Public: Indent rows intersecting selections by one level. "
            }
          },
          "726": {
            "23": {
              "name": "outdentSelectedRows",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  726,
                  23
                ],
                [
                  734,
                  1
                ]
              ],
              "doc": "Public: Outdent rows intersecting selections by one level. "
            }
          },
          "734": {
            "33": {
              "name": "toggleLineCommentsInSelection",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  734,
                  33
                ],
                [
                  739,
                  1
                ]
              ],
              "doc": " Public: Toggle line comments for rows intersecting selections.\n\nIf the current grammar doesn't support comments, does nothing.\n\nReturns an {Array} of the commented {Range}s. "
            }
          },
          "739": {
            "26": {
              "name": "autoIndentSelectedRows",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  739,
                  26
                ],
                [
                  744,
                  1
                ]
              ],
              "doc": " Public: Indent rows intersecting selections based on the grammar's suggested\nindent level. "
            }
          },
          "744": {
            "30": {
              "name": "normalizeTabsInBufferRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRange"
              ],
              "range": [
                [
                  744,
                  30
                ],
                [
                  751,
                  1
                ]
              ],
              "doc": " Private: If soft tabs are enabled, convert all hard tabs to soft tabs in the given\n{Range}. "
            }
          },
          "751": {
            "18": {
              "name": "cutToEndOfLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  751,
                  18
                ],
                [
                  758,
                  1
                ]
              ],
              "doc": " Public: For each selection, if the selection is empty, cut all characters\nof the containing line following the cursor. Otherwise cut the selected\ntext. "
            }
          },
          "758": {
            "19": {
              "name": "cutSelectedText",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  758,
                  19
                ],
                [
                  765,
                  1
                ]
              ],
              "doc": "Public: For each selection, cut the selected text. "
            }
          },
          "765": {
            "20": {
              "name": "copySelectedText",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  765,
                  20
                ],
                [
                  779,
                  1
                ]
              ],
              "doc": "Public: For each selection, copy the selected text. "
            }
          },
          "779": {
            "13": {
              "name": "pasteText",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "options"
              ],
              "range": [
                [
                  779,
                  13
                ],
                [
                  798,
                  1
                ]
              ],
              "doc": " Public: For each selection, replace the selected text with the contents of\nthe clipboard.\n\nIf the clipboard contains the same number of selections as the current\neditor, each selection will be replaced with the content of the\ncorresponding clipboard selection text.\n\noptions - See {Selection::insertText}. "
            }
          },
          "798": {
            "8": {
              "name": "undo",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  798,
                  8
                ],
                [
                  803,
                  1
                ]
              ],
              "doc": "Public: Undo the last change. "
            }
          },
          "803": {
            "8": {
              "name": "redo",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  803,
                  8
                ],
                [
                  812,
                  1
                ]
              ],
              "doc": "Public: Redo the last change. "
            }
          },
          "812": {
            "18": {
              "name": "foldCurrentRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  812,
                  18
                ],
                [
                  817,
                  1
                ]
              ],
              "doc": " Public: Fold the most recent cursor's row based on its indentation level.\n\nThe fold will extend from the nearest preceding line with a lower\nindentation level up to the nearest following row with a lower indentation\nlevel. "
            }
          },
          "817": {
            "20": {
              "name": "unfoldCurrentRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  817,
                  20
                ],
                [
                  822,
                  1
                ]
              ],
              "doc": "Public: Unfold the most recent cursor's row by one level. "
            }
          },
          "822": {
            "21": {
              "name": "foldSelectedLines",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  822,
                  21
                ],
                [
                  826,
                  1
                ]
              ],
              "doc": "Public: For each selection, fold the rows it intersects. "
            }
          },
          "826": {
            "11": {
              "name": "foldAll",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  826,
                  11
                ],
                [
                  830,
                  1
                ]
              ],
              "doc": "Public: Fold all foldable lines. "
            }
          },
          "830": {
            "13": {
              "name": "unfoldAll",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  830,
                  13
                ],
                [
                  836,
                  1
                ]
              ],
              "doc": "Public: Unfold all existing folds. "
            }
          },
          "836": {
            "24": {
              "name": "foldAllAtIndentLevel",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "level"
              ],
              "range": [
                [
                  836,
                  24
                ],
                [
                  846,
                  1
                ]
              ],
              "doc": " Public: Fold all foldable lines at the given indent level.\n\nlevel - A {Number}. "
            }
          },
          "846": {
            "17": {
              "name": "foldBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRow"
              ],
              "range": [
                [
                  846,
                  17
                ],
                [
                  852,
                  1
                ]
              ],
              "doc": " Public: Fold the given row in buffer coordinates based on its indentation\nlevel.\n\nIf the given row is foldable, the fold will begin there. Otherwise, it will\nbegin at the first foldable row preceding the given row.\n\nbufferRow - A {Number}. "
            }
          },
          "852": {
            "19": {
              "name": "unfoldBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRow"
              ],
              "range": [
                [
                  852,
                  19
                ],
                [
                  862,
                  1
                ]
              ],
              "doc": " Public: Unfold all folds containing the given row in buffer coordinates.\n\nbufferRow - A {Number} "
            }
          },
          "862": {
            "25": {
              "name": "isFoldableAtBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRow"
              ],
              "range": [
                [
                  862,
                  25
                ],
                [
                  865,
                  1
                ]
              ],
              "doc": " Public: Determine whether the given row in buffer coordinates is foldable.\n\nA *foldable* row is a row that *starts* a row range that can be folded.\n\nbufferRow - A {Number}\n\nReturns a {Boolean}. "
            }
          },
          "865": {
            "25": {
              "name": "isFoldableAtScreenRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenRow"
              ],
              "range": [
                [
                  865,
                  25
                ],
                [
                  870,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "870": {
            "14": {
              "name": "createFold",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "startRow",
                "endRow"
              ],
              "range": [
                [
                  870,
                  14
                ],
                [
                  874,
                  1
                ]
              ],
              "doc": "TODO: Rename to foldRowRange? "
            }
          },
          "874": {
            "21": {
              "name": "destroyFoldWithId",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "id"
              ],
              "range": [
                [
                  874,
                  21
                ],
                [
                  878,
                  1
                ]
              ],
              "doc": "Private: {Delegates to: DisplayBuffer.destroyFoldWithId} "
            }
          },
          "878": {
            "39": {
              "name": "destroyFoldsIntersectingBufferRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRange"
              ],
              "range": [
                [
                  878,
                  39
                ],
                [
                  884,
                  1
                ]
              ],
              "doc": "Private: Remove any {Fold}s found that intersect the given buffer row. "
            }
          },
          "884": {
            "25": {
              "name": "toggleFoldAtBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRow"
              ],
              "range": [
                [
                  884,
                  25
                ],
                [
                  893,
                  1
                ]
              ],
              "doc": " Public: Fold the given buffer row if it isn't currently folded, and unfold\nit otherwise. "
            }
          },
          "893": {
            "23": {
              "name": "isFoldedAtCursorRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  893,
                  23
                ],
                [
                  901,
                  1
                ]
              ],
              "doc": " Public: Determine whether the most recently added cursor's row is folded.\n\nReturns a {Boolean}. "
            }
          },
          "901": {
            "23": {
              "name": "isFoldedAtBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRow"
              ],
              "range": [
                [
                  901,
                  23
                ],
                [
                  909,
                  1
                ]
              ],
              "doc": " Public: Determine whether the given row in buffer coordinates is folded.\n\nbufferRow - A {Number}\n\nReturns a {Boolean}. "
            }
          },
          "909": {
            "23": {
              "name": "isFoldedAtScreenRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenRow"
              ],
              "range": [
                [
                  909,
                  23
                ],
                [
                  913,
                  1
                ]
              ],
              "doc": " Public: Determine whether the given row in screen coordinates is folded.\n\nscreenRow - A {Number}\n\nReturns a {Boolean}. "
            }
          },
          "913": {
            "34": {
              "name": "largestFoldContainingBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRow"
              ],
              "range": [
                [
                  913,
                  34
                ],
                [
                  917,
                  1
                ]
              ],
              "doc": "Private: {Delegates to: DisplayBuffer.largestFoldContainingBufferRow} "
            }
          },
          "917": {
            "34": {
              "name": "largestFoldStartingAtScreenRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenRow"
              ],
              "range": [
                [
                  917,
                  34
                ],
                [
                  921,
                  1
                ]
              ],
              "doc": "Private: {Delegates to: DisplayBuffer.largestFoldStartingAtScreenRow} "
            }
          },
          "921": {
            "34": {
              "name": "outermostFoldsInBufferRowRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "startRow",
                "endRow"
              ],
              "range": [
                [
                  921,
                  34
                ],
                [
                  926,
                  1
                ]
              ],
              "doc": "Private: {Delegates to: DisplayBuffer.outermostFoldsForBufferRowRange} "
            }
          },
          "926": {
            "14": {
              "name": "moveLineUp",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  926,
                  14
                ],
                [
                  979,
                  1
                ]
              ],
              "doc": " Private: Move lines intersection the most recent selection up by one row in screen\ncoordinates. "
            }
          },
          "979": {
            "16": {
              "name": "moveLineDown",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  979,
                  16
                ],
                [
                  1034,
                  1
                ]
              ],
              "doc": " Private: Move lines intersecting the most recent selection down by one row in screen\ncoordinates. "
            }
          },
          "1034": {
            "18": {
              "name": "duplicateLines",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1034,
                  18
                ],
                [
                  1060,
                  1
                ]
              ],
              "doc": "Private: Duplicate the most recent cursor's current line. "
            }
          },
          "1060": {
            "17": {
              "name": "duplicateLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1060,
                  17
                ],
                [
                  1072,
                  1
                ]
              ],
              "doc": "Deprecated: Use {::duplicateLines} instead. "
            }
          },
          "1072": {
            "22": {
              "name": "mutateSelectedText",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "fn"
              ],
              "range": [
                [
                  1072,
                  22
                ],
                [
                  1075,
                  1
                ]
              ],
              "doc": " Public: Mutate the text of all the selections in a single transaction.\n\nAll the changes made inside the given {Function} can be reverted with a\nsingle call to {::undo}.\n\nfn - A {Function} that will be called once for each {Selection}. The first\n     argument will be a {Selection} and the second argument will be the\n     {Number} index of that selection. "
            }
          },
          "1075": {
            "23": {
              "name": "replaceSelectedText",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "options",
                "fn"
              ],
              "range": [
                [
                  1075,
                  23
                ],
                [
                  1096,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1096": {
            "32": {
              "name": "decorationsForScreenRowRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "startScreenRow",
                "endScreenRow"
              ],
              "range": [
                [
                  1096,
                  32
                ],
                [
                  1137,
                  1
                ]
              ],
              "doc": " Public: Get all the decorations within a screen row range.\n\nstartScreenRow - the {Number} beginning screen row\nendScreenRow - the {Number} end screen row (inclusive)\n\nReturns an {Object} of decorations in the form\n `{1: [{id: 10, type: 'gutter', class: 'someclass'}], 2: ...}`\n  where the keys are {Marker} IDs, and the values are an array of decoration\n  params objects attached to the marker.\nReturns an empty object when no decorations are found "
            }
          },
          "1137": {
            "18": {
              "name": "decorateMarker",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "marker",
                "decorationParams"
              ],
              "range": [
                [
                  1137,
                  18
                ],
                [
                  1140,
                  1
                ]
              ],
              "doc": " Public: Adds a decoration that tracks a {Marker}. When the marker moves,\nis invalidated, or is destroyed, the decoration will be updated to reflect\nthe marker's state.\n\nThere are three types of supported decorations:\n* `line`: Adds your CSS `class` to the line nodes within the range\n    marked by the marker\n* `gutter`: Adds your CSS `class` to the line number nodes within the\n    range marked by the marker\n* `highlight`: Adds a new highlight div to the editor surrounding the\n    range marked by the marker. When the user selects text, the selection is\n    visualized with a highlight decoration internally. The structure of this\n    highlight will be:\n    ```html\n    <div class=\"highlight <your-class>\">\n      <!-- Will be one region for each row in the range. Spans 2 lines? There will be 2 regions. -->\n      <div class=\"region\"></div>\n    </div>\n    ```\n\nmarker - A {Marker} you want this decoration to follow.\ndecorationParams - An {Object} representing the decoration eg. `{type: 'gutter', class: 'linter-error'}`\n  :type - There are a few supported decoration types:\n    * `gutter`: Applies the decoration to the line numbers spanned by the marker.\n    * `line`: Applies the decoration to the lines spanned by the marker.\n    * `highlight`: Applies the decoration to a \"highlight\" behind the marked range.\n  :class - This CSS class will be applied to the decorated line number,\n    line, or highlight.\n  :onlyHead - If `true`, the decoration will only be applied to the head\n    of the marker. Only applicable to the `line` and `gutter` types.\n  :onlyEmpty - If `true`, the decoration will only be applied if the\n    associated marker is empty. Only applicable to the `line` and\n    `gutter` types.\n  :onlyNonEmpty - If `true`, the decoration will only be applied if the\n    associated marker is non-empty.  Only applicable to the `line` and\n    gutter types.\n\nReturns a {Decoration} object "
            }
          },
          "1140": {
            "19": {
              "name": "decorationForId",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "id"
              ],
              "range": [
                [
                  1140,
                  19
                ],
                [
                  1144,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1144": {
            "13": {
              "name": "getMarker",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "id"
              ],
              "range": [
                [
                  1144,
                  13
                ],
                [
                  1148,
                  1
                ]
              ],
              "doc": "Public: Get the {DisplayBufferMarker} for the given marker id. "
            }
          },
          "1148": {
            "14": {
              "name": "getMarkers",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1148,
                  14
                ],
                [
                  1170,
                  1
                ]
              ],
              "doc": "Public: Get all {DisplayBufferMarker}s. "
            }
          },
          "1170": {
            "15": {
              "name": "findMarkers",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "properties"
              ],
              "range": [
                [
                  1170,
                  15
                ],
                [
                  1179,
                  1
                ]
              ],
              "doc": " Public: Find all {DisplayBufferMarker}s that match the given properties.\n\nThis method finds markers based on the given properties. Markers can be\nassociated with custom properties that will be compared with basic equality.\nIn addition, there are several special properties that will be compared\nwith the range of the markers rather than their properties.\n\nproperties - An {Object} containing properties that each returned marker\n  must satisfy. Markers can be associated with custom properties, which are\n  compared with basic equality. In addition, several reserved properties\n  can be used to filter markers based on their current range:\n    :startBufferRow - Only include markers starting at this row in buffer\n      coordinates.\n    :endBufferRow - Only include markers ending at this row in buffer\n      coordinates.\n    :containsBufferRange - Only include markers containing this {Range} or\n      in range-compatible {Array} in buffer coordinates.\n    :containsBufferPosition - Only include markers containing this {Point}\n      or {Array} of `[row, column]` in buffer coordinates. "
            }
          },
          "1179": {
            "19": {
              "name": "markScreenRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "args"
              ],
              "range": [
                [
                  1179,
                  19
                ],
                [
                  1188,
                  1
                ]
              ],
              "doc": " Public: Mark the given range in screen coordinates.\n\nrange - A {Range} or range-compatible {Array}.\noptions - See {TextBuffer::markRange}.\n\nReturns a {DisplayBufferMarker}. "
            }
          },
          "1188": {
            "19": {
              "name": "markBufferRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "args"
              ],
              "range": [
                [
                  1188,
                  19
                ],
                [
                  1197,
                  1
                ]
              ],
              "doc": " Public: Mark the given range in buffer coordinates.\n\nrange - A {Range} or range-compatible {Array}.\noptions - See {TextBuffer::markRange}.\n\nReturns a {DisplayBufferMarker}. "
            }
          },
          "1197": {
            "22": {
              "name": "markScreenPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "args"
              ],
              "range": [
                [
                  1197,
                  22
                ],
                [
                  1206,
                  1
                ]
              ],
              "doc": " Public: Mark the given position in screen coordinates.\n\nposition - A {Point} or {Array} of `[row, column]`.\noptions - See {TextBuffer::markRange}.\n\nReturns a {DisplayBufferMarker}. "
            }
          },
          "1206": {
            "22": {
              "name": "markBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "args"
              ],
              "range": [
                [
                  1206,
                  22
                ],
                [
                  1210,
                  1
                ]
              ],
              "doc": " Public: Mark the given position in buffer coordinates.\n\nposition - A {Point} or {Array} of `[row, column]`.\noptions - See {TextBuffer::markRange}.\n\nReturns a {DisplayBufferMarker}. "
            }
          },
          "1210": {
            "17": {
              "name": "destroyMarker",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "args"
              ],
              "range": [
                [
                  1210,
                  17
                ],
                [
                  1216,
                  1
                ]
              ],
              "doc": "Private: {Delegates to: DisplayBuffer.destroyMarker} "
            }
          },
          "1216": {
            "18": {
              "name": "getMarkerCount",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1216,
                  18
                ],
                [
                  1220,
                  1
                ]
              ],
              "doc": " Public: Get the number of markers in this editor's buffer.\n\nReturns a {Number}. "
            }
          },
          "1220": {
            "22": {
              "name": "hasMultipleCursors",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1220,
                  22
                ],
                [
                  1224,
                  1
                ]
              ],
              "doc": "Public: Determine if there are multiple cursors. "
            }
          },
          "1224": {
            "14": {
              "name": "getCursors",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1224,
                  14
                ],
                [
                  1224,
                  38
                ]
              ],
              "doc": "Public: Get an Array of all {Cursor}s. "
            }
          },
          "1227": {
            "13": {
              "name": "getCursor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1227,
                  13
                ],
                [
                  1233,
                  1
                ]
              ],
              "doc": "Public: Get the most recently added {Cursor}. "
            }
          },
          "1233": {
            "29": {
              "name": "addCursorAtScreenPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenPosition"
              ],
              "range": [
                [
                  1233,
                  29
                ],
                [
                  1240,
                  1
                ]
              ],
              "doc": " Public: Add a cursor at the position in screen coordinates.\n\nReturns a {Cursor}. "
            }
          },
          "1240": {
            "29": {
              "name": "addCursorAtBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferPosition"
              ],
              "range": [
                [
                  1240,
                  29
                ],
                [
                  1245,
                  1
                ]
              ],
              "doc": " Public: Add a cursor at the given position in buffer coordinates.\n\nReturns a {Cursor}. "
            }
          },
          "1245": {
            "13": {
              "name": "addCursor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "marker"
              ],
              "range": [
                [
                  1245,
                  13
                ],
                [
                  1255,
                  1
                ]
              ],
              "doc": "Private: Add a cursor based on the given {DisplayBufferMarker}. "
            }
          },
          "1255": {
            "16": {
              "name": "removeCursor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "cursor"
              ],
              "range": [
                [
                  1255,
                  16
                ],
                [
                  1264,
                  1
                ]
              ],
              "doc": "Private: Remove the given cursor from this editor. "
            }
          },
          "1264": {
            "16": {
              "name": "addSelection",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "marker",
                "options"
              ],
              "range": [
                [
                  1264,
                  16
                ],
                [
                  1288,
                  1
                ]
              ],
              "doc": " Private: Add a {Selection} based on the given {DisplayBufferMarker}.\n\nmarker  - The {DisplayBufferMarker} to highlight\noptions - An {Object} that pertains to the {Selection} constructor.\n\nReturns the new {Selection}. "
            }
          },
          "1288": {
            "30": {
              "name": "addSelectionForBufferRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRange",
                "options"
              ],
              "range": [
                [
                  1288,
                  30
                ],
                [
                  1301,
                  1
                ]
              ],
              "doc": " Public: Add a selection for the given range in buffer coordinates.\n\nbufferRange - A {Range}\noptions - An options {Object}:\n  :reversed - A {Boolean} indicating whether to create the selection in a\n    reversed orientation.\n\nReturns the added {Selection}. "
            }
          },
          "1301": {
            "26": {
              "name": "setSelectedBufferRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRange",
                "options"
              ],
              "range": [
                [
                  1301,
                  26
                ],
                [
                  1311,
                  1
                ]
              ],
              "doc": " Public: Set the selected range in buffer coordinates. If there are multiple\nselections, they are reduced to a single selection with the given range.\n\nbufferRange - A {Range} or range-compatible {Array}.\noptions - An options {Object}:\n  :reversed - A {Boolean} indicating whether to create the selection in a\n    reversed orientation. "
            }
          },
          "1311": {
            "26": {
              "name": "setSelectedScreenRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenRange",
                "options"
              ],
              "range": [
                [
                  1311,
                  26
                ],
                [
                  1321,
                  1
                ]
              ],
              "doc": " Public: Set the selected range in screen coordinates. If there are multiple\nselections, they are reduced to a single selection with the given range.\n\nscreenRange - A {Range} or range-compatible {Array}.\noptions - An options {Object}:\n  :reversed - A {Boolean} indicating whether to create the selection in a\n    reversed orientation. "
            }
          },
          "1321": {
            "27": {
              "name": "setSelectedBufferRanges",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRanges",
                "options"
              ],
              "range": [
                [
                  1321,
                  27
                ],
                [
                  1336,
                  1
                ]
              ],
              "doc": " Public: Set the selected ranges in buffer coordinates. If there are multiple\nselections, they are replaced by new selections with the given ranges.\n\nbufferRanges - An {Array} of {Range}s or range-compatible {Array}s.\noptions - An options {Object}:\n  :reversed - A {Boolean} indicating whether to create the selection in a\n    reversed orientation. "
            }
          },
          "1336": {
            "19": {
              "name": "removeSelection",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "selection"
              ],
              "range": [
                [
                  1336,
                  19
                ],
                [
                  1342,
                  1
                ]
              ],
              "doc": "Private: Remove the given selection. "
            }
          },
          "1342": {
            "19": {
              "name": "clearSelections",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1342,
                  19
                ],
                [
                  1347,
                  1
                ]
              ],
              "doc": " Private: Reduce one or more selections to a single empty selection based on the most\nrecently added cursor. "
            }
          },
          "1347": {
            "25": {
              "name": "consolidateSelections",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1347,
                  25
                ],
                [
                  1355,
                  1
                ]
              ],
              "doc": "Private: Reduce multiple selections to the most recently added selection. "
            }
          },
          "1355": {
            "31": {
              "name": "selectionScreenRangeChanged",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "selection"
              ],
              "range": [
                [
                  1355,
                  31
                ],
                [
                  1361,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1361": {
            "17": {
              "name": "getSelections",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1361,
                  17
                ],
                [
                  1361,
                  44
                ]
              ],
              "doc": " Public: Get current {Selection}s.\n\nReturns: An {Array} of {Selection}s. "
            }
          },
          "1363": {
            "27": {
              "name": "selectionsForScreenRows",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "startRow",
                "endRow"
              ],
              "range": [
                [
                  1363,
                  27
                ],
                [
                  1374,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1374": {
            "16": {
              "name": "getSelection",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "index"
              ],
              "range": [
                [
                  1374,
                  16
                ],
                [
                  1381,
                  1
                ]
              ],
              "doc": " Public: Get the most recent {Selection} or the selection at the given\nindex.\n\nindex - Optional. The index of the selection to return, based on the order\n  in which the selections were added.\n\nReturns a {Selection}.\nor the  at the specified index. "
            }
          },
          "1381": {
            "20": {
              "name": "getLastSelection",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1381,
                  20
                ],
                [
                  1388,
                  1
                ]
              ],
              "doc": " Public: Get the most recently added {Selection}.\n\nReturns a {Selection}. "
            }
          },
          "1388": {
            "40": {
              "name": "getSelectionsOrderedByBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1388,
                  40
                ],
                [
                  1394,
                  1
                ]
              ],
              "doc": " Public: Get all {Selection}s, ordered by their position in the buffer\ninstead of the order in which they were added.\n\nReturns an {Array} of {Selection}s. "
            }
          },
          "1394": {
            "28": {
              "name": "getLastSelectionInBuffer",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1394,
                  28
                ],
                [
                  1403,
                  1
                ]
              ],
              "doc": " Public: Get the last {Selection} based on its position in the buffer.\n\nReturns a {Selection}. "
            }
          },
          "1403": {
            "34": {
              "name": "selectionIntersectsBufferRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRange"
              ],
              "range": [
                [
                  1403,
                  34
                ],
                [
                  1415,
                  1
                ]
              ],
              "doc": " Public: Determine if a given range in buffer coordinates intersects a\nselection.\n\nbufferRange - A {Range} or range-compatible {Array}.\n\nReturns a {Boolean}. "
            }
          },
          "1415": {
            "27": {
              "name": "setCursorScreenPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "position",
                "options"
              ],
              "range": [
                [
                  1415,
                  27
                ],
                [
                  1422,
                  1
                ]
              ],
              "doc": " Public: Move the cursor to the given position in screen coordinates.\n\nIf there are multiple cursors, they will be consolidated to a single cursor.\n\nposition - A {Point} or {Array} of `[row, column]`\noptions  - An {Object} combining options for {::clipScreenPosition} with:\n  :autoscroll - Determines whether the editor scrolls to the new cursor's\n    position. Defaults to true. "
            }
          },
          "1422": {
            "27": {
              "name": "getCursorScreenPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1422,
                  27
                ],
                [
                  1428,
                  1
                ]
              ],
              "doc": " Public: Get the position of the most recently added cursor in screen\ncoordinates.\n\nReturns a {Point}. "
            }
          },
          "1428": {
            "22": {
              "name": "getCursorScreenRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1428,
                  22
                ],
                [
                  1439,
                  1
                ]
              ],
              "doc": " Public: Get the row of the most recently added cursor in screen coordinates.\n\nReturns the screen row {Number}. "
            }
          },
          "1439": {
            "27": {
              "name": "setCursorBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "position",
                "options"
              ],
              "range": [
                [
                  1439,
                  27
                ],
                [
                  1446,
                  1
                ]
              ],
              "doc": " Public: Move the cursor to the given position in buffer coordinates.\n\nIf there are multiple cursors, they will be consolidated to a single cursor.\n\nposition - A {Point} or {Array} of `[row, column]`\noptions  - An {Object} combining options for {::clipScreenPosition} with:\n  :autoscroll - Determines whether the editor scrolls to the new cursor's\n    position. Defaults to true. "
            }
          },
          "1446": {
            "27": {
              "name": "getCursorBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1446,
                  27
                ],
                [
                  1453,
                  1
                ]
              ],
              "doc": " Public: Get the position of the most recently added cursor in buffer\ncoordinates.\n\nReturns a {Point}. "
            }
          },
          "1453": {
            "26": {
              "name": "getSelectedScreenRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1453,
                  26
                ],
                [
                  1460,
                  1
                ]
              ],
              "doc": " Public: Get the {Range} of the most recently added selection in screen\ncoordinates.\n\nReturns a {Range}. "
            }
          },
          "1460": {
            "26": {
              "name": "getSelectedBufferRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1460,
                  26
                ],
                [
                  1468,
                  1
                ]
              ],
              "doc": " Public: Get the {Range} of the most recently added selection in buffer\ncoordinates.\n\nReturns a {Range}. "
            }
          },
          "1468": {
            "27": {
              "name": "getSelectedBufferRanges",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1468,
                  27
                ],
                [
                  1476,
                  1
                ]
              ],
              "doc": " Public: Get the {Range}s of all selections in buffer coordinates.\n\nThe ranges are sorted by their position in the buffer.\n\nReturns an {Array} of {Range}s. "
            }
          },
          "1476": {
            "27": {
              "name": "getSelectedScreenRanges",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1476,
                  27
                ],
                [
                  1482,
                  1
                ]
              ],
              "doc": " Public: Get the {Range}s of all selections in screen coordinates.\n\nThe ranges are sorted by their position in the buffer.\n\nReturns an {Array} of {Range}s. "
            }
          },
          "1482": {
            "19": {
              "name": "getSelectedText",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1482,
                  19
                ],
                [
                  1490,
                  1
                ]
              ],
              "doc": " Public: Get the selected text of the most recently added selection.\n\nReturns a {String}. "
            }
          },
          "1490": {
            "24": {
              "name": "getTextInBufferRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "range"
              ],
              "range": [
                [
                  1490,
                  24
                ],
                [
                  1499,
                  1
                ]
              ],
              "doc": " Public: Get the text in the given {Range} in buffer coordinates.\n\nrange - A {Range} or range-compatible {Array}.\n\nReturns a {String}. "
            }
          },
          "1499": {
            "24": {
              "name": "setTextInBufferRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "range",
                "text",
                "normalizeLineEndings"
              ],
              "range": [
                [
                  1499,
                  24
                ],
                [
                  1499,
                  124
                ]
              ],
              "doc": " Public: Set the text in the given {Range} in buffer coordinates.\n\nrange - A {Range} or range-compatible {Array}.\ntext - A {String}\n\nReturns the {Range} of the newly-inserted text. "
            }
          },
          "1505": {
            "34": {
              "name": "getCurrentParagraphBufferRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1505,
                  34
                ],
                [
                  1511,
                  1
                ]
              ],
              "doc": " Public: Get the {Range} of the paragraph surrounding the most recently added\ncursor.\n\nReturns a {Range}. "
            }
          },
          "1511": {
            "22": {
              "name": "getWordUnderCursor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "options"
              ],
              "range": [
                [
                  1511,
                  22
                ],
                [
                  1515,
                  1
                ]
              ],
              "doc": " Public: Returns the word surrounding the most recently added cursor.\n\noptions - See {Cursor::getBeginningOfCurrentWordBufferPosition}. "
            }
          },
          "1515": {
            "16": {
              "name": "moveCursorUp",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "lineCount"
              ],
              "range": [
                [
                  1515,
                  16
                ],
                [
                  1519,
                  1
                ]
              ],
              "doc": "Public: Move every cursor up one row in screen coordinates. "
            }
          },
          "1519": {
            "18": {
              "name": "moveCursorDown",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "lineCount"
              ],
              "range": [
                [
                  1519,
                  18
                ],
                [
                  1523,
                  1
                ]
              ],
              "doc": "Public: Move every cursor down one row in screen coordinates. "
            }
          },
          "1523": {
            "18": {
              "name": "moveCursorLeft",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1523,
                  18
                ],
                [
                  1527,
                  1
                ]
              ],
              "doc": "Public: Move every cursor left one column. "
            }
          },
          "1527": {
            "19": {
              "name": "moveCursorRight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1527,
                  19
                ],
                [
                  1533,
                  1
                ]
              ],
              "doc": "Public: Move every cursor right one column. "
            }
          },
          "1533": {
            "19": {
              "name": "moveCursorToTop",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1533,
                  19
                ],
                [
                  1539,
                  1
                ]
              ],
              "doc": " Public: Move every cursor to the top of the buffer.\n\nIf there are multiple cursors, they will be merged into a single cursor. "
            }
          },
          "1539": {
            "22": {
              "name": "moveCursorToBottom",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1539,
                  22
                ],
                [
                  1543,
                  1
                ]
              ],
              "doc": " Public: Move every cursor to the bottom of the buffer.\n\nIf there are multiple cursors, they will be merged into a single cursor. "
            }
          },
          "1543": {
            "37": {
              "name": "moveCursorToBeginningOfScreenLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1543,
                  37
                ],
                [
                  1547,
                  1
                ]
              ],
              "doc": "Public: Move every cursor to the beginning of its line in screen coordinates. "
            }
          },
          "1547": {
            "31": {
              "name": "moveCursorToBeginningOfLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1547,
                  31
                ],
                [
                  1551,
                  1
                ]
              ],
              "doc": "Public: Move every cursor to the beginning of its line in buffer coordinates. "
            }
          },
          "1551": {
            "36": {
              "name": "moveCursorToFirstCharacterOfLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1551,
                  36
                ],
                [
                  1555,
                  1
                ]
              ],
              "doc": "Public: Move every cursor to the first non-whitespace character of its line. "
            }
          },
          "1555": {
            "31": {
              "name": "moveCursorToEndOfScreenLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1555,
                  31
                ],
                [
                  1559,
                  1
                ]
              ],
              "doc": "Public: Move every cursor to the end of its line in screen coordinates. "
            }
          },
          "1559": {
            "25": {
              "name": "moveCursorToEndOfLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1559,
                  25
                ],
                [
                  1563,
                  1
                ]
              ],
              "doc": "Public: Move every cursor to the end of its line in buffer coordinates. "
            }
          },
          "1563": {
            "31": {
              "name": "moveCursorToBeginningOfWord",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1563,
                  31
                ],
                [
                  1567,
                  1
                ]
              ],
              "doc": "Public: Move every cursor to the beginning of its surrounding word. "
            }
          },
          "1567": {
            "25": {
              "name": "moveCursorToEndOfWord",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1567,
                  25
                ],
                [
                  1571,
                  1
                ]
              ],
              "doc": "Public: Move every cursor to the end of its surrounding word. "
            }
          },
          "1571": {
            "35": {
              "name": "moveCursorToBeginningOfNextWord",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1571,
                  35
                ],
                [
                  1575,
                  1
                ]
              ],
              "doc": "Public: Move every cursor to the beginning of the next word. "
            }
          },
          "1575": {
            "36": {
              "name": "moveCursorToPreviousWordBoundary",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1575,
                  36
                ],
                [
                  1579,
                  1
                ]
              ],
              "doc": "Public: Move every cursor to the previous word boundary. "
            }
          },
          "1579": {
            "32": {
              "name": "moveCursorToNextWordBoundary",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1579,
                  32
                ],
                [
                  1583,
                  1
                ]
              ],
              "doc": "Public: Move every cursor to the next word boundary. "
            }
          },
          "1583": {
            "40": {
              "name": "moveCursorToBeginningOfNextParagraph",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1583,
                  40
                ],
                [
                  1587,
                  1
                ]
              ],
              "doc": "Public: Move every cursor to the beginning of the next paragraph. "
            }
          },
          "1587": {
            "44": {
              "name": "moveCursorToBeginningOfPreviousParagraph",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1587,
                  44
                ],
                [
                  1596,
                  1
                ]
              ],
              "doc": "Public: Move every cursor to the beginning of the previous paragraph. "
            }
          },
          "1596": {
            "26": {
              "name": "scrollToCursorPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "options"
              ],
              "range": [
                [
                  1596,
                  26
                ],
                [
                  1599,
                  1
                ]
              ],
              "doc": " Public: Scroll the editor to reveal the most recently added cursor if it is\noff-screen.\n\noptions - An optional hash of options.\n  :center - Center the editor around the cursor if possible. Defauls to\n            true. "
            }
          },
          "1599": {
            "10": {
              "name": "pageUp",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1599,
                  10
                ],
                [
                  1604,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1604": {
            "12": {
              "name": "pageDown",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1604,
                  12
                ],
                [
                  1609,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1609": {
            "16": {
              "name": "selectPageUp",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1609,
                  16
                ],
                [
                  1612,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1612": {
            "18": {
              "name": "selectPageDown",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1612,
                  18
                ],
                [
                  1616,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1616": {
            "18": {
              "name": "getRowsPerPage",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1616,
                  18
                ],
                [
                  1619,
                  1
                ]
              ],
              "doc": "Private: Returns the number of rows per page "
            }
          },
          "1619": {
            "15": {
              "name": "moveCursors",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "fn"
              ],
              "range": [
                [
                  1619,
                  15
                ],
                [
                  1626,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1626": {
            "15": {
              "name": "cursorMoved",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "event"
              ],
              "range": [
                [
                  1626,
                  15
                ],
                [
                  1636,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1636": {
            "26": {
              "name": "selectToScreenPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "position"
              ],
              "range": [
                [
                  1636,
                  26
                ],
                [
                  1645,
                  1
                ]
              ],
              "doc": " Public: Select from the current cursor position to the given position in\nscreen coordinates.\n\nThis method may merge selections that end up intesecting.\n\nposition - An instance of {Point}, with a given `row` and `column`. "
            }
          },
          "1645": {
            "15": {
              "name": "selectRight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1645,
                  15
                ],
                [
                  1652,
                  1
                ]
              ],
              "doc": " Public: Move the cursor of each selection one character rightward while\npreserving the selection's tail position.\n\nThis method may merge selections that end up intesecting. "
            }
          },
          "1652": {
            "14": {
              "name": "selectLeft",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1652,
                  14
                ],
                [
                  1659,
                  1
                ]
              ],
              "doc": " Public: Move the cursor of each selection one character leftward while\npreserving the selection's tail position.\n\nThis method may merge selections that end up intesecting. "
            }
          },
          "1659": {
            "12": {
              "name": "selectUp",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "rowCount"
              ],
              "range": [
                [
                  1659,
                  12
                ],
                [
                  1666,
                  1
                ]
              ],
              "doc": " Public: Move the cursor of each selection one character upward while\npreserving the selection's tail position.\n\nThis method may merge selections that end up intesecting. "
            }
          },
          "1666": {
            "14": {
              "name": "selectDown",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "rowCount"
              ],
              "range": [
                [
                  1666,
                  14
                ],
                [
                  1673,
                  1
                ]
              ],
              "doc": " Public: Move the cursor of each selection one character downward while\npreserving the selection's tail position.\n\nThis method may merge selections that end up intesecting. "
            }
          },
          "1673": {
            "15": {
              "name": "selectToTop",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1673,
                  15
                ],
                [
                  1679,
                  1
                ]
              ],
              "doc": " Public: Select from the top of the buffer to the end of the last selection\nin the buffer.\n\nThis method merges multiple selections into a single selection. "
            }
          },
          "1679": {
            "13": {
              "name": "selectAll",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1679,
                  13
                ],
                [
                  1686,
                  1
                ]
              ],
              "doc": " Public: Select all text in the buffer.\n\nThis method merges multiple selections into a single selection. "
            }
          },
          "1686": {
            "18": {
              "name": "selectToBottom",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1686,
                  18
                ],
                [
                  1693,
                  1
                ]
              ],
              "doc": " Public: Selects from the top of the first selection in the buffer to the end\nof the buffer.\n\nThis method merges multiple selections into a single selection. "
            }
          },
          "1693": {
            "27": {
              "name": "selectToBeginningOfLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1693,
                  27
                ],
                [
                  1702,
                  1
                ]
              ],
              "doc": " Public: Move the cursor of each selection to the beginning of its line\nwhile preserving the selection's tail position.\n\nThis method may merge selections that end up intesecting. "
            }
          },
          "1702": {
            "32": {
              "name": "selectToFirstCharacterOfLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1702,
                  32
                ],
                [
                  1709,
                  1
                ]
              ],
              "doc": " Public: Move the cursor of each selection to the first non-whitespace\ncharacter of its line while preserving the selection's tail position. If the\ncursor is already on the first character of the line, move it to the\nbeginning of the line.\n\nThis method may merge selections that end up intersecting. "
            }
          },
          "1709": {
            "21": {
              "name": "selectToEndOfLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1709,
                  21
                ],
                [
                  1716,
                  1
                ]
              ],
              "doc": " Public: Move the cursor of each selection to the end of its line while\npreserving the selection's tail position.\n\nThis method may merge selections that end up intersecting. "
            }
          },
          "1716": {
            "32": {
              "name": "selectToPreviousWordBoundary",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1716,
                  32
                ],
                [
                  1723,
                  1
                ]
              ],
              "doc": " Public: For each selection, move its cursor to the preceding word boundary\nwhile maintaining the selection's tail position.\n\nThis method may merge selections that end up intersecting. "
            }
          },
          "1723": {
            "28": {
              "name": "selectToNextWordBoundary",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1723,
                  28
                ],
                [
                  1729,
                  1
                ]
              ],
              "doc": " Public: For each selection, move its cursor to the next word boundary while\nmaintaining the selection's tail position.\n\nThis method may merge selections that end up intersecting. "
            }
          },
          "1729": {
            "14": {
              "name": "selectLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1729,
                  14
                ],
                [
                  1740,
                  1
                ]
              ],
              "doc": " Public: For each cursor, select the containing line.\n\nThis method merges selections on successive lines. "
            }
          },
          "1740": {
            "21": {
              "name": "addSelectionBelow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1740,
                  21
                ],
                [
                  1751,
                  1
                ]
              ],
              "doc": " Public: Add a similarly-shaped selection to the next eligible line below\neach selection.\n\nOperates on all selections. If the selection is empty, adds an empty\nselection to the next following non-empty line as close to the current\nselection's column as possible. If the selection is non-empty, adds a\nselection to the next line that is long enough for a non-empty selection\nstarting at the same column as the current selection to be added to it. "
            }
          },
          "1751": {
            "21": {
              "name": "addSelectionAbove",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1751,
                  21
                ],
                [
                  1759,
                  1
                ]
              ],
              "doc": " Public: Add a similarly-shaped selection to the next eligible line above\neach selection.\n\nOperates on all selections. If the selection is empty, adds an empty\nselection to the next preceding non-empty line as close to the current\nselection's column as possible. If the selection is non-empty, adds a\nselection to the next line that is long enough for a non-empty selection\nstarting at the same column as the current selection to be added to it. "
            }
          },
          "1759": {
            "28": {
              "name": "splitSelectionsIntoLines",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1759,
                  28
                ],
                [
                  1776,
                  1
                ]
              ],
              "doc": " Public: Split multi-line selections into one selection per line.\n\nOperates on all selections. This method breaks apart all multi-line\nselections to create multiple single-line selections that cumulatively cover\nthe same original area. "
            }
          },
          "1776": {
            "13": {
              "name": "transpose",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1776,
                  13
                ],
                [
                  1791,
                  1
                ]
              ],
              "doc": " Public: For each selection, transpose the selected text.\n\nIf the selection is empty, the characters preceding and following the cursor\nare swapped. Otherwise, the selected characters are reversed. "
            }
          },
          "1791": {
            "13": {
              "name": "upperCase",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1791,
                  13
                ],
                [
                  1798,
                  1
                ]
              ],
              "doc": " Public: Convert the selected text to upper case.\n\nFor each selection, if the selection is empty, converts the containing word\nto upper case. Otherwise convert the selected text to upper case. "
            }
          },
          "1798": {
            "13": {
              "name": "lowerCase",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1798,
                  13
                ],
                [
                  1809,
                  1
                ]
              ],
              "doc": " Public: Convert the selected text to lower case.\n\nFor each selection, if the selection is empty, converts the containing word\nto upper case. Otherwise convert the selected text to upper case. "
            }
          },
          "1809": {
            "13": {
              "name": "joinLines",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1809,
                  13
                ],
                [
                  1816,
                  1
                ]
              ],
              "doc": " Private: Convert multiple lines to a single line.\n\nOperates on all selections. If the selection is empty, joins the current\nline with the next line. Otherwise it joins all lines that intersect the\nselection.\n\nJoining a line means that multiple lines are converted to a single line with\nthe contents of each of the original non-empty lines separated by a space. "
            }
          },
          "1816": {
            "27": {
              "name": "selectToBeginningOfWord",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1816,
                  27
                ],
                [
                  1823,
                  1
                ]
              ],
              "doc": " Public: Expand selections to the beginning of their containing word.\n\nOperates on all selections. Moves the cursor to the beginning of the\ncontaining word while preserving the selection's tail position. "
            }
          },
          "1823": {
            "21": {
              "name": "selectToEndOfWord",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1823,
                  21
                ],
                [
                  1830,
                  1
                ]
              ],
              "doc": " Public: Expand selections to the end of their containing word.\n\nOperates on all selections. Moves the cursor to the end of the containing\nword while preserving the selection's tail position. "
            }
          },
          "1830": {
            "31": {
              "name": "selectToBeginningOfNextWord",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1830,
                  31
                ],
                [
                  1834,
                  1
                ]
              ],
              "doc": " Public: Expand selections to the beginning of the next word.\n\nOperates on all selections. Moves the cursor to the beginning of the next\nword while preserving the selection's tail position. "
            }
          },
          "1834": {
            "14": {
              "name": "selectWord",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1834,
                  14
                ],
                [
                  1841,
                  1
                ]
              ],
              "doc": "Public: Select the word containing each cursor. "
            }
          },
          "1841": {
            "36": {
              "name": "selectToBeginningOfNextParagraph",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1841,
                  36
                ],
                [
                  1848,
                  1
                ]
              ],
              "doc": " Public: Expand selections to the beginning of the next paragraph.\n\nOperates on all selections. Moves the cursor to the beginning of the next\nparagraph while preserving the selection's tail position. "
            }
          },
          "1848": {
            "40": {
              "name": "selectToBeginningOfPreviousParagraph",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1848,
                  40
                ],
                [
                  1856,
                  1
                ]
              ],
              "doc": " Public: Expand selections to the beginning of the next paragraph.\n\nOperates on all selections. Moves the cursor to the beginning of the next\nparagraph while preserving the selection's tail position. "
            }
          },
          "1856": {
            "16": {
              "name": "selectMarker",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "marker"
              ],
              "range": [
                [
                  1856,
                  16
                ],
                [
                  1863,
                  1
                ]
              ],
              "doc": " Public: Select the range of the given marker if it is valid.\n\nmarker - A {DisplayBufferMarker}\n\nReturns the selected {Range} or `undefined` if the marker is invalid. "
            }
          },
          "1863": {
            "16": {
              "name": "mergeCursors",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1863,
                  16
                ],
                [
                  1873,
                  1
                ]
              ],
              "doc": "Private: Merge cursors that have the same screen position "
            }
          },
          "1873": {
            "27": {
              "name": "expandSelectionsForward",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "fn"
              ],
              "range": [
                [
                  1873,
                  27
                ],
                [
                  1879,
                  1
                ]
              ],
              "doc": "Private: Calls the given function with each selection, then merges selections "
            }
          },
          "1879": {
            "28": {
              "name": "expandSelectionsBackward",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "fn"
              ],
              "range": [
                [
                  1879,
                  28
                ],
                [
                  1883,
                  1
                ]
              ],
              "doc": " Private: Calls the given function with each selection, then merges selections in the\nreversed orientation "
            }
          },
          "1883": {
            "22": {
              "name": "finalizeSelections",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1883,
                  22
                ],
                [
                  1889,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1889": {
            "31": {
              "name": "mergeIntersectingSelections",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "args"
              ],
              "range": [
                [
                  1889,
                  31
                ],
                [
                  1910,
                  1
                ]
              ],
              "doc": " Private: Merges intersecting selections. If passed a function, it executes\nthe function with merging suppressed, then merges intersecting selections\nafterward. "
            }
          },
          "1910": {
            "40": {
              "name": "preserveCursorPositionOnBufferReload",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1910,
                  40
                ],
                [
                  1919,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1919": {
            "14": {
              "name": "getGrammar",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1919,
                  14
                ],
                [
                  1926,
                  1
                ]
              ],
              "doc": "Public: Get the current {Grammar} of this editor. "
            }
          },
          "1926": {
            "14": {
              "name": "setGrammar",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "grammar"
              ],
              "range": [
                [
                  1926,
                  14
                ],
                [
                  1930,
                  1
                ]
              ],
              "doc": " Public: Set the current {Grammar} of this editor.\n\nAssigning a grammar will cause the editor to re-tokenize based on the new\ngrammar. "
            }
          },
          "1930": {
            "17": {
              "name": "reloadGrammar",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1930,
                  17
                ],
                [
                  1933,
                  1
                ]
              ],
              "doc": "Private: Reload the grammar based on the file name. "
            }
          },
          "1933": {
            "20": {
              "name": "shouldAutoIndent",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1933,
                  20
                ],
                [
                  1944,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1944": {
            "12": {
              "name": "transact",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "fn"
              ],
              "range": [
                [
                  1944,
                  12
                ],
                [
                  1944,
                  39
                ]
              ],
              "doc": " Public: Batch multiple operations as a single undo/redo step.\n\nAny group of operations that are logically grouped from the perspective of\nundoing and redoing should be performed in a transaction. If you want to\nabort the transaction, call {::abortTransaction} to terminate the function's\nexecution and revert any changes performed up to the abortion.\n\nfn - A {Function} to call inside the transaction. "
            }
          },
          "1952": {
            "20": {
              "name": "beginTransaction",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1952,
                  20
                ],
                [
                  1952,
                  48
                ]
              ],
              "doc": " Public: Start an open-ended transaction.\n\nCall {::commitTransaction} or {::abortTransaction} to terminate the\ntransaction. If you nest calls to transactions, only the outermost\ntransaction is considered. You must match every begin with a matching\ncommit, but a single call to abort will cancel all nested transactions. "
            }
          },
          "1958": {
            "21": {
              "name": "commitTransaction",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1958,
                  21
                ],
                [
                  1958,
                  50
                ]
              ],
              "doc": " Public: Commit an open-ended transaction started with {::beginTransaction}\nand push it to the undo stack.\n\nIf transactions are nested, only the outermost commit takes effect. "
            }
          },
          "1962": {
            "20": {
              "name": "abortTransaction",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1962,
                  20
                ],
                [
                  1962,
                  48
                ]
              ],
              "doc": " Public: Abort an open transaction, undoing any operations performed so far\nwithin the transaction. "
            }
          },
          "1964": {
            "11": {
              "name": "inspect",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1964,
                  11
                ],
                [
                  1967,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1967": {
            "18": {
              "name": "logScreenLines",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "start",
                "end"
              ],
              "range": [
                [
                  1967,
                  18
                ],
                [
                  1967,
                  68
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1969": {
            "22": {
              "name": "handleTokenization",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1969,
                  22
                ],
                [
                  1972,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1972": {
            "23": {
              "name": "handleGrammarChange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1972,
                  23
                ],
                [
                  1976,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1976": {
            "23": {
              "name": "handleMarkerCreated",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "marker"
              ],
              "range": [
                [
                  1976,
                  23
                ],
                [
                  1980,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1980": {
            "32": {
              "name": "getSelectionMarkerAttributes",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1980,
                  32
                ],
                [
                  1983,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1983": {
            "27": {
              "name": "getVerticalScrollMargin",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1983,
                  27
                ],
                [
                  1983,
                  69
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1984": {
            "27": {
              "name": "setVerticalScrollMargin",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "verticalScrollMargin"
              ],
              "range": [
                [
                  1984,
                  27
                ],
                [
                  1984,
                  112
                ]
              ]
            }
          },
          "1986": {
            "29": {
              "name": "getHorizontalScrollMargin",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1986,
                  29
                ],
                [
                  1986,
                  73
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1987": {
            "29": {
              "name": "setHorizontalScrollMargin",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "horizontalScrollMargin"
              ],
              "range": [
                [
                  1987,
                  29
                ],
                [
                  1987,
                  120
                ]
              ]
            }
          },
          "1989": {
            "25": {
              "name": "getLineHeightInPixels",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1989,
                  25
                ],
                [
                  1989,
                  65
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1990": {
            "25": {
              "name": "setLineHeightInPixels",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "lineHeightInPixels"
              ],
              "range": [
                [
                  1990,
                  25
                ],
                [
                  1990,
                  104
                ]
              ]
            }
          },
          "1992": {
            "29": {
              "name": "batchCharacterMeasurement",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "fn"
              ],
              "range": [
                [
                  1992,
                  29
                ],
                [
                  1992,
                  80
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1994": {
            "22": {
              "name": "getScopedCharWidth",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scopeNames",
                "char"
              ],
              "range": [
                [
                  1994,
                  22
                ],
                [
                  1994,
                  94
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1995": {
            "22": {
              "name": "setScopedCharWidth",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scopeNames",
                "char",
                "width"
              ],
              "range": [
                [
                  1995,
                  22
                ],
                [
                  1995,
                  108
                ]
              ]
            }
          },
          "1997": {
            "23": {
              "name": "getScopedCharWidths",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scopeNames"
              ],
              "range": [
                [
                  1997,
                  23
                ],
                [
                  1997,
                  84
                ]
              ],
              "doc": "~Private~"
            }
          },
          "1999": {
            "25": {
              "name": "clearScopedCharWidths",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1999,
                  25
                ],
                [
                  1999,
                  65
                ]
              ],
              "doc": "~Private~"
            }
          },
          "2001": {
            "23": {
              "name": "getDefaultCharWidth",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  2001,
                  23
                ],
                [
                  2001,
                  61
                ]
              ],
              "doc": "~Private~"
            }
          },
          "2002": {
            "23": {
              "name": "setDefaultCharWidth",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "defaultCharWidth"
              ],
              "range": [
                [
                  2002,
                  23
                ],
                [
                  2002,
                  96
                ]
              ]
            }
          },
          "2004": {
            "13": {
              "name": "setHeight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "height"
              ],
              "range": [
                [
                  2004,
                  13
                ],
                [
                  2004,
                  56
                ]
              ],
              "doc": "~Private~"
            }
          },
          "2005": {
            "13": {
              "name": "getHeight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  2005,
                  13
                ],
                [
                  2005,
                  41
                ]
              ]
            }
          },
          "2007": {
            "19": {
              "name": "getClientHeight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  2007,
                  19
                ],
                [
                  2007,
                  53
                ]
              ],
              "doc": "~Private~"
            }
          },
          "2009": {
            "12": {
              "name": "setWidth",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "width"
              ],
              "range": [
                [
                  2009,
                  12
                ],
                [
                  2009,
                  52
                ]
              ],
              "doc": "~Private~"
            }
          },
          "2010": {
            "12": {
              "name": "getWidth",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  2010,
                  12
                ],
                [
                  2010,
                  39
                ]
              ]
            }
          },
          "2012": {
            "16": {
              "name": "getScrollTop",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  2012,
                  16
                ],
                [
                  2012,
                  47
                ]
              ],
              "doc": "~Private~"
            }
          },
          "2013": {
            "16": {
              "name": "setScrollTop",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scrollTop"
              ],
              "range": [
                [
                  2013,
                  16
                ],
                [
                  2013,
                  68
                ]
              ]
            }
          },
          "2015": {
            "19": {
              "name": "getScrollBottom",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  2015,
                  19
                ],
                [
                  2015,
                  53
                ]
              ],
              "doc": "~Private~"
            }
          },
          "2016": {
            "19": {
              "name": "setScrollBottom",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scrollBottom"
              ],
              "range": [
                [
                  2016,
                  19
                ],
                [
                  2016,
                  80
                ]
              ]
            }
          },
          "2018": {
            "17": {
              "name": "getScrollLeft",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  2018,
                  17
                ],
                [
                  2018,
                  49
                ]
              ],
              "doc": "~Private~"
            }
          },
          "2019": {
            "17": {
              "name": "setScrollLeft",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scrollLeft"
              ],
              "range": [
                [
                  2019,
                  17
                ],
                [
                  2019,
                  72
                ]
              ]
            }
          },
          "2021": {
            "18": {
              "name": "getScrollRight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  2021,
                  18
                ],
                [
                  2021,
                  51
                ]
              ],
              "doc": "~Private~"
            }
          },
          "2022": {
            "18": {
              "name": "setScrollRight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scrollRight"
              ],
              "range": [
                [
                  2022,
                  18
                ],
                [
                  2022,
                  76
                ]
              ]
            }
          },
          "2024": {
            "19": {
              "name": "getScrollHeight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  2024,
                  19
                ],
                [
                  2024,
                  53
                ]
              ],
              "doc": "~Private~"
            }
          },
          "2025": {
            "18": {
              "name": "getScrollWidth",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scrollWidth"
              ],
              "range": [
                [
                  2025,
                  18
                ],
                [
                  2025,
                  76
                ]
              ]
            }
          },
          "2027": {
            "22": {
              "name": "getVisibleRowRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  2027,
                  22
                ],
                [
                  2027,
                  59
                ]
              ],
              "doc": "~Private~"
            }
          },
          "2029": {
            "29": {
              "name": "intersectsVisibleRowRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "startRow",
                "endRow"
              ],
              "range": [
                [
                  2029,
                  29
                ],
                [
                  2029,
                  108
                ]
              ],
              "doc": "~Private~"
            }
          },
          "2031": {
            "38": {
              "name": "selectionIntersectsVisibleRowRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "selection"
              ],
              "range": [
                [
                  2031,
                  38
                ],
                [
                  2031,
                  112
                ]
              ],
              "doc": "~Private~"
            }
          },
          "2033": {
            "34": {
              "name": "pixelPositionForScreenPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenPosition"
              ],
              "range": [
                [
                  2033,
                  34
                ],
                [
                  2033,
                  114
                ]
              ],
              "doc": "~Private~"
            }
          },
          "2035": {
            "34": {
              "name": "pixelPositionForBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferPosition"
              ],
              "range": [
                [
                  2035,
                  34
                ],
                [
                  2035,
                  114
                ]
              ],
              "doc": "~Private~"
            }
          },
          "2037": {
            "34": {
              "name": "screenPositionForPixelPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "pixelPosition"
              ],
              "range": [
                [
                  2037,
                  34
                ],
                [
                  2037,
                  112
                ]
              ],
              "doc": "~Private~"
            }
          },
          "2039": {
            "27": {
              "name": "pixelRectForScreenRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenRange"
              ],
              "range": [
                [
                  2039,
                  27
                ],
                [
                  2039,
                  94
                ]
              ],
              "doc": "~Private~"
            }
          },
          "2041": {
            "23": {
              "name": "scrollToScreenRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenRange",
                "options"
              ],
              "range": [
                [
                  2041,
                  23
                ],
                [
                  2041,
                  104
                ]
              ],
              "doc": "~Private~"
            }
          },
          "2043": {
            "26": {
              "name": "scrollToScreenPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenPosition",
                "options"
              ],
              "range": [
                [
                  2043,
                  26
                ],
                [
                  2043,
                  116
                ]
              ],
              "doc": "~Private~"
            }
          },
          "2045": {
            "26": {
              "name": "scrollToBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferPosition",
                "options"
              ],
              "range": [
                [
                  2045,
                  26
                ],
                [
                  2045,
                  116
                ]
              ],
              "doc": "~Private~"
            }
          },
          "2047": {
            "26": {
              "name": "horizontallyScrollable",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  2047,
                  26
                ],
                [
                  2047,
                  67
                ]
              ],
              "doc": "~Private~"
            }
          },
          "2049": {
            "24": {
              "name": "verticallyScrollable",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  2049,
                  24
                ],
                [
                  2049,
                  63
                ]
              ],
              "doc": "~Private~"
            }
          },
          "2051": {
            "32": {
              "name": "getHorizontalScrollbarHeight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  2051,
                  32
                ],
                [
                  2051,
                  79
                ]
              ],
              "doc": "~Private~"
            }
          },
          "2052": {
            "32": {
              "name": "setHorizontalScrollbarHeight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "height"
              ],
              "range": [
                [
                  2052,
                  32
                ],
                [
                  2052,
                  94
                ]
              ]
            }
          },
          "2054": {
            "29": {
              "name": "getVerticalScrollbarWidth",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  2054,
                  29
                ],
                [
                  2054,
                  73
                ]
              ],
              "doc": "~Private~"
            }
          },
          "2055": {
            "29": {
              "name": "setVerticalScrollbarWidth",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "width"
              ],
              "range": [
                [
                  2055,
                  29
                ],
                [
                  2055,
                  86
                ]
              ]
            }
          },
          "2058": {
            "12": {
              "name": "joinLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  2058,
                  12
                ],
                [
                  2060,
                  16
                ]
              ],
              "doc": "Deprecated: Call {::joinLines} instead. "
            }
          }
        },
        "exports": 138
      },
      "src/fold.coffee": {
        "objects": {
          "0": {
            "1": {
              "type": "import",
              "range": [
                [
                  0,
                  1
                ],
                [
                  0,
                  5
                ]
              ],
              "bindingType": "variable",
              "module": "text-buffer@^3.0.0",
              "name": "Point",
              "exportsProperty": "Point"
            },
            "8": {
              "type": "import",
              "range": [
                [
                  0,
                  8
                ],
                [
                  0,
                  12
                ]
              ],
              "bindingType": "variable",
              "module": "text-buffer@^3.0.0",
              "name": "Range",
              "exportsProperty": "Range"
            }
          },
          "7": {
            "0": {
              "type": "class",
              "name": "Fold",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  8,
                  6
                ],
                [
                  9,
                  17
                ],
                [
                  10,
                  10
                ],
                [
                  12,
                  15
                ],
                [
                  20,
                  22
                ],
                [
                  27,
                  11
                ],
                [
                  35,
                  18
                ],
                [
                  48,
                  21
                ],
                [
                  53,
                  15
                ],
                [
                  57,
                  13
                ],
                [
                  61,
                  11
                ],
                [
                  67,
                  21
                ],
                [
                  75,
                  21
                ],
                [
                  78,
                  23
                ],
                [
                  82,
                  13
                ]
              ],
              "doc": " Private: Represents a fold that collapses multiple buffer lines into a single\nline on the screen.\n\nTheir creation is managed by the {DisplayBuffer}. ",
              "range": [
                [
                  7,
                  0
                ],
                [
                  84,
                  26
                ]
              ]
            }
          },
          "8": {
            "6": {
              "name": "id",
              "type": "primitive",
              "range": [
                [
                  8,
                  6
                ],
                [
                  8,
                  9
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "9": {
            "17": {
              "name": "displayBuffer",
              "type": "primitive",
              "range": [
                [
                  9,
                  17
                ],
                [
                  9,
                  20
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "10": {
            "10": {
              "name": "marker",
              "type": "primitive",
              "range": [
                [
                  10,
                  10
                ],
                [
                  10,
                  13
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "12": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null,
                null
              ],
              "range": [
                [
                  12,
                  15
                ],
                [
                  20,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "20": {
            "22": {
              "name": "isInsideLargerFold",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  20,
                  22
                ],
                [
                  27,
                  1
                ]
              ],
              "doc": "Private: Returns whether this fold is contained within another fold "
            }
          },
          "27": {
            "11": {
              "name": "destroy",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  27,
                  11
                ],
                [
                  35,
                  1
                ]
              ],
              "doc": "Private: Destroys this fold "
            }
          },
          "35": {
            "18": {
              "name": "getBufferRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  35,
                  18
                ],
                [
                  48,
                  1
                ]
              ],
              "doc": " Private: Returns the fold's {Range} in buffer coordinates\n\nincludeNewline - A {Boolean} which, if `true`, includes the trailing newline\n\nReturns a {Range}. "
            }
          },
          "48": {
            "21": {
              "name": "getBufferRowRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  48,
                  21
                ],
                [
                  53,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "53": {
            "15": {
              "name": "getStartRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  53,
                  15
                ],
                [
                  57,
                  1
                ]
              ],
              "doc": "Private: Returns the fold's start row as a {Number}. "
            }
          },
          "57": {
            "13": {
              "name": "getEndRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  57,
                  13
                ],
                [
                  61,
                  1
                ]
              ],
              "doc": "Private: Returns the fold's end row as a {Number}. "
            }
          },
          "61": {
            "11": {
              "name": "inspect",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  61,
                  11
                ],
                [
                  67,
                  1
                ]
              ],
              "doc": "Private: Returns a {String} representation of the fold. "
            }
          },
          "67": {
            "21": {
              "name": "getBufferRowCount",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  67,
                  21
                ],
                [
                  75,
                  1
                ]
              ],
              "doc": " Private: Retrieves the number of buffer rows spanned by the fold.\n\nReturns a {Number}. "
            }
          },
          "75": {
            "21": {
              "name": "isContainedByFold",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "fold"
              ],
              "range": [
                [
                  75,
                  21
                ],
                [
                  78,
                  1
                ]
              ],
              "doc": " Private: Identifies if a fold is nested within a fold.\n\nfold - A {Fold} to check\n\nReturns a {Boolean}. "
            }
          },
          "78": {
            "23": {
              "name": "updateDisplayBuffer",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  78,
                  23
                ],
                [
                  82,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "82": {
            "13": {
              "name": "destroyed",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  82,
                  13
                ],
                [
                  84,
                  26
                ]
              ],
              "doc": "~Private~"
            }
          }
        },
        "exports": 7
      },
      "src/git.coffee": {
        "objects": {
          "0": {
            "1": {
              "type": "import",
              "range": [
                [
                  0,
                  1
                ],
                [
                  0,
                  4
                ]
              ],
              "bindingType": "variable",
              "module": "path",
              "builtin": true,
              "name": "join",
              "exportsProperty": "join"
            }
          },
          "2": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  2,
                  4
                ],
                [
                  2,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "3": {
            "1": {
              "type": "import",
              "range": [
                [
                  3,
                  1
                ],
                [
                  3,
                  7
                ]
              ],
              "bindingType": "variable",
              "module": "emissary@^1.2.2",
              "name": "Emitter",
              "exportsProperty": "Emitter"
            },
            "10": {
              "type": "import",
              "range": [
                [
                  3,
                  10
                ],
                [
                  3,
                  19
                ]
              ],
              "bindingType": "variable",
              "module": "emissary@^1.2.2",
              "name": "Subscriber",
              "exportsProperty": "Subscriber"
            }
          },
          "4": {
            "5": {
              "name": "fs",
              "type": "import",
              "range": [
                [
                  4,
                  5
                ],
                [
                  4,
                  21
                ]
              ],
              "bindingType": "variable",
              "module": "fs-plus@^2.2.6"
            }
          },
          "5": {
            "11": {
              "name": "GitUtils",
              "type": "import",
              "range": [
                [
                  5,
                  11
                ],
                [
                  5,
                  29
                ]
              ],
              "bindingType": "variable",
              "module": "git-utils@^2.1.3"
            }
          },
          "7": {
            "7": {
              "name": "Task",
              "type": "import",
              "range": [
                [
                  7,
                  7
                ],
                [
                  7,
                  22
                ]
              ],
              "bindingType": "variable",
              "path": "./task"
            }
          },
          "40": {
            "0": {
              "type": "class",
              "name": "Git",
              "bindingType": "exports",
              "classProperties": [
                [
                  52,
                  9
                ],
                [
                  59,
                  11
                ]
              ],
              "prototypeProperties": [
                [
                  66,
                  15
                ],
                [
                  89,
                  21
                ],
                [
                  97,
                  11
                ],
                [
                  109,
                  11
                ],
                [
                  117,
                  16
                ],
                [
                  120,
                  11
                ],
                [
                  124,
                  23
                ],
                [
                  132,
                  17
                ],
                [
                  149,
                  17
                ],
                [
                  152,
                  20
                ],
                [
                  155,
                  18
                ],
                [
                  158,
                  15
                ],
                [
                  161,
                  13
                ],
                [
                  165,
                  19
                ],
                [
                  169,
                  14
                ],
                [
                  181,
                  16
                ],
                [
                  196,
                  16
                ],
                [
                  209,
                  21
                ],
                [
                  222,
                  16
                ],
                [
                  231,
                  15
                ],
                [
                  247,
                  22
                ],
                [
                  265,
                  16
                ],
                [
                  276,
                  18
                ],
                [
                  282,
                  16
                ],
                [
                  291,
                  21
                ],
                [
                  298,
                  22
                ],
                [
                  310,
                  17
                ],
                [
                  318,
                  23
                ],
                [
                  330,
                  37
                ],
                [
                  338,
                  23
                ],
                [
                  342,
                  13
                ],
                [
                  346,
                  17
                ]
              ],
              "doc": " Public: Represents the underlying git operations performed by Atom.\n\nThis class shouldn't be instantiated directly but instead by accessing the\n`atom.project` global and calling `getRepo()`. Note that this will only be\navailable when the project is backed by a Git repository.\n\nThis class handles submodules automatically by taking a `path` argument to many\nof the methods.  This `path` argument will determine which underlying\nrepository is used.\n\nFor a repository with submodules this would have the following outcome:\n\n```coffee\nrepo = atom.project.getRepo()\nrepo.getShortHead() # 'master'\nrepo.getShortHead('vendor/path/to/a/submodule') # 'dead1234'\n```\n\n## Example\n\n```coffeescript\ngit = atom.project.getRepo()\nconsole.log git.getOriginUrl()\n```\n\n## Requiring in packages\n\n```coffee\n  {Git} = require 'atom'\n``` ",
              "range": [
                [
                  40,
                  0
                ],
                [
                  364,
                  55
                ]
              ]
            }
          },
          "52": {
            "9": {
              "name": "open",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "path",
                "options"
              ],
              "range": [
                [
                  52,
                  9
                ],
                [
                  59,
                  1
                ]
              ],
              "doc": " Public: Creates a new Git instance.\n\npath - The path to the Git repository to open.\noptions - An object with the following keys (default: {}):\n  :refreshOnWindowFocus - `true` to refresh the index and statuses when the\n                          window is focused.\n\nReturns a Git instance or null if the repository could not be opened. "
            }
          },
          "59": {
            "11": {
              "name": "exists",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "path"
              ],
              "range": [
                [
                  59,
                  11
                ],
                [
                  66,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "66": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "path",
                "options"
              ],
              "range": [
                [
                  66,
                  15
                ],
                [
                  89,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "89": {
            "21": {
              "name": "subscribeToBuffer",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "buffer"
              ],
              "range": [
                [
                  89,
                  21
                ],
                [
                  97,
                  1
                ]
              ],
              "doc": "Private: Subscribes to buffer events. "
            }
          },
          "97": {
            "11": {
              "name": "destroy",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  97,
                  11
                ],
                [
                  109,
                  1
                ]
              ],
              "doc": " Public: Destroy this `Git` object. This destroys any tasks and subscriptions\nand releases the underlying libgit2 repository handle. "
            }
          },
          "109": {
            "11": {
              "name": "getRepo",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "path"
              ],
              "range": [
                [
                  109,
                  11
                ],
                [
                  117,
                  1
                ]
              ],
              "doc": "Private: Returns the corresponding {Repository} "
            }
          },
          "117": {
            "16": {
              "name": "refreshIndex",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  117,
                  16
                ],
                [
                  117,
                  43
                ]
              ],
              "doc": " Private: Reread the index to update any values that have changed since the\nlast time the index was read. "
            }
          },
          "120": {
            "11": {
              "name": "getPath",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  120,
                  11
                ],
                [
                  124,
                  1
                ]
              ],
              "doc": "Public: Returns the {String} path of the repository. "
            }
          },
          "124": {
            "23": {
              "name": "getWorkingDirectory",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  124,
                  23
                ],
                [
                  124,
                  57
                ]
              ],
              "doc": "Public: Returns the {String} working directory path of the repository. "
            }
          },
          "132": {
            "17": {
              "name": "getPathStatus",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "path"
              ],
              "range": [
                [
                  132,
                  17
                ],
                [
                  149,
                  1
                ]
              ],
              "doc": " Public: Get the status of a single path in the repository.\n\npath - A {String} repository-relative path.\n\nReturns a {Number} representing the status. This value can be passed to\n{::isStatusModified} or {::isStatusNew} to get more information. "
            }
          },
          "149": {
            "17": {
              "name": "isPathIgnored",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "path"
              ],
              "range": [
                [
                  149,
                  17
                ],
                [
                  149,
                  65
                ]
              ],
              "doc": " Public: Is the given path ignored?\n\nReturns a {Boolean}. "
            }
          },
          "152": {
            "20": {
              "name": "isStatusModified",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "status"
              ],
              "range": [
                [
                  152,
                  20
                ],
                [
                  152,
                  66
                ]
              ],
              "doc": "Public: Returns true if the given status indicates modification. "
            }
          },
          "155": {
            "18": {
              "name": "isPathModified",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "path"
              ],
              "range": [
                [
                  155,
                  18
                ],
                [
                  155,
                  66
                ]
              ],
              "doc": "Public: Returns true if the given path is modified. "
            }
          },
          "158": {
            "15": {
              "name": "isStatusNew",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "status"
              ],
              "range": [
                [
                  158,
                  15
                ],
                [
                  158,
                  56
                ]
              ],
              "doc": "Public: Returns true if the given status indicates a new path. "
            }
          },
          "161": {
            "13": {
              "name": "isPathNew",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "path"
              ],
              "range": [
                [
                  161,
                  13
                ],
                [
                  161,
                  56
                ]
              ],
              "doc": "Public: Returns true if the given path is new. "
            }
          },
          "165": {
            "19": {
              "name": "isProjectAtRoot",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  165,
                  19
                ],
                [
                  169,
                  1
                ]
              ],
              "doc": " Public: Returns true if at the root, false if in a subfolder of the\nrepository. "
            }
          },
          "169": {
            "14": {
              "name": "relativize",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "path"
              ],
              "range": [
                [
                  169,
                  14
                ],
                [
                  169,
                  50
                ]
              ],
              "doc": "Public: Makes a path relative to the repository's working directory. "
            }
          },
          "181": {
            "16": {
              "name": "getShortHead",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "path"
              ],
              "range": [
                [
                  181,
                  16
                ],
                [
                  181,
                  54
                ]
              ],
              "doc": " Public: Retrieves a shortened version of the HEAD reference value.\n\nThis removes the leading segments of `refs/heads`, `refs/tags`, or\n`refs/remotes`.  It also shortens the SHA-1 of a detached `HEAD` to 7\ncharacters.\n\npath - An optional {String} path in the repository to get this information\n       for, only needed if the repository contains submodules.\n\nReturns a {String}. "
            }
          },
          "196": {
            "16": {
              "name": "checkoutHead",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "path"
              ],
              "range": [
                [
                  196,
                  16
                ],
                [
                  209,
                  1
                ]
              ],
              "doc": " Public: Restore the contents of a path in the working directory and index\nto the version at `HEAD`.\n\nThis is essentially the same as running:\n\n```\ngit reset HEAD -- <path>\ngit checkout HEAD -- <path>\n```\n\npath - The {String} path to checkout.\n\nReturns a {Boolean} that's true if the method was successful. "
            }
          },
          "209": {
            "21": {
              "name": "checkoutReference",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "reference",
                "create"
              ],
              "range": [
                [
                  209,
                  21
                ],
                [
                  222,
                  1
                ]
              ],
              "doc": " Public: Checks out a branch in your repository.\n\nreference - The String reference to checkout\ncreate -  A Boolean value which, if true creates the new reference if it\n          doesn't exist.\n\nReturns a Boolean that's true if the method was successful. "
            }
          },
          "222": {
            "16": {
              "name": "getDiffStats",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "path"
              ],
              "range": [
                [
                  222,
                  16
                ],
                [
                  231,
                  1
                ]
              ],
              "doc": " Public: Retrieves the number of lines added and removed to a path.\n\nThis compares the working directory contents of the path to the `HEAD`\nversion.\n\npath - The {String} path to check.\n\nReturns an {Object} with the following keys:\n  :added - The {Number} of added lines.\n  :deleted - The {Number} of deleted lines. "
            }
          },
          "231": {
            "15": {
              "name": "isSubmodule",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "path"
              ],
              "range": [
                [
                  231,
                  15
                ],
                [
                  247,
                  1
                ]
              ],
              "doc": " Public: Is the given path a submodule in the repository?\n\npath - The {String} path to check.\n\nReturns a {Boolean}. "
            }
          },
          "247": {
            "22": {
              "name": "getDirectoryStatus",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "directoryPath"
              ],
              "range": [
                [
                  247,
                  22
                ],
                [
                  265,
                  1
                ]
              ],
              "doc": " Public: Get the status of a directory in the repository's working directory.\n\npath - The {String} path to check.\n\nReturns a {Number} representing the status. This value can be passed to\n{::isStatusModified} or {::isStatusNew} to get more information. "
            }
          },
          "265": {
            "16": {
              "name": "getLineDiffs",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "path",
                "text"
              ],
              "range": [
                [
                  265,
                  16
                ],
                [
                  276,
                  1
                ]
              ],
              "doc": " Public: Retrieves the line diffs comparing the `HEAD` version of the given\npath and the given text.\n\npath - The {String} path relative to the repository.\ntext - The {String} to compare against the `HEAD` contents\n\nReturns an {Array} of hunk {Object}s with the following keys:\n  :oldStart - The line {Number} of the old hunk.\n  :newStart - The line {Number} of the new hunk.\n  :oldLines - The {Number} of lines in the old hunk.\n  :newLines - The {Number} of lines in the new hunk "
            }
          },
          "276": {
            "18": {
              "name": "getConfigValue",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "key",
                "path"
              ],
              "range": [
                [
                  276,
                  18
                ],
                [
                  276,
                  66
                ]
              ],
              "doc": " Public: Returns the git configuration value specified by the key.\n\npath - An optional {String} path in the repository to get this information\n       for, only needed if the repository has submodules. "
            }
          },
          "282": {
            "16": {
              "name": "getOriginUrl",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "path"
              ],
              "range": [
                [
                  282,
                  16
                ],
                [
                  282,
                  67
                ]
              ],
              "doc": " Public: Returns the origin url of the repository.\n\npath - An optional {String} path in the repository to get this information\n       for, only needed if the repository has submodules. "
            }
          },
          "291": {
            "21": {
              "name": "getUpstreamBranch",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "path"
              ],
              "range": [
                [
                  291,
                  21
                ],
                [
                  291,
                  64
                ]
              ],
              "doc": " Public: Returns the upstream branch for the current HEAD, or null if there\nis no upstream branch for the current HEAD.\n\npath - An optional {String} path in the repo to get this information for,\n       only needed if the repository contains submodules.\n\nReturns a {String} branch name such as `refs/remotes/origin/master`. "
            }
          },
          "298": {
            "22": {
              "name": "getReferenceTarget",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "reference",
                "path"
              ],
              "range": [
                [
                  298,
                  22
                ],
                [
                  310,
                  1
                ]
              ],
              "doc": " Public: Returns the current SHA for the given reference.\n\nreference - The {String} reference to get the target of.\npath - An optional {String} path in the repo to get the reference target\n       for. Only needed if the repository contains submodules. "
            }
          },
          "310": {
            "17": {
              "name": "getReferences",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "path"
              ],
              "range": [
                [
                  310,
                  17
                ],
                [
                  310,
                  56
                ]
              ],
              "doc": " Public: Gets all the local and remote references.\n\npath - An optional {String} path in the repository to get this information\n       for, only needed if the repository has submodules.\n\nReturns an {Object} with the following keys:\n :heads - An {Array} of head reference names.\n :remotes - An {Array} of remote reference names.\n :tags - An {Array} of tag reference names. "
            }
          },
          "318": {
            "23": {
              "name": "getAheadBehindCount",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "reference",
                "path"
              ],
              "range": [
                [
                  318,
                  23
                ],
                [
                  330,
                  1
                ]
              ],
              "doc": " Public: Returns the number of commits behind the current branch is from the\nits upstream remote branch.\n\nreference - The {String} branch reference name.\npath      - The {String} path in the repository to get this information for,\n            only needed if the repository contains submodules. "
            }
          },
          "330": {
            "37": {
              "name": "getCachedUpstreamAheadBehindCount",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "path"
              ],
              "range": [
                [
                  330,
                  37
                ],
                [
                  338,
                  1
                ]
              ],
              "doc": " Public: Get the cached ahead/behind commit counts for the current branch's\nupstream branch.\n\npath - An optional {String} path in the repository to get this information\n       for, only needed if the repository has submodules.\n\nReturns an {Object} with the following keys:\n  :ahead  - The {Number} of commits ahead.\n  :behind - The {Number} of commits behind. "
            }
          },
          "338": {
            "23": {
              "name": "getCachedPathStatus",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "path"
              ],
              "range": [
                [
                  338,
                  23
                ],
                [
                  342,
                  1
                ]
              ],
              "doc": " Public: Get the cached status for the given path.\n\npath - A {String} path in the repository, relative or absolute.\n\nReturns a status {Number} or null if the path is not in the cache. "
            }
          },
          "342": {
            "13": {
              "name": "hasBranch",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "branch"
              ],
              "range": [
                [
                  342,
                  13
                ],
                [
                  342,
                  68
                ]
              ],
              "doc": "Public: Returns true if the given branch exists. "
            }
          },
          "346": {
            "17": {
              "name": "refreshStatus",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  346,
                  17
                ],
                [
                  364,
                  55
                ]
              ],
              "doc": " Private: Refreshes the current git status in an outside process and asynchronously\nupdates the relevant properties. "
            }
          }
        },
        "exports": 40
      },
      "src/gutter-component.coffee": {
        "objects": {
          "0": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  0,
                  4
                ],
                [
                  0,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "1": {
            "8": {
              "name": "React",
              "type": "import",
              "range": [
                [
                  1,
                  8
                ],
                [
                  1,
                  32
                ]
              ],
              "bindingType": "variable",
              "module": "react-atom-fork@^0.11.1"
            }
          },
          "2": {
            "1": {
              "type": "import",
              "range": [
                [
                  2,
                  1
                ],
                [
                  2,
                  3
                ]
              ],
              "bindingType": "variable",
              "module": "reactionary-atom-fork@^1.0.0",
              "name": "div",
              "exportsProperty": "div"
            }
          },
          "3": {
            "1": {
              "type": "import",
              "range": [
                [
                  3,
                  1
                ],
                [
                  3,
                  7
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1",
              "name": "isEqual",
              "exportsProperty": "isEqual"
            },
            "10": {
              "type": "import",
              "range": [
                [
                  3,
                  10
                ],
                [
                  3,
                  29
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1",
              "name": "isEqualForProperties",
              "exportsProperty": "isEqualForProperties"
            },
            "32": {
              "type": "import",
              "range": [
                [
                  3,
                  32
                ],
                [
                  3,
                  45
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1",
              "name": "multiplyString",
              "exportsProperty": "multiplyString"
            },
            "48": {
              "type": "import",
              "range": [
                [
                  3,
                  48
                ],
                [
                  3,
                  54
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1",
              "name": "toArray",
              "exportsProperty": "toArray"
            }
          },
          "4": {
            "13": {
              "name": "Decoration",
              "type": "import",
              "range": [
                [
                  4,
                  13
                ],
                [
                  4,
                  34
                ]
              ],
              "bindingType": "variable",
              "path": "./decoration"
            }
          },
          "5": {
            "18": {
              "name": "SubscriberMixin",
              "type": "import",
              "range": [
                [
                  5,
                  18
                ],
                [
                  5,
                  45
                ]
              ],
              "bindingType": "variable",
              "path": "./subscriber-mixin"
            }
          },
          "7": {
            "13": {
              "name": "WrapperDiv",
              "type": "function",
              "range": [
                [
                  7,
                  13
                ],
                [
                  7,
                  41
                ]
              ]
            }
          },
          "10": {
            "18": {
              "name": "GutterComponent",
              "type": "function",
              "range": [
                [
                  10,
                  18
                ],
                [
                  227,
                  39
                ]
              ]
            }
          },
          "11": {
            "15": {
              "name": "'GutterComponent'",
              "type": "primitive",
              "range": [
                [
                  11,
                  15
                ],
                [
                  11,
                  31
                ]
              ]
            }
          },
          "12": {
            "10": {
              "type": "primitive",
              "range": [
                [
                  12,
                  10
                ],
                [
                  12,
                  26
                ]
              ]
            }
          },
          "14": {
            "23": {
              "type": "primitive",
              "range": [
                [
                  14,
                  23
                ],
                [
                  14,
                  26
                ]
              ]
            }
          },
          "15": {
            "17": {
              "type": "primitive",
              "range": [
                [
                  15,
                  17
                ],
                [
                  15,
                  20
                ]
              ]
            }
          },
          "17": {
            "10": {
              "name": "render",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  17,
                  10
                ],
                [
                  29,
                  1
                ]
              ],
              "doc": null
            }
          },
          "29": {
            "16": {
              "name": "getTransform",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  29,
                  16
                ],
                [
                  37,
                  1
                ]
              ],
              "doc": null
            }
          },
          "37": {
            "22": {
              "name": "componentWillMount",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  37,
                  22
                ],
                [
                  43,
                  1
                ]
              ],
              "doc": null
            }
          },
          "43": {
            "21": {
              "name": "componentDidMount",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  43,
                  21
                ],
                [
                  50,
                  1
                ]
              ],
              "doc": null
            }
          },
          "50": {
            "25": {
              "name": "shouldComponentUpdate",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "newProps"
              ],
              "range": [
                [
                  50,
                  25
                ],
                [
                  64,
                  1
                ]
              ],
              "doc": null
            }
          },
          "64": {
            "22": {
              "name": "componentDidUpdate",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "oldProps"
              ],
              "range": [
                [
                  64,
                  22
                ],
                [
                  74,
                  1
                ]
              ],
              "doc": null
            }
          },
          "74": {
            "24": {
              "name": "clearScreenRowCaches",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  74,
                  24
                ],
                [
                  80,
                  1
                ]
              ],
              "doc": null
            }
          },
          "80": {
            "25": {
              "name": "appendDummyLineNumber",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  80,
                  25
                ],
                [
                  86,
                  1
                ]
              ],
              "doc": null
            }
          },
          "86": {
            "25": {
              "name": "updateDummyLineNumber",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  86,
                  25
                ],
                [
                  89,
                  1
                ]
              ],
              "doc": null
            }
          },
          "89": {
            "21": {
              "name": "updateLineNumbers",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  89,
                  21
                ],
                [
                  93,
                  1
                ]
              ],
              "doc": null
            }
          },
          "93": {
            "40": {
              "name": "appendOrUpdateVisibleLineNumberNodes",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  93,
                  40
                ],
                [
                  138,
                  1
                ]
              ],
              "doc": null
            }
          },
          "138": {
            "25": {
              "name": "removeLineNumberNodes",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "lineNumberIdsToPreserve"
              ],
              "range": [
                [
                  138,
                  25
                ],
                [
                  150,
                  1
                ]
              ],
              "doc": null
            }
          },
          "150": {
            "23": {
              "name": "buildLineNumberHTML",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "bufferRow",
                "softWrapped",
                "maxLineNumberDigits",
                "screenRow"
              ],
              "range": [
                [
                  150,
                  23
                ],
                [
                  169,
                  1
                ]
              ],
              "doc": null
            }
          },
          "169": {
            "28": {
              "name": "buildLineNumberInnerHTML",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "bufferRow",
                "softWrapped",
                "maxLineNumberDigits"
              ],
              "range": [
                [
                  169,
                  28
                ],
                [
                  179,
                  1
                ]
              ],
              "doc": null
            }
          },
          "179": {
            "24": {
              "name": "updateLineNumberNode",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "lineNumberId",
                "bufferRow",
                "screenRow",
                "softWrapped"
              ],
              "range": [
                [
                  179,
                  24
                ],
                [
                  208,
                  1
                ]
              ],
              "doc": null
            }
          },
          "208": {
            "17": {
              "name": "hasDecoration",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "decorations",
                "decoration"
              ],
              "range": [
                [
                  208,
                  17
                ],
                [
                  211,
                  1
                ]
              ],
              "doc": null
            }
          },
          "211": {
            "21": {
              "name": "hasLineNumberNode",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "lineNumberId"
              ],
              "range": [
                [
                  211,
                  21
                ],
                [
                  214,
                  1
                ]
              ],
              "doc": null
            }
          },
          "214": {
            "30": {
              "name": "lineNumberNodeForScreenRow",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "screenRow"
              ],
              "range": [
                [
                  214,
                  30
                ],
                [
                  217,
                  1
                ]
              ],
              "doc": null
            }
          },
          "217": {
            "11": {
              "name": "onClick",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "event"
              ],
              "range": [
                [
                  217,
                  11
                ],
                [
                  227,
                  39
                ]
              ],
              "doc": null
            }
          }
        },
        "exports": 10
      },
      "src/gutter-view.coffee": {
        "objects": {
          "0": {
            "1": {
              "type": "import",
              "range": [
                [
                  0,
                  1
                ],
                [
                  0,
                  4
                ]
              ],
              "bindingType": "variable",
              "path": "./space-pen-extensions",
              "name": "View",
              "exportsProperty": "View"
            },
            "7": {
              "type": "import",
              "range": [
                [
                  0,
                  7
                ],
                [
                  0,
                  7
                ]
              ],
              "bindingType": "variable",
              "path": "./space-pen-extensions",
              "name": "$",
              "exportsProperty": "$"
            },
            "10": {
              "type": "import",
              "range": [
                [
                  0,
                  10
                ],
                [
                  0,
                  11
                ]
              ],
              "bindingType": "variable",
              "path": "./space-pen-extensions",
              "name": "$$",
              "exportsProperty": "$$"
            },
            "14": {
              "type": "import",
              "range": [
                [
                  0,
                  14
                ],
                [
                  0,
                  16
                ]
              ],
              "bindingType": "variable",
              "path": "./space-pen-extensions",
              "name": "$$$",
              "exportsProperty": "$$$"
            }
          },
          "1": {
            "1": {
              "type": "import",
              "range": [
                [
                  1,
                  1
                ],
                [
                  1,
                  5
                ]
              ],
              "bindingType": "variable",
              "module": "text-buffer@^3.0.0",
              "name": "Range",
              "exportsProperty": "Range"
            }
          },
          "2": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  2,
                  4
                ],
                [
                  2,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "8": {
            "0": {
              "type": "class",
              "name": "GutterView",
              "superClass": "View",
              "bindingType": "exports",
              "classProperties": [
                [
                  9,
                  12
                ]
              ],
              "prototypeProperties": [
                [
                  13,
                  18
                ],
                [
                  14,
                  17
                ],
                [
                  16,
                  14
                ],
                [
                  19,
                  15
                ],
                [
                  28,
                  16
                ],
                [
                  31,
                  21
                ],
                [
                  53,
                  17
                ],
                [
                  56,
                  13
                ],
                [
                  62,
                  22
                ],
                [
                  68,
                  25
                ],
                [
                  74,
                  33
                ],
                [
                  83,
                  24
                ],
                [
                  91,
                  22
                ],
                [
                  101,
                  27
                ],
                [
                  115,
                  18
                ],
                [
                  126,
                  23
                ],
                [
                  135,
                  21
                ],
                [
                  169,
                  23
                ],
                [
                  175,
                  22
                ],
                [
                  179,
                  22
                ],
                [
                  190,
                  21
                ],
                [
                  194,
                  25
                ],
                [
                  221,
                  25
                ],
                [
                  235,
                  24
                ],
                [
                  242,
                  20
                ],
                [
                  250,
                  18
                ]
              ],
              "doc": " Private: Represents the portion of the {EditorView} containing row numbers.\n\nThe gutter also indicates if rows are folded. ",
              "range": [
                [
                  8,
                  0
                ],
                [
                  274,
                  29
                ]
              ]
            }
          },
          "9": {
            "12": {
              "name": "content",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  9,
                  12
                ],
                [
                  13,
                  1
                ]
              ]
            }
          },
          "13": {
            "18": {
              "name": "firstScreenRow",
              "type": "primitive",
              "range": [
                [
                  13,
                  18
                ],
                [
                  13,
                  21
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "14": {
            "17": {
              "name": "lastScreenRow",
              "type": "primitive",
              "range": [
                [
                  14,
                  17
                ],
                [
                  14,
                  20
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "16": {
            "14": {
              "name": "initialize",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  16,
                  14
                ],
                [
                  19,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "19": {
            "15": {
              "name": "afterAttach",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "onDom"
              ],
              "range": [
                [
                  19,
                  15
                ],
                [
                  28,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "28": {
            "16": {
              "name": "beforeRemove",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  28,
                  16
                ],
                [
                  31,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "31": {
            "21": {
              "name": "handleMouseEvents",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "e"
              ],
              "range": [
                [
                  31,
                  21
                ],
                [
                  53,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "53": {
            "17": {
              "name": "getEditorView",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  53,
                  17
                ],
                [
                  56,
                  1
                ]
              ],
              "doc": " Private: Retrieves the containing {EditorView}.\n\nReturns an {EditorView}. "
            }
          },
          "56": {
            "13": {
              "name": "getEditor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  56,
                  13
                ],
                [
                  62,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "62": {
            "22": {
              "name": "setShowLineNumbers",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "showLineNumbers"
              ],
              "range": [
                [
                  62,
                  22
                ],
                [
                  68,
                  1
                ]
              ],
              "doc": " Private: Defines whether to show the gutter or not.\n\nshowLineNumbers - A {Boolean} which, if `false`, hides the gutter "
            }
          },
          "68": {
            "25": {
              "name": "getLineNumberElements",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  68,
                  25
                ],
                [
                  74,
                  1
                ]
              ],
              "doc": " Private: Get all the line-number divs.\n\nReturns a list of {HTMLElement}s. "
            }
          },
          "74": {
            "33": {
              "name": "getLineNumberElementsForClass",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "klass"
              ],
              "range": [
                [
                  74,
                  33
                ],
                [
                  83,
                  1
                ]
              ],
              "doc": " Private: Get all the line-number divs.\n\nReturns a list of {HTMLElement}s. "
            }
          },
          "83": {
            "24": {
              "name": "getLineNumberElement",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRow"
              ],
              "range": [
                [
                  83,
                  24
                ],
                [
                  91,
                  1
                ]
              ],
              "doc": " Private: Get a single line-number div.\n\n* bufferRow: 0 based line number\n\nReturns a list of {HTMLElement}s that correspond to the bufferRow. More than\none in the list indicates a wrapped line. "
            }
          },
          "91": {
            "22": {
              "name": "addClassToAllLines",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "klass"
              ],
              "range": [
                [
                  91,
                  22
                ],
                [
                  101,
                  1
                ]
              ],
              "doc": " Private: Add a class to all line-number divs.\n\n* klass: string class name\n\nReturns true if the class was added to any lines "
            }
          },
          "101": {
            "27": {
              "name": "removeClassFromAllLines",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "klass"
              ],
              "range": [
                [
                  101,
                  27
                ],
                [
                  115,
                  1
                ]
              ],
              "doc": " Private: Remove a class from all line-number divs.\n\n* klass: string class name. Can only be one class name. i.e. 'my-class'\n\nReturns true if the class was removed from any lines "
            }
          },
          "115": {
            "18": {
              "name": "addClassToLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRow",
                "klass"
              ],
              "range": [
                [
                  115,
                  18
                ],
                [
                  126,
                  1
                ]
              ],
              "doc": " Private: Add a class to a single line-number div\n\n* bufferRow: 0 based line number\n* klass: string class name\n\nReturns true if there were lines the class was added to "
            }
          },
          "126": {
            "23": {
              "name": "removeClassFromLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRow",
                "klass"
              ],
              "range": [
                [
                  126,
                  23
                ],
                [
                  135,
                  1
                ]
              ],
              "doc": " Private: Remove a class from a single line-number div\n\n* bufferRow: 0 based line number\n* klass: string class name\n\nReturns true if there were lines the class was removed from "
            }
          },
          "135": {
            "21": {
              "name": "updateLineNumbers",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "changes",
                "startScreenRow",
                "endScreenRow"
              ],
              "range": [
                [
                  135,
                  21
                ],
                [
                  169,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "169": {
            "23": {
              "name": "prependLineElements",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "lineElements"
              ],
              "range": [
                [
                  169,
                  23
                ],
                [
                  175,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "175": {
            "22": {
              "name": "appendLineElements",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "lineElements"
              ],
              "range": [
                [
                  175,
                  22
                ],
                [
                  179,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "179": {
            "22": {
              "name": "removeLineElements",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "numberOfElements"
              ],
              "range": [
                [
                  179,
                  22
                ],
                [
                  190,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "190": {
            "21": {
              "name": "buildLineElements",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "startScreenRow",
                "endScreenRow"
              ],
              "range": [
                [
                  190,
                  21
                ],
                [
                  194,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "194": {
            "25": {
              "name": "buildLineElementsHtml",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "startScreenRow",
                "endScreenRow"
              ],
              "range": [
                [
                  194,
                  25
                ],
                [
                  221,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "221": {
            "25": {
              "name": "updateFoldableClasses",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "changes"
              ],
              "range": [
                [
                  221,
                  25
                ],
                [
                  235,
                  1
                ]
              ],
              "doc": " Private: Called to update the 'foldable' class of line numbers when there's\na change to the display buffer that doesn't regenerate all the line numbers\nanyway. "
            }
          },
          "235": {
            "24": {
              "name": "removeLineHighlights",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  235,
                  24
                ],
                [
                  242,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "242": {
            "20": {
              "name": "addLineHighlight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "row",
                "emptySelection"
              ],
              "range": [
                [
                  242,
                  20
                ],
                [
                  250,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "250": {
            "18": {
              "name": "highlightLines",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  250,
                  18
                ],
                [
                  274,
                  29
                ]
              ],
              "doc": "~Private~"
            }
          }
        },
        "exports": 8
      },
      "src/highlight-component.coffee": {
        "objects": {
          "0": {
            "8": {
              "name": "React",
              "type": "import",
              "range": [
                [
                  0,
                  8
                ],
                [
                  0,
                  32
                ]
              ],
              "bindingType": "variable",
              "module": "react-atom-fork@^0.11.1"
            }
          },
          "1": {
            "1": {
              "type": "import",
              "range": [
                [
                  1,
                  1
                ],
                [
                  1,
                  3
                ]
              ],
              "bindingType": "variable",
              "module": "reactionary-atom-fork@^1.0.0",
              "name": "div",
              "exportsProperty": "div"
            }
          },
          "2": {
            "1": {
              "type": "import",
              "range": [
                [
                  2,
                  1
                ],
                [
                  2,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1",
              "name": "isEqualForProperties",
              "exportsProperty": "isEqualForProperties"
            }
          },
          "5": {
            "21": {
              "name": "HighlightComponent",
              "type": "function",
              "range": [
                [
                  5,
                  21
                ],
                [
                  89,
                  110
                ]
              ]
            }
          },
          "6": {
            "15": {
              "name": "'HighlightComponent'",
              "type": "primitive",
              "range": [
                [
                  6,
                  15
                ],
                [
                  6,
                  34
                ]
              ]
            }
          },
          "8": {
            "10": {
              "name": "render",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  8,
                  10
                ],
                [
                  20,
                  1
                ]
              ],
              "doc": null
            }
          },
          "20": {
            "21": {
              "name": "componentDidMount",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  20,
                  21
                ],
                [
                  27,
                  1
                ]
              ],
              "doc": null
            }
          },
          "27": {
            "24": {
              "name": "componentWillUnmount",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  27,
                  24
                ],
                [
                  30,
                  1
                ]
              ],
              "doc": null
            }
          },
          "30": {
            "23": {
              "name": "startFlashAnimation",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  30,
                  23
                ],
                [
                  42,
                  1
                ]
              ],
              "doc": null
            }
          },
          "42": {
            "27": {
              "name": "renderSingleLineRegions",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  42,
                  27
                ],
                [
                  53,
                  1
                ]
              ],
              "doc": null
            }
          },
          "53": {
            "26": {
              "name": "renderMultiLineRegions",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  53,
                  26
                ],
                [
                  88,
                  1
                ]
              ],
              "doc": null
            }
          },
          "88": {
            "25": {
              "name": "shouldComponentUpdate",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "newProps"
              ],
              "range": [
                [
                  88,
                  25
                ],
                [
                  89,
                  110
                ]
              ],
              "doc": null
            }
          }
        },
        "exports": 5
      },
      "src/highlights-component.coffee": {
        "objects": {
          "0": {
            "8": {
              "name": "React",
              "type": "import",
              "range": [
                [
                  0,
                  8
                ],
                [
                  0,
                  32
                ]
              ],
              "bindingType": "variable",
              "module": "react-atom-fork@^0.11.1"
            }
          },
          "1": {
            "1": {
              "type": "import",
              "range": [
                [
                  1,
                  1
                ],
                [
                  1,
                  3
                ]
              ],
              "bindingType": "variable",
              "module": "reactionary-atom-fork@^1.0.0",
              "name": "div",
              "exportsProperty": "div"
            }
          },
          "2": {
            "1": {
              "type": "import",
              "range": [
                [
                  2,
                  1
                ],
                [
                  2,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1",
              "name": "isEqualForProperties",
              "exportsProperty": "isEqualForProperties"
            }
          },
          "3": {
            "21": {
              "name": "HighlightComponent",
              "type": "import",
              "range": [
                [
                  3,
                  21
                ],
                [
                  3,
                  51
                ]
              ],
              "bindingType": "variable",
              "path": "./highlight-component"
            }
          },
          "6": {
            "22": {
              "name": "HighlightsComponent",
              "type": "function",
              "range": [
                [
                  6,
                  22
                ],
                [
                  24,
                  148
                ]
              ]
            }
          },
          "7": {
            "15": {
              "name": "'HighlightsComponent'",
              "type": "primitive",
              "range": [
                [
                  7,
                  15
                ],
                [
                  7,
                  35
                ]
              ]
            }
          },
          "9": {
            "10": {
              "name": "render",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  9,
                  10
                ],
                [
                  13,
                  1
                ]
              ],
              "doc": null
            }
          },
          "13": {
            "20": {
              "name": "renderHighlights",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  13,
                  20
                ],
                [
                  23,
                  1
                ]
              ],
              "doc": null
            }
          },
          "23": {
            "25": {
              "name": "shouldComponentUpdate",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "newProps"
              ],
              "range": [
                [
                  23,
                  25
                ],
                [
                  24,
                  148
                ]
              ],
              "doc": null
            }
          }
        },
        "exports": 6
      },
      "src/input-component.coffee": {
        "objects": {
          "0": {
            "1": {
              "type": "import",
              "range": [
                [
                  0,
                  1
                ],
                [
                  0,
                  4
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1",
              "name": "last",
              "exportsProperty": "last"
            },
            "7": {
              "type": "import",
              "range": [
                [
                  0,
                  7
                ],
                [
                  0,
                  13
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1",
              "name": "isEqual",
              "exportsProperty": "isEqual"
            }
          },
          "1": {
            "8": {
              "name": "React",
              "type": "import",
              "range": [
                [
                  1,
                  8
                ],
                [
                  1,
                  32
                ]
              ],
              "bindingType": "variable",
              "module": "react-atom-fork@^0.11.1"
            }
          },
          "2": {
            "1": {
              "type": "import",
              "range": [
                [
                  2,
                  1
                ],
                [
                  2,
                  5
                ]
              ],
              "bindingType": "variable",
              "module": "reactionary-atom-fork@^1.0.0",
              "name": "input",
              "exportsProperty": "input"
            }
          },
          "5": {
            "17": {
              "name": "InputComponent",
              "type": "function",
              "range": [
                [
                  5,
                  17
                ],
                [
                  43,
                  25
                ]
              ]
            }
          },
          "6": {
            "15": {
              "name": "'InputComponent'",
              "type": "primitive",
              "range": [
                [
                  6,
                  15
                ],
                [
                  6,
                  30
                ]
              ]
            }
          },
          "8": {
            "10": {
              "name": "render",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  8,
                  10
                ],
                [
                  13,
                  1
                ]
              ],
              "doc": null
            }
          },
          "13": {
            "19": {
              "name": "getInitialState",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  13,
                  19
                ],
                [
                  16,
                  1
                ]
              ],
              "doc": null
            }
          },
          "16": {
            "21": {
              "name": "componentDidMount",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  16,
                  21
                ],
                [
                  21,
                  1
                ]
              ],
              "doc": null
            }
          },
          "21": {
            "22": {
              "name": "componentDidUpdate",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  21,
                  22
                ],
                [
                  27,
                  1
                ]
              ],
              "doc": null
            }
          },
          "27": {
            "27": {
              "name": "isPressAndHoldCharacter",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "char"
              ],
              "range": [
                [
                  27,
                  27
                ],
                [
                  30,
                  1
                ]
              ],
              "doc": null
            }
          },
          "30": {
            "25": {
              "name": "shouldComponentUpdate",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "newProps"
              ],
              "range": [
                [
                  30,
                  25
                ],
                [
                  33,
                  1
                ]
              ],
              "doc": null
            }
          },
          "33": {
            "11": {
              "name": "onPaste",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "e"
              ],
              "range": [
                [
                  33,
                  11
                ],
                [
                  36,
                  1
                ]
              ],
              "doc": null
            }
          },
          "36": {
            "11": {
              "name": "onFocus",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  36,
                  11
                ],
                [
                  39,
                  1
                ]
              ],
              "doc": null
            }
          },
          "39": {
            "10": {
              "name": "onBlur",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  39,
                  10
                ],
                [
                  42,
                  1
                ]
              ],
              "doc": null
            }
          },
          "42": {
            "9": {
              "name": "focus",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  42,
                  9
                ],
                [
                  43,
                  25
                ]
              ],
              "doc": null
            }
          }
        },
        "exports": 5
      },
      "src/keymap-extensions.coffee": {
        "objects": {
          "0": {
            "5": {
              "name": "fs",
              "type": "import",
              "range": [
                [
                  0,
                  5
                ],
                [
                  0,
                  21
                ]
              ],
              "bindingType": "variable",
              "module": "fs-plus@^2.2.6"
            }
          },
          "1": {
            "7": {
              "name": "path",
              "type": "import",
              "range": [
                [
                  1,
                  7
                ],
                [
                  1,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "path",
              "builtin": true
            }
          },
          "2": {
            "16": {
              "name": "KeymapManager",
              "type": "import",
              "range": [
                [
                  2,
                  16
                ],
                [
                  2,
                  36
                ]
              ],
              "bindingType": "variable",
              "module": "atom-keymap@^1.0.2"
            }
          },
          "3": {
            "7": {
              "name": "CSON",
              "type": "import",
              "range": [
                [
                  3,
                  7
                ],
                [
                  3,
                  22
                ]
              ],
              "bindingType": "variable",
              "module": "season@^1.0.2"
            }
          },
          "4": {
            "1": {
              "type": "import",
              "range": [
                [
                  4,
                  1
                ],
                [
                  4,
                  6
                ]
              ],
              "bindingType": "variable",
              "module": "space-pen@3.2.0",
              "name": "jQuery",
              "exportsProperty": "jQuery"
            }
          },
          "6": {
            "36": {
              "name": "KeymapManager.prototype.loadBundledKeymaps",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  6,
                  36
                ],
                [
                  9,
                  0
                ]
              ],
              "doc": null
            }
          },
          "10": {
            "35": {
              "name": "KeymapManager.prototype.getUserKeymapPath",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  10,
                  35
                ],
                [
                  15,
                  0
                ]
              ],
              "doc": null
            }
          },
          "16": {
            "32": {
              "name": "KeymapManager.prototype.loadUserKeymap",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  16,
                  32
                ],
                [
                  22,
                  74
                ]
              ],
              "doc": null
            }
          },
          "23": {
            "32": {
              "name": "jQuery.Event.prototype.abortKeyBinding",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  23,
                  32
                ],
                [
                  25,
                  0
                ]
              ],
              "doc": null
            }
          }
        },
        "exports": 26
      },
      "src/language-mode.coffee": {
        "objects": {
          "0": {
            "1": {
              "type": "import",
              "range": [
                [
                  0,
                  1
                ],
                [
                  0,
                  5
                ]
              ],
              "bindingType": "variable",
              "module": "text-buffer@^3.0.0",
              "name": "Range",
              "exportsProperty": "Range"
            }
          },
          "1": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  1,
                  4
                ],
                [
                  1,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "2": {
            "1": {
              "type": "import",
              "range": [
                [
                  2,
                  1
                ],
                [
                  2,
                  10
                ]
              ],
              "bindingType": "variable",
              "module": "oniguruma@^3.0.3",
              "name": "OnigRegExp",
              "exportsProperty": "OnigRegExp"
            }
          },
          "3": {
            "1": {
              "type": "import",
              "range": [
                [
                  3,
                  1
                ],
                [
                  3,
                  7
                ]
              ],
              "bindingType": "variable",
              "module": "emissary@^1.2.2",
              "name": "Emitter",
              "exportsProperty": "Emitter"
            },
            "10": {
              "type": "import",
              "range": [
                [
                  3,
                  10
                ],
                [
                  3,
                  19
                ]
              ],
              "bindingType": "variable",
              "module": "emissary@^1.2.2",
              "name": "Subscriber",
              "exportsProperty": "Subscriber"
            }
          },
          "6": {
            "0": {
              "type": "class",
              "name": "LanguageMode",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  13,
                  15
                ],
                [
                  16,
                  11
                ],
                [
                  19,
                  33
                ],
                [
                  30,
                  35
                ],
                [
                  100,
                  11
                ],
                [
                  107,
                  13
                ],
                [
                  114,
                  24
                ],
                [
                  128,
                  17
                ],
                [
                  141,
                  30
                ],
                [
                  146,
                  33
                ],
                [
                  161,
                  34
                ],
                [
                  181,
                  25
                ],
                [
                  186,
                  29
                ],
                [
                  194,
                  32
                ],
                [
                  201,
                  30
                ],
                [
                  208,
                  35
                ],
                [
                  241,
                  31
                ],
                [
                  265,
                  29
                ],
                [
                  274,
                  24
                ],
                [
                  281,
                  23
                ],
                [
                  288,
                  34
                ],
                [
                  308,
                  23
                ],
                [
                  312,
                  32
                ],
                [
                  315,
                  32
                ],
                [
                  318,
                  25
                ]
              ],
              "doc": "~Private~",
              "range": [
                [
                  6,
                  0
                ],
                [
                  319,
                  57
                ]
              ]
            }
          },
          "13": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  13,
                  15
                ],
                [
                  16,
                  1
                ]
              ],
              "doc": " Private: Sets up a `LanguageMode` for the given {Editor}.\n\neditor - The {Editor} to associate with "
            }
          },
          "16": {
            "11": {
              "name": "destroy",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  16,
                  11
                ],
                [
                  19,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "19": {
            "33": {
              "name": "toggleLineCommentForBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "row"
              ],
              "range": [
                [
                  19,
                  33
                ],
                [
                  30,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "30": {
            "35": {
              "name": "toggleLineCommentsForBufferRows",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "start",
                "end"
              ],
              "range": [
                [
                  30,
                  35
                ],
                [
                  100,
                  1
                ]
              ],
              "doc": " Private: Wraps the lines between two rows in comments.\n\nIf the language doesn't have comment, nothing happens.\n\nstartRow - The row {Number} to start at\nendRow - The row {Number} to end at\n\nReturns an {Array} of the commented {Ranges}. "
            }
          },
          "100": {
            "11": {
              "name": "foldAll",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  100,
                  11
                ],
                [
                  107,
                  1
                ]
              ],
              "doc": "Private: Folds all the foldable lines in the buffer. "
            }
          },
          "107": {
            "13": {
              "name": "unfoldAll",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  107,
                  13
                ],
                [
                  114,
                  1
                ]
              ],
              "doc": "Private: Unfolds all the foldable lines in the buffer. "
            }
          },
          "114": {
            "24": {
              "name": "foldAllAtIndentLevel",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "indentLevel"
              ],
              "range": [
                [
                  114,
                  24
                ],
                [
                  128,
                  1
                ]
              ],
              "doc": " Private: Fold all comment and code blocks at a given indentLevel\n\nindentLevel - A {Number} indicating indentLevel; 0 based. "
            }
          },
          "128": {
            "17": {
              "name": "foldBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRow"
              ],
              "range": [
                [
                  128,
                  17
                ],
                [
                  141,
                  1
                ]
              ],
              "doc": " Private: Given a buffer row, creates a fold at it.\n\nbufferRow - A {Number} indicating the buffer row\n\nReturns the new {Fold}. "
            }
          },
          "141": {
            "30": {
              "name": "rowRangeForFoldAtBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRow"
              ],
              "range": [
                [
                  141,
                  30
                ],
                [
                  146,
                  1
                ]
              ],
              "doc": " Private: Find the row range for a fold at a given bufferRow. Will handle comments\nand code.\n\nbufferRow - A {Number} indicating the buffer row\n\nReturns an {Array} of the [startRow, endRow]. Returns null if no range. "
            }
          },
          "146": {
            "33": {
              "name": "rowRangeForCommentAtBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRow"
              ],
              "range": [
                [
                  146,
                  33
                ],
                [
                  161,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "161": {
            "34": {
              "name": "rowRangeForCodeFoldAtBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRow"
              ],
              "range": [
                [
                  161,
                  34
                ],
                [
                  181,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "181": {
            "25": {
              "name": "isFoldableAtBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRow"
              ],
              "range": [
                [
                  181,
                  25
                ],
                [
                  186,
                  1
                ]
              ],
              "doc": " Public: Returns a {Boolean} indicating whether the given buffer row starts a\nfoldable row range. Rows that are \"foldable\" have a fold icon next to their\nicon in the gutter in the default configuration. "
            }
          },
          "186": {
            "29": {
              "name": "isFoldableCodeAtBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRow"
              ],
              "range": [
                [
                  186,
                  29
                ],
                [
                  194,
                  1
                ]
              ],
              "doc": " Private: Returns a {Boolean} indicating whether the given buffer row starts\na a foldable row range due to the code's indentation patterns. "
            }
          },
          "194": {
            "32": {
              "name": "isFoldableCommentAtBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRow"
              ],
              "range": [
                [
                  194,
                  32
                ],
                [
                  201,
                  1
                ]
              ],
              "doc": " Private: Returns a {Boolean} indicating whether the given buffer row starts\na foldable row range due to being the start of a multi-line comment. "
            }
          },
          "201": {
            "30": {
              "name": "isLineCommentedAtBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRow"
              ],
              "range": [
                [
                  201,
                  30
                ],
                [
                  208,
                  1
                ]
              ],
              "doc": " Private: Returns a {Boolean} indicating whether the line at the given buffer\nrow is a comment. "
            }
          },
          "208": {
            "35": {
              "name": "rowRangeForParagraphAtBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRow"
              ],
              "range": [
                [
                  208,
                  35
                ],
                [
                  241,
                  1
                ]
              ],
              "doc": " Private: Find a row range for a 'paragraph' around specified bufferRow.\nRight now, a paragraph is a block of text bounded by and empty line or a\nblock of text that is not the same type (comments next to source code). "
            }
          },
          "241": {
            "31": {
              "name": "suggestedIndentForBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRow"
              ],
              "range": [
                [
                  241,
                  31
                ],
                [
                  265,
                  1
                ]
              ],
              "doc": " Private: Given a buffer row, this returns a suggested indentation level.\n\nThe indentation level provided is based on the current {LanguageMode}.\n\nbufferRow - A {Number} indicating the buffer row\n\nReturns a {Number}. "
            }
          },
          "265": {
            "29": {
              "name": "minIndentLevelForRowRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "startRow",
                "endRow"
              ],
              "range": [
                [
                  265,
                  29
                ],
                [
                  274,
                  1
                ]
              ],
              "doc": " Private: Calculate a minimum indent level for a range of lines excluding empty lines.\n\nstartRow - The row {Number} to start at\nendRow - The row {Number} to end at\n\nReturns a {Number} of the indent level of the block of lines. "
            }
          },
          "274": {
            "24": {
              "name": "autoIndentBufferRows",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "startRow",
                "endRow"
              ],
              "range": [
                [
                  274,
                  24
                ],
                [
                  281,
                  1
                ]
              ],
              "doc": " Private: Indents all the rows between two buffer row numbers.\n\nstartRow - The row {Number} to start at\nendRow - The row {Number} to end at "
            }
          },
          "281": {
            "23": {
              "name": "autoIndentBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRow",
                "options"
              ],
              "range": [
                [
                  281,
                  23
                ],
                [
                  288,
                  1
                ]
              ],
              "doc": " Private: Given a buffer row, this indents it.\n\nbufferRow - The row {Number}.\noptions - An options {Object} to pass through to {Editor::setIndentationForBufferRow}. "
            }
          },
          "288": {
            "34": {
              "name": "autoDecreaseIndentForBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRow"
              ],
              "range": [
                [
                  288,
                  34
                ],
                [
                  308,
                  1
                ]
              ],
              "doc": " Private: Given a buffer row, this decreases the indentation.\n\nbufferRow - The row {Number} "
            }
          },
          "308": {
            "23": {
              "name": "getRegexForProperty",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scopes",
                "property"
              ],
              "range": [
                [
                  308,
                  23
                ],
                [
                  312,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "312": {
            "32": {
              "name": "increaseIndentRegexForScopes",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scopes"
              ],
              "range": [
                [
                  312,
                  32
                ],
                [
                  315,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "315": {
            "32": {
              "name": "decreaseIndentRegexForScopes",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scopes"
              ],
              "range": [
                [
                  315,
                  32
                ],
                [
                  318,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "318": {
            "25": {
              "name": "foldEndRegexForScopes",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scopes"
              ],
              "range": [
                [
                  318,
                  25
                ],
                [
                  319,
                  57
                ]
              ],
              "doc": "~Private~"
            }
          }
        },
        "exports": 6
      },
      "src/less-compile-cache.coffee": {
        "objects": {
          "0": {
            "7": {
              "name": "path",
              "type": "import",
              "range": [
                [
                  0,
                  7
                ],
                [
                  0,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "path",
              "builtin": true
            }
          },
          "1": {
            "5": {
              "name": "fs",
              "type": "import",
              "range": [
                [
                  1,
                  5
                ],
                [
                  1,
                  21
                ]
              ],
              "bindingType": "variable",
              "module": "fs-plus@^2.2.6"
            }
          },
          "2": {
            "12": {
              "name": "LessCache",
              "type": "import",
              "range": [
                [
                  2,
                  12
                ],
                [
                  2,
                  31
                ]
              ],
              "bindingType": "variable",
              "module": "less-cache@0.13.0"
            }
          },
          "3": {
            "1": {
              "type": "import",
              "range": [
                [
                  3,
                  1
                ],
                [
                  3,
                  10
                ]
              ],
              "bindingType": "variable",
              "module": "emissary@^1.2.2",
              "name": "Subscriber",
              "exportsProperty": "Subscriber"
            }
          },
          "7": {
            "0": {
              "type": "class",
              "name": "LessCompileCache",
              "bindingType": "exports",
              "classProperties": [
                [
                  10,
                  13
                ]
              ],
              "prototypeProperties": [
                [
                  12,
                  15
                ],
                [
                  29,
                  18
                ],
                [
                  32,
                  8
                ],
                [
                  35,
                  14
                ],
                [
                  38,
                  11
                ]
              ],
              "doc": "Private: {LessCache} wrapper used by {ThemeManager} to read stylesheets. ",
              "range": [
                [
                  7,
                  0
                ],
                [
                  38,
                  28
                ]
              ]
            }
          },
          "10": {
            "13": {
              "name": "cacheDir",
              "type": "function",
              "range": [
                [
                  10,
                  13
                ],
                [
                  10,
                  71
                ]
              ],
              "bindingType": "classProperty"
            }
          },
          "12": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  12,
                  15
                ],
                [
                  29,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "29": {
            "18": {
              "name": "setImportPaths",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "importPaths"
              ],
              "range": [
                [
                  29,
                  18
                ],
                [
                  32,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "32": {
            "8": {
              "name": "read",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "stylesheetPath"
              ],
              "range": [
                [
                  32,
                  8
                ],
                [
                  35,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "35": {
            "14": {
              "name": "cssForFile",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "stylesheetPath",
                "lessContent"
              ],
              "range": [
                [
                  35,
                  14
                ],
                [
                  38,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "38": {
            "11": {
              "name": "destroy",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  38,
                  11
                ],
                [
                  38,
                  27
                ]
              ],
              "doc": "~Private~"
            }
          }
        },
        "exports": 7
      },
      "src/lines-component.coffee": {
        "objects": {
          "0": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  0,
                  4
                ],
                [
                  0,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "1": {
            "8": {
              "name": "React",
              "type": "import",
              "range": [
                [
                  1,
                  8
                ],
                [
                  1,
                  32
                ]
              ],
              "bindingType": "variable",
              "module": "react-atom-fork@^0.11.1"
            }
          },
          "2": {
            "1": {
              "type": "import",
              "range": [
                [
                  2,
                  1
                ],
                [
                  2,
                  3
                ]
              ],
              "bindingType": "variable",
              "module": "reactionary-atom-fork@^1.0.0",
              "name": "div",
              "exportsProperty": "div"
            },
            "6": {
              "type": "import",
              "range": [
                [
                  2,
                  6
                ],
                [
                  2,
                  9
                ]
              ],
              "bindingType": "variable",
              "module": "reactionary-atom-fork@^1.0.0",
              "name": "span",
              "exportsProperty": "span"
            }
          },
          "3": {
            "1": {
              "type": "import",
              "range": [
                [
                  3,
                  1
                ],
                [
                  3,
                  8
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1",
              "name": "debounce",
              "exportsProperty": "debounce"
            },
            "11": {
              "type": "import",
              "range": [
                [
                  3,
                  11
                ],
                [
                  3,
                  17
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1",
              "name": "isEqual",
              "exportsProperty": "isEqual"
            },
            "20": {
              "type": "import",
              "range": [
                [
                  3,
                  20
                ],
                [
                  3,
                  39
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1",
              "name": "isEqualForProperties",
              "exportsProperty": "isEqualForProperties"
            },
            "42": {
              "type": "import",
              "range": [
                [
                  3,
                  42
                ],
                [
                  3,
                  55
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1",
              "name": "multiplyString",
              "exportsProperty": "multiplyString"
            },
            "58": {
              "type": "import",
              "range": [
                [
                  3,
                  58
                ],
                [
                  3,
                  64
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1",
              "name": "toArray",
              "exportsProperty": "toArray"
            }
          },
          "4": {
            "1": {
              "type": "import",
              "range": [
                [
                  4,
                  1
                ],
                [
                  4,
                  2
                ]
              ],
              "bindingType": "variable",
              "module": "space-pen@3.2.0",
              "name": "$$",
              "exportsProperty": "$$"
            }
          },
          "6": {
            "13": {
              "name": "Decoration",
              "type": "import",
              "range": [
                [
                  6,
                  13
                ],
                [
                  6,
                  34
                ]
              ],
              "bindingType": "variable",
              "path": "./decoration"
            }
          },
          "7": {
            "19": {
              "name": "CursorsComponent",
              "type": "import",
              "range": [
                [
                  7,
                  19
                ],
                [
                  7,
                  47
                ]
              ],
              "bindingType": "variable",
              "path": "./cursors-component"
            }
          },
          "8": {
            "22": {
              "name": "HighlightsComponent",
              "type": "import",
              "range": [
                [
                  8,
                  22
                ],
                [
                  8,
                  53
                ]
              ],
              "bindingType": "variable",
              "path": "./highlights-component"
            }
          },
          "10": {
            "16": {
              "type": "primitive",
              "range": [
                [
                  10,
                  16
                ],
                [
                  10,
                  111
                ]
              ]
            }
          },
          "11": {
            "15": {
              "type": "primitive",
              "range": [
                [
                  11,
                  15
                ],
                [
                  11,
                  55
                ]
              ]
            },
            "28": {
              "name": "acceptNode",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  11,
                  28
                ],
                [
                  11,
                  54
                ]
              ],
              "doc": null
            }
          },
          "12": {
            "13": {
              "name": "WrapperDiv",
              "type": "function",
              "range": [
                [
                  12,
                  13
                ],
                [
                  12,
                  41
                ]
              ]
            }
          },
          "15": {
            "17": {
              "name": "LinesComponent",
              "type": "function",
              "range": [
                [
                  15,
                  17
                ],
                [
                  348,
                  41
                ]
              ]
            }
          },
          "16": {
            "15": {
              "name": "'LinesComponent'",
              "type": "primitive",
              "range": [
                [
                  16,
                  15
                ],
                [
                  16,
                  30
                ]
              ]
            }
          },
          "18": {
            "10": {
              "name": "render",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  18,
                  10
                ],
                [
                  44,
                  1
                ]
              ],
              "doc": null
            }
          },
          "44": {
            "16": {
              "name": "getTransform",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  44,
                  16
                ],
                [
                  52,
                  1
                ]
              ],
              "doc": null
            }
          },
          "52": {
            "22": {
              "name": "componentWillMount",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  52,
                  22
                ],
                [
                  59,
                  1
                ]
              ],
              "doc": null
            }
          },
          "59": {
            "25": {
              "name": "shouldComponentUpdate",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "newProps"
              ],
              "range": [
                [
                  59,
                  25
                ],
                [
                  79,
                  1
                ]
              ],
              "doc": null
            }
          },
          "79": {
            "22": {
              "name": "componentDidUpdate",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "prevProps"
              ],
              "range": [
                [
                  79,
                  22
                ],
                [
                  88,
                  1
                ]
              ],
              "doc": null
            }
          },
          "88": {
            "24": {
              "name": "clearScreenRowCaches",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  88,
                  24
                ],
                [
                  92,
                  1
                ]
              ],
              "doc": null
            }
          },
          "92": {
            "15": {
              "name": "updateLines",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "updateWidth"
              ],
              "range": [
                [
                  92,
                  15
                ],
                [
                  100,
                  1
                ]
              ],
              "doc": null
            }
          },
          "100": {
            "19": {
              "name": "removeLineNodes",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "visibleLines"
              ],
              "range": [
                [
                  100,
                  19
                ],
                [
                  114,
                  1
                ]
              ],
              "doc": null
            }
          },
          "114": {
            "34": {
              "name": "appendOrUpdateVisibleLineNodes",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "visibleLines",
                "startRow",
                "updateWidth"
              ],
              "range": [
                [
                  114,
                  34
                ],
                [
                  145,
                  1
                ]
              ],
              "doc": null
            }
          },
          "145": {
            "15": {
              "name": "hasLineNode",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "lineId"
              ],
              "range": [
                [
                  145,
                  15
                ],
                [
                  148,
                  1
                ]
              ],
              "doc": null
            }
          },
          "148": {
            "17": {
              "name": "buildLineHTML",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "line",
                "screenRow"
              ],
              "range": [
                [
                  148,
                  17
                ],
                [
                  171,
                  1
                ]
              ],
              "doc": null
            }
          },
          "171": {
            "27": {
              "name": "buildEmptyLineInnerHTML",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "line"
              ],
              "range": [
                [
                  171,
                  27
                ],
                [
                  198,
                  1
                ]
              ],
              "doc": null
            }
          },
          "198": {
            "22": {
              "name": "buildLineInnerHTML",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "line"
              ],
              "range": [
                [
                  198,
                  22
                ],
                [
                  215,
                  1
                ]
              ],
              "doc": null
            }
          },
          "215": {
            "22": {
              "name": "buildEndOfLineHTML",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "line",
                "invisibles"
              ],
              "range": [
                [
                  215,
                  22
                ],
                [
                  228,
                  1
                ]
              ],
              "doc": null
            }
          },
          "228": {
            "20": {
              "name": "updateScopeStack",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "scopeStack",
                "desiredScopes"
              ],
              "range": [
                [
                  228,
                  20
                ],
                [
                  245,
                  1
                ]
              ],
              "doc": null
            }
          },
          "245": {
            "12": {
              "name": "popScope",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "scopeStack"
              ],
              "range": [
                [
                  245,
                  12
                ],
                [
                  249,
                  1
                ]
              ],
              "doc": null
            }
          },
          "249": {
            "13": {
              "name": "pushScope",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "scopeStack",
                "scope"
              ],
              "range": [
                [
                  249,
                  13
                ],
                [
                  253,
                  1
                ]
              ],
              "doc": null
            }
          },
          "253": {
            "18": {
              "name": "updateLineNode",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "line",
                "screenRow",
                "updateWidth"
              ],
              "range": [
                [
                  253,
                  18
                ],
                [
                  278,
                  1
                ]
              ],
              "doc": null
            }
          },
          "278": {
            "17": {
              "name": "hasDecoration",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "decorations",
                "decoration"
              ],
              "range": [
                [
                  278,
                  17
                ],
                [
                  281,
                  1
                ]
              ],
              "doc": null
            }
          },
          "281": {
            "24": {
              "name": "lineNodeForScreenRow",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "screenRow"
              ],
              "range": [
                [
                  281,
                  24
                ],
                [
                  284,
                  1
                ]
              ],
              "doc": null
            }
          },
          "284": {
            "40": {
              "name": "measureLineHeightAndDefaultCharWidth",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  284,
                  40
                ],
                [
                  295,
                  1
                ]
              ],
              "doc": null
            }
          },
          "295": {
            "28": {
              "name": "remeasureCharacterWidths",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  295,
                  28
                ],
                [
                  299,
                  1
                ]
              ],
              "doc": null
            }
          },
          "299": {
            "31": {
              "name": "measureCharactersInNewLines",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  299,
                  31
                ],
                [
                  311,
                  1
                ]
              ],
              "doc": null
            }
          },
          "311": {
            "27": {
              "name": "measureCharactersInLine",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "tokenizedLine",
                "lineNode"
              ],
              "range": [
                [
                  311,
                  27
                ],
                [
                  346,
                  1
                ]
              ],
              "doc": null
            }
          },
          "346": {
            "25": {
              "name": "clearScopedCharWidths",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  346,
                  25
                ],
                [
                  348,
                  41
                ]
              ],
              "doc": null
            }
          }
        },
        "exports": 15
      },
      "src/menu-manager.coffee": {
        "objects": {
          "0": {
            "7": {
              "name": "path",
              "type": "import",
              "range": [
                [
                  0,
                  7
                ],
                [
                  0,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "path",
              "builtin": true
            }
          },
          "2": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  2,
                  4
                ],
                [
                  2,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "3": {
            "6": {
              "name": "ipc",
              "type": "import",
              "range": [
                [
                  3,
                  6
                ],
                [
                  3,
                  18
                ]
              ],
              "bindingType": "variable",
              "module": "ipc"
            }
          },
          "4": {
            "7": {
              "name": "CSON",
              "type": "import",
              "range": [
                [
                  4,
                  7
                ],
                [
                  4,
                  22
                ]
              ],
              "bindingType": "variable",
              "module": "season@^1.0.2"
            }
          },
          "5": {
            "5": {
              "name": "fs",
              "type": "import",
              "range": [
                [
                  5,
                  5
                ],
                [
                  5,
                  21
                ]
              ],
              "bindingType": "variable",
              "module": "fs-plus@^2.2.6"
            }
          },
          "12": {
            "0": {
              "type": "class",
              "name": "MenuManager",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  13,
                  15
                ],
                [
                  37,
                  7
                ],
                [
                  47,
                  19
                ],
                [
                  79,
                  10
                ],
                [
                  88,
                  21
                ],
                [
                  96,
                  9
                ],
                [
                  107,
                  27
                ],
                [
                  117,
                  24
                ],
                [
                  121,
                  18
                ],
                [
                  130,
                  21
                ]
              ],
              "doc": " Public: Provides a registry for menu items that you'd like to appear in the\napplication menu.\n\nAn instance of this class is always available as the `atom.menu` global. ",
              "range": [
                [
                  12,
                  0
                ],
                [
                  131,
                  49
                ]
              ]
            }
          },
          "13": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  13,
                  15
                ],
                [
                  37,
                  1
                ]
              ]
            }
          },
          "37": {
            "7": {
              "name": "add",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "items"
              ],
              "range": [
                [
                  37,
                  7
                ],
                [
                  47,
                  1
                ]
              ],
              "doc": " Public: Adds the given item definition to the existing template.\n\n## Example\n```coffee\n  atom.menu.add [\n    {\n      label: 'Hello'\n      submenu : [{label: 'World!', command: 'hello:world'}]\n    }\n  ]\n```\n\nitems - An {Array} of menu item {Object}s containing the keys:\n  :label   - The {String} menu label.\n  :submenu - An optional {Array} of sub menu items.\n  :command - An optional {String} command to trigger when the item is\n             clicked.\n\nReturns nothing. "
            }
          },
          "47": {
            "19": {
              "name": "includeSelector",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "selector"
              ],
              "range": [
                [
                  47,
                  19
                ],
                [
                  79,
                  1
                ]
              ],
              "doc": " Private: Should the binding for the given selector be included in the menu\ncommands.\n\nselector - A {String} selector to check.\n\nReturns true to include the selector, false otherwise. "
            }
          },
          "79": {
            "10": {
              "name": "update",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  79,
                  10
                ],
                [
                  88,
                  1
                ]
              ],
              "doc": "Public: Refreshes the currently visible menu. "
            }
          },
          "88": {
            "21": {
              "name": "loadPlatformItems",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  88,
                  21
                ],
                [
                  96,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "96": {
            "9": {
              "name": "merge",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "menu",
                "item"
              ],
              "range": [
                [
                  96,
                  9
                ],
                [
                  107,
                  1
                ]
              ],
              "doc": " Private: Merges an item in a submenu aware way such that new items are always\nappended to the bottom of existing menus where possible. "
            }
          },
          "107": {
            "27": {
              "name": "filterMultipleKeystroke",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "keystrokesByCommand"
              ],
              "range": [
                [
                  107,
                  27
                ],
                [
                  117,
                  1
                ]
              ],
              "doc": " Private: OSX can't handle displaying accelerators for multiple keystrokes.\nIf they are sent across, it will stop processing accelerators for the rest\nof the menu items. "
            }
          },
          "117": {
            "24": {
              "name": "sendToBrowserProcess",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "template",
                "keystrokesByCommand"
              ],
              "range": [
                [
                  117,
                  24
                ],
                [
                  121,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "121": {
            "18": {
              "name": "normalizeLabel",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "label"
              ],
              "range": [
                [
                  121,
                  18
                ],
                [
                  130,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "130": {
            "21": {
              "name": "classesForElement",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "element"
              ],
              "range": [
                [
                  130,
                  21
                ],
                [
                  131,
                  49
                ]
              ],
              "doc": "Private: Get an {Array} of {String} classes for the given element. "
            }
          }
        },
        "exports": 12
      },
      "src/package-manager.coffee": {
        "objects": {
          "0": {
            "7": {
              "name": "path",
              "type": "import",
              "range": [
                [
                  0,
                  7
                ],
                [
                  0,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "path",
              "builtin": true
            }
          },
          "2": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  2,
                  4
                ],
                [
                  2,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "3": {
            "1": {
              "type": "import",
              "range": [
                [
                  3,
                  1
                ],
                [
                  3,
                  7
                ]
              ],
              "bindingType": "variable",
              "module": "emissary@^1.2.2",
              "name": "Emitter",
              "exportsProperty": "Emitter"
            }
          },
          "4": {
            "5": {
              "name": "fs",
              "type": "import",
              "range": [
                [
                  4,
                  5
                ],
                [
                  4,
                  21
                ]
              ],
              "bindingType": "variable",
              "module": "fs-plus@^2.2.6"
            }
          },
          "5": {
            "4": {
              "name": "Q",
              "type": "import",
              "range": [
                [
                  5,
                  4
                ],
                [
                  5,
                  14
                ]
              ],
              "bindingType": "variable",
              "module": "q@^1.0.1"
            }
          },
          "7": {
            "10": {
              "name": "Package",
              "type": "import",
              "range": [
                [
                  7,
                  10
                ],
                [
                  7,
                  28
                ]
              ],
              "bindingType": "variable",
              "path": "./package"
            }
          },
          "8": {
            "15": {
              "name": "ThemePackage",
              "type": "import",
              "range": [
                [
                  8,
                  15
                ],
                [
                  8,
                  39
                ]
              ],
              "bindingType": "variable",
              "path": "./theme-package"
            }
          },
          "26": {
            "0": {
              "type": "class",
              "name": "PackageManager",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  29,
                  15
                ],
                [
                  44,
                  14
                ],
                [
                  52,
                  22
                ],
                [
                  55,
                  19
                ],
                [
                  58,
                  19
                ],
                [
                  62,
                  17
                ],
                [
                  68,
                  18
                ],
                [
                  74,
                  12
                ],
                [
                  82,
                  28
                ],
                [
                  85,
                  20
                ],
                [
                  90,
                  19
                ],
                [
                  100,
                  22
                ],
                [
                  105,
                  21
                ],
                [
                  113,
                  21
                ],
                [
                  117,
                  20
                ],
                [
                  121,
                  19
                ],
                [
                  124,
                  29
                ],
                [
                  128,
                  27
                ],
                [
                  137,
                  16
                ],
                [
                  148,
                  15
                ],
                [
                  168,
                  18
                ],
                [
                  172,
                  17
                ],
                [
                  182,
                  20
                ],
                [
                  186,
                  19
                ],
                [
                  190,
                  21
                ],
                [
                  196,
                  29
                ],
                [
                  200,
                  22
                ],
                [
                  210,
                  21
                ],
                [
                  213,
                  17
                ],
                [
                  218,
                  20
                ],
                [
                  221,
                  26
                ],
                [
                  231,
                  28
                ],
                [
                  246,
                  28
                ],
                [
                  250,
                  31
                ]
              ],
              "doc": " Public: Package manager for coordinating the lifecycle of Atom packages.\n\nAn instance of this class is always available as the `atom.packages` global.\n\nPackages can be loaded, activated, and deactivated, and unloaded:\n * Loading a package reads and parses the package's metadata and resources\n   such as keymaps, menus, stylesheets, etc.\n * Activating a package registers the loaded resources and calls `activate()`\n   on the package's main module.\n * Deactivating a package unregisters the package's resources  and calls\n   `deactivate()` on the package's main module.\n * Unloading a package removes it completely from the package manager.\n\nPackages can also be enabled/disabled via the `core.disabledPackages` config\nsettings and also by calling `enablePackage()/disablePackage()`. ",
              "range": [
                [
                  26,
                  0
                ],
                [
                  256,
                  12
                ]
              ]
            }
          },
          "29": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  29,
                  15
                ],
                [
                  44,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "44": {
            "14": {
              "name": "getApmPath",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  44,
                  14
                ],
                [
                  52,
                  1
                ]
              ],
              "doc": "Public: Get the path to the apm command "
            }
          },
          "52": {
            "22": {
              "name": "getPackageDirPaths",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  52,
                  22
                ],
                [
                  55,
                  1
                ]
              ],
              "doc": " Public: Get the paths being used to look for packages.\n\nReturns an Array of String directory paths. "
            }
          },
          "55": {
            "19": {
              "name": "getPackageState",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "name"
              ],
              "range": [
                [
                  55,
                  19
                ],
                [
                  58,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "58": {
            "19": {
              "name": "setPackageState",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "name",
                "state"
              ],
              "range": [
                [
                  58,
                  19
                ],
                [
                  62,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "62": {
            "17": {
              "name": "enablePackage",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "name"
              ],
              "range": [
                [
                  62,
                  17
                ],
                [
                  68,
                  1
                ]
              ],
              "doc": "Public: Enable the package with the given name "
            }
          },
          "68": {
            "18": {
              "name": "disablePackage",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "name"
              ],
              "range": [
                [
                  68,
                  18
                ],
                [
                  74,
                  1
                ]
              ],
              "doc": "Public: Disable the package with the given name "
            }
          },
          "74": {
            "12": {
              "name": "activate",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  74,
                  12
                ],
                [
                  82,
                  1
                ]
              ],
              "doc": "Private: Activate all the packages that should be activated. "
            }
          },
          "82": {
            "28": {
              "name": "registerPackageActivator",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "activator",
                "types"
              ],
              "range": [
                [
                  82,
                  28
                ],
                [
                  85,
                  1
                ]
              ],
              "doc": " Private: another type of package manager can handle other package types.\nSee ThemeManager "
            }
          },
          "85": {
            "20": {
              "name": "activatePackages",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "packages"
              ],
              "range": [
                [
                  85,
                  20
                ],
                [
                  90,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "90": {
            "19": {
              "name": "activatePackage",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "name"
              ],
              "range": [
                [
                  90,
                  19
                ],
                [
                  100,
                  1
                ]
              ],
              "doc": "Private: Activate a single package by name "
            }
          },
          "100": {
            "22": {
              "name": "deactivatePackages",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  100,
                  22
                ],
                [
                  105,
                  1
                ]
              ],
              "doc": "Private: Deactivate all packages "
            }
          },
          "105": {
            "21": {
              "name": "deactivatePackage",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "name"
              ],
              "range": [
                [
                  105,
                  21
                ],
                [
                  113,
                  1
                ]
              ],
              "doc": "Private: Deactivate the package with the given name "
            }
          },
          "113": {
            "21": {
              "name": "getActivePackages",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  113,
                  21
                ],
                [
                  117,
                  1
                ]
              ],
              "doc": "Public: Get an array of all the active packages "
            }
          },
          "117": {
            "20": {
              "name": "getActivePackage",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "name"
              ],
              "range": [
                [
                  117,
                  20
                ],
                [
                  121,
                  1
                ]
              ],
              "doc": "Public: Get the active package with the given name "
            }
          },
          "121": {
            "19": {
              "name": "isPackageActive",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "name"
              ],
              "range": [
                [
                  121,
                  19
                ],
                [
                  124,
                  1
                ]
              ],
              "doc": "Public: Is the package with the given name active? "
            }
          },
          "124": {
            "29": {
              "name": "unobserveDisabledPackages",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  124,
                  29
                ],
                [
                  128,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "128": {
            "27": {
              "name": "observeDisabledPackages",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  128,
                  27
                ],
                [
                  137,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "137": {
            "16": {
              "name": "loadPackages",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  137,
                  16
                ],
                [
                  148,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "148": {
            "15": {
              "name": "loadPackage",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "nameOrPath"
              ],
              "range": [
                [
                  148,
                  15
                ],
                [
                  168,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "168": {
            "18": {
              "name": "unloadPackages",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  168,
                  18
                ],
                [
                  172,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "172": {
            "17": {
              "name": "unloadPackage",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "name"
              ],
              "range": [
                [
                  172,
                  17
                ],
                [
                  182,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "182": {
            "20": {
              "name": "getLoadedPackage",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "name"
              ],
              "range": [
                [
                  182,
                  20
                ],
                [
                  186,
                  1
                ]
              ],
              "doc": "Public: Get the loaded package with the given name "
            }
          },
          "186": {
            "19": {
              "name": "isPackageLoaded",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "name"
              ],
              "range": [
                [
                  186,
                  19
                ],
                [
                  190,
                  1
                ]
              ],
              "doc": "Public: Is the package with the given name loaded? "
            }
          },
          "190": {
            "21": {
              "name": "getLoadedPackages",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  190,
                  21
                ],
                [
                  196,
                  1
                ]
              ],
              "doc": "Public: Get an array of all the loaded packages "
            }
          },
          "196": {
            "29": {
              "name": "getLoadedPackagesForTypes",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "types"
              ],
              "range": [
                [
                  196,
                  29
                ],
                [
                  200,
                  1
                ]
              ],
              "doc": " Private: Get packages for a certain package type\n\ntypes - an {Array} of {String}s like ['atom', 'textmate']. "
            }
          },
          "200": {
            "22": {
              "name": "resolvePackagePath",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "name"
              ],
              "range": [
                [
                  200,
                  22
                ],
                [
                  210,
                  1
                ]
              ],
              "doc": "Public: Resolve the given package name to a path on disk. "
            }
          },
          "210": {
            "21": {
              "name": "isPackageDisabled",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "name"
              ],
              "range": [
                [
                  210,
                  21
                ],
                [
                  213,
                  1
                ]
              ],
              "doc": "Public: Is the package with the given name disabled? "
            }
          },
          "213": {
            "17": {
              "name": "hasAtomEngine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "packagePath"
              ],
              "range": [
                [
                  213,
                  17
                ],
                [
                  218,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "218": {
            "20": {
              "name": "isBundledPackage",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "name"
              ],
              "range": [
                [
                  218,
                  20
                ],
                [
                  221,
                  1
                ]
              ],
              "doc": "Public: Is the package with the given name bundled with Atom? "
            }
          },
          "221": {
            "26": {
              "name": "getPackageDependencies",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  221,
                  26
                ],
                [
                  231,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "231": {
            "28": {
              "name": "getAvailablePackagePaths",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  231,
                  28
                ],
                [
                  246,
                  1
                ]
              ],
              "doc": "Public: Get an array of all the available package paths. "
            }
          },
          "246": {
            "28": {
              "name": "getAvailablePackageNames",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  246,
                  28
                ],
                [
                  250,
                  1
                ]
              ],
              "doc": "Public: Get an array of all the available package names. "
            }
          },
          "250": {
            "31": {
              "name": "getAvailablePackageMetadata",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  250,
                  31
                ],
                [
                  256,
                  12
                ]
              ],
              "doc": "Public: Get an array of all the available package metadata. "
            }
          }
        },
        "exports": 26
      },
      "src/package.coffee": {
        "objects": {
          "0": {
            "7": {
              "name": "path",
              "type": "import",
              "range": [
                [
                  0,
                  7
                ],
                [
                  0,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "path",
              "builtin": true
            }
          },
          "2": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  2,
                  4
                ],
                [
                  2,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "3": {
            "8": {
              "name": "async",
              "type": "import",
              "range": [
                [
                  3,
                  8
                ],
                [
                  3,
                  22
                ]
              ],
              "bindingType": "variable",
              "module": "async@0.2.6"
            }
          },
          "4": {
            "7": {
              "name": "CSON",
              "type": "import",
              "range": [
                [
                  4,
                  7
                ],
                [
                  4,
                  22
                ]
              ],
              "bindingType": "variable",
              "module": "season@^1.0.2"
            }
          },
          "5": {
            "5": {
              "name": "fs",
              "type": "import",
              "range": [
                [
                  5,
                  5
                ],
                [
                  5,
                  21
                ]
              ],
              "bindingType": "variable",
              "module": "fs-plus@^2.2.6"
            }
          },
          "6": {
            "1": {
              "type": "import",
              "range": [
                [
                  6,
                  1
                ],
                [
                  6,
                  7
                ]
              ],
              "bindingType": "variable",
              "module": "emissary@^1.2.2",
              "name": "Emitter",
              "exportsProperty": "Emitter"
            }
          },
          "7": {
            "4": {
              "name": "Q",
              "type": "import",
              "range": [
                [
                  7,
                  4
                ],
                [
                  7,
                  14
                ]
              ],
              "bindingType": "variable",
              "module": "q@^1.0.1"
            }
          },
          "9": {
            "4": {
              "type": "primitive",
              "range": [
                [
                  9,
                  4
                ],
                [
                  9,
                  7
                ]
              ]
            }
          },
          "10": {
            "19": {
              "name": "ScopedProperties",
              "type": "import",
              "range": [
                [
                  10,
                  19
                ],
                [
                  10,
                  47
                ]
              ],
              "bindingType": "variable",
              "path": "./scoped-properties"
            }
          },
          "15": {
            "0": {
              "type": "class",
              "name": "Package",
              "bindingType": "exports",
              "classProperties": [
                [
                  18,
                  19
                ],
                [
                  20,
                  17
                ]
              ],
              "prototypeProperties": [
                [
                  30,
                  11
                ],
                [
                  31,
                  9
                ],
                [
                  32,
                  15
                ],
                [
                  33,
                  12
                ],
                [
                  34,
                  20
                ],
                [
                  35,
                  18
                ],
                [
                  36,
                  26
                ],
                [
                  37,
                  14
                ],
                [
                  39,
                  15
                ],
                [
                  44,
                  10
                ],
                [
                  47,
                  11
                ],
                [
                  50,
                  11
                ],
                [
                  53,
                  11
                ],
                [
                  59,
                  11
                ],
                [
                  61,
                  21
                ],
                [
                  63,
                  8
                ],
                [
                  76,
                  9
                ],
                [
                  83,
                  12
                ],
                [
                  97,
                  15
                ],
                [
                  109,
                  18
                ],
                [
                  118,
                  23
                ],
                [
                  126,
                  21
                ],
                [
                  138,
                  15
                ],
                [
                  141,
                  13
                ],
                [
                  144,
                  18
                ],
                [
                  151,
                  16
                ],
                [
                  158,
                  19
                ],
                [
                  162,
                  22
                ],
                [
                  165,
                  22
                ],
                [
                  177,
                  20
                ],
                [
                  194,
                  16
                ],
                [
                  213,
                  24
                ],
                [
                  231,
                  13
                ],
                [
                  238,
                  14
                ],
                [
                  247,
                  20
                ],
                [
                  251,
                  23
                ],
                [
                  260,
                  21
                ],
                [
                  266,
                  20
                ],
                [
                  269,
                  21
                ],
                [
                  275,
                  21
                ],
                [
                  285,
                  23
                ],
                [
                  297,
                  31
                ],
                [
                  306,
                  25
                ],
                [
                  315,
                  35
                ],
                [
                  325,
                  36
                ],
                [
                  339,
                  36
                ],
                [
                  345,
                  18
                ],
                [
                  353,
                  34
                ],
                [
                  371,
                  32
                ],
                [
                  401,
                  16
                ]
              ],
              "doc": " Private: Loads and activates a package's main module and resources such as\nstylesheets, keymaps, grammar, editor properties, and menus. ",
              "range": [
                [
                  15,
                  0
                ],
                [
                  411,
                  24
                ]
              ]
            }
          },
          "18": {
            "19": {
              "name": "stylesheetsDir",
              "type": "primitive",
              "range": [
                [
                  18,
                  19
                ],
                [
                  18,
                  31
                ]
              ],
              "bindingType": "classProperty"
            }
          },
          "20": {
            "17": {
              "name": "loadMetadata",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "packagePath",
                "ignoreErrors"
              ],
              "range": [
                [
                  20,
                  17
                ],
                [
                  30,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "30": {
            "11": {
              "name": "keymaps",
              "type": "primitive",
              "range": [
                [
                  30,
                  11
                ],
                [
                  30,
                  14
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "31": {
            "9": {
              "name": "menus",
              "type": "primitive",
              "range": [
                [
                  31,
                  9
                ],
                [
                  31,
                  12
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "32": {
            "15": {
              "name": "stylesheets",
              "type": "primitive",
              "range": [
                [
                  32,
                  15
                ],
                [
                  32,
                  18
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "33": {
            "12": {
              "name": "grammars",
              "type": "primitive",
              "range": [
                [
                  33,
                  12
                ],
                [
                  33,
                  15
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "34": {
            "20": {
              "name": "scopedProperties",
              "type": "primitive",
              "range": [
                [
                  34,
                  20
                ],
                [
                  34,
                  23
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "35": {
            "18": {
              "name": "mainModulePath",
              "type": "primitive",
              "range": [
                [
                  35,
                  18
                ],
                [
                  35,
                  21
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "36": {
            "26": {
              "name": "resolvedMainModulePath",
              "type": "primitive",
              "range": [
                [
                  36,
                  26
                ],
                [
                  36,
                  30
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "37": {
            "14": {
              "name": "mainModule",
              "type": "primitive",
              "range": [
                [
                  37,
                  14
                ],
                [
                  37,
                  17
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "39": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null,
                null
              ],
              "range": [
                [
                  39,
                  15
                ],
                [
                  44,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "44": {
            "10": {
              "name": "enable",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  44,
                  10
                ],
                [
                  47,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "47": {
            "11": {
              "name": "disable",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  47,
                  11
                ],
                [
                  50,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "50": {
            "11": {
              "name": "isTheme",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  50,
                  11
                ],
                [
                  53,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "53": {
            "11": {
              "name": "measure",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "key",
                "fn"
              ],
              "range": [
                [
                  53,
                  11
                ],
                [
                  59,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "59": {
            "11": {
              "name": "getType",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  59,
                  11
                ],
                [
                  59,
                  19
                ]
              ],
              "doc": "~Private~"
            }
          },
          "61": {
            "21": {
              "name": "getStylesheetType",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  61,
                  21
                ],
                [
                  61,
                  32
                ]
              ],
              "doc": "~Private~"
            }
          },
          "63": {
            "8": {
              "name": "load",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  63,
                  8
                ],
                [
                  76,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "76": {
            "9": {
              "name": "reset",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  76,
                  9
                ],
                [
                  83,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "83": {
            "12": {
              "name": "activate",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  83,
                  12
                ],
                [
                  97,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "97": {
            "15": {
              "name": "activateNow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  97,
                  15
                ],
                [
                  109,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "109": {
            "18": {
              "name": "activateConfig",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  109,
                  18
                ],
                [
                  118,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "118": {
            "23": {
              "name": "activateStylesheets",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  118,
                  23
                ],
                [
                  126,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "126": {
            "21": {
              "name": "activateResources",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  126,
                  21
                ],
                [
                  138,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "138": {
            "15": {
              "name": "loadKeymaps",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  138,
                  15
                ],
                [
                  141,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "141": {
            "13": {
              "name": "loadMenus",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  141,
                  13
                ],
                [
                  144,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "144": {
            "18": {
              "name": "getKeymapPaths",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  144,
                  18
                ],
                [
                  151,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "151": {
            "16": {
              "name": "getMenuPaths",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  151,
                  16
                ],
                [
                  158,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "158": {
            "19": {
              "name": "loadStylesheets",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  158,
                  19
                ],
                [
                  162,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "162": {
            "22": {
              "name": "getStylesheetsPath",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  162,
                  22
                ],
                [
                  165,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "165": {
            "22": {
              "name": "getStylesheetPaths",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  165,
                  22
                ],
                [
                  177,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "177": {
            "20": {
              "name": "loadGrammarsSync",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  177,
                  20
                ],
                [
                  194,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "194": {
            "16": {
              "name": "loadGrammars",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  194,
                  16
                ],
                [
                  213,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "213": {
            "24": {
              "name": "loadScopedProperties",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  213,
                  24
                ],
                [
                  231,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "231": {
            "13": {
              "name": "serialize",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  231,
                  13
                ],
                [
                  238,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "238": {
            "14": {
              "name": "deactivate",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  238,
                  14
                ],
                [
                  247,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "247": {
            "20": {
              "name": "deactivateConfig",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  247,
                  20
                ],
                [
                  251,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "251": {
            "23": {
              "name": "deactivateResources",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  251,
                  23
                ],
                [
                  260,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "260": {
            "21": {
              "name": "reloadStylesheets",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  260,
                  21
                ],
                [
                  266,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "266": {
            "20": {
              "name": "reloadStylesheet",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "stylesheetPath",
                "content"
              ],
              "range": [
                [
                  266,
                  20
                ],
                [
                  269,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "269": {
            "21": {
              "name": "requireMainModule",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  269,
                  21
                ],
                [
                  275,
                  1
                ]
              ]
            }
          },
          "275": {
            "21": {
              "name": "getMainModulePath",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  275,
                  21
                ],
                [
                  285,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "285": {
            "23": {
              "name": "hasActivationEvents",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  285,
                  23
                ],
                [
                  297,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "297": {
            "31": {
              "name": "subscribeToActivationEvents",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  297,
                  31
                ],
                [
                  306,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "306": {
            "25": {
              "name": "handleActivationEvent",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "event"
              ],
              "range": [
                [
                  306,
                  25
                ],
                [
                  315,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "315": {
            "35": {
              "name": "unsubscribeFromActivationEvents",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  315,
                  35
                ],
                [
                  325,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "325": {
            "36": {
              "name": "disableEventHandlersOnBubblePath",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "event"
              ],
              "range": [
                [
                  325,
                  36
                ],
                [
                  339,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "339": {
            "36": {
              "name": "restoreEventHandlersOnBubblePath",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "eventHandlers"
              ],
              "range": [
                [
                  339,
                  36
                ],
                [
                  345,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "345": {
            "18": {
              "name": "isNativeModule",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "modulePath"
              ],
              "range": [
                [
                  345,
                  18
                ],
                [
                  353,
                  1
                ]
              ],
              "doc": "Private: Does the given module path contain native code? "
            }
          },
          "353": {
            "34": {
              "name": "getNativeModuleDependencyPaths",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  353,
                  34
                ],
                [
                  371,
                  1
                ]
              ],
              "doc": " Private: Get an array of all the native modules that this package depends on.\nThis will recurse through all dependencies. "
            }
          },
          "371": {
            "32": {
              "name": "getIncompatibleNativeModules",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  371,
                  32
                ],
                [
                  401,
                  1
                ]
              ],
              "doc": " Private: Get the incompatible native modules that this package depends on.\nThis recurses through all dependencies and requires all modules that\ncontain a `.node` file.\n\nThis information is cached in local storage on a per package/version basis\nto minimize the impact on startup time. "
            }
          },
          "401": {
            "16": {
              "name": "isCompatible",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  401,
                  16
                ],
                [
                  411,
                  24
                ]
              ],
              "doc": " Public: Is this package compatible with this version of Atom?\n\nIncompatible packages cannot be activated. This will include packages\ninstalled to ~/.atom/packages that were built against node 0.11.10 but\nnow need to be upgrade to node 0.11.13.\n\nReturns a {Boolean}, true if compatible, false if incompatible. "
            }
          }
        },
        "exports": 15
      },
      "src/pane-axis-view.coffee": {
        "objects": {
          "0": {
            "1": {
              "type": "import",
              "range": [
                [
                  0,
                  1
                ],
                [
                  0,
                  4
                ]
              ],
              "bindingType": "variable",
              "path": "./space-pen-extensions",
              "name": "View",
              "exportsProperty": "View"
            }
          },
          "1": {
            "11": {
              "type": "primitive",
              "range": [
                [
                  1,
                  11
                ],
                [
                  1,
                  14
                ]
              ]
            }
          },
          "4": {
            "0": {
              "type": "class",
              "name": "PaneAxisView",
              "superClass": "View",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  5,
                  14
                ],
                [
                  9,
                  15
                ],
                [
                  12,
                  16
                ],
                [
                  16,
                  22
                ],
                [
                  22,
                  16
                ],
                [
                  26,
                  18
                ]
              ],
              "doc": "~Private~",
              "range": [
                [
                  4,
                  0
                ],
                [
                  31,
                  48
                ]
              ]
            }
          },
          "5": {
            "14": {
              "name": "initialize",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  5,
                  14
                ],
                [
                  9,
                  1
                ]
              ]
            }
          },
          "9": {
            "15": {
              "name": "afterAttach",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  9,
                  15
                ],
                [
                  12,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "12": {
            "16": {
              "name": "viewForModel",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "model"
              ],
              "range": [
                [
                  12,
                  16
                ],
                [
                  16,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "16": {
            "22": {
              "name": "onChildrenChanged",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  16,
                  22
                ],
                [
                  22,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "22": {
            "16": {
              "name": "onChildAdded",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "child",
                "index"
              ],
              "range": [
                [
                  22,
                  16
                ],
                [
                  26,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "26": {
            "18": {
              "name": "onChildRemoved",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "child"
              ],
              "range": [
                [
                  26,
                  18
                ],
                [
                  31,
                  48
                ]
              ],
              "doc": "~Private~"
            }
          }
        },
        "exports": 4
      },
      "src/pane-axis.coffee": {
        "objects": {
          "0": {
            "1": {
              "type": "import",
              "range": [
                [
                  0,
                  1
                ],
                [
                  0,
                  5
                ]
              ],
              "bindingType": "variable",
              "module": "theorist@^1",
              "name": "Model",
              "exportsProperty": "Model"
            },
            "8": {
              "type": "import",
              "range": [
                [
                  0,
                  8
                ],
                [
                  0,
                  15
                ]
              ],
              "bindingType": "variable",
              "module": "theorist@^1",
              "name": "Sequence",
              "exportsProperty": "Sequence"
            }
          },
          "1": {
            "1": {
              "type": "import",
              "range": [
                [
                  1,
                  1
                ],
                [
                  1,
                  7
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1",
              "name": "flatten",
              "exportsProperty": "flatten"
            }
          },
          "2": {
            "15": {
              "name": "Serializable",
              "type": "import",
              "range": [
                [
                  2,
                  15
                ],
                [
                  2,
                  36
                ]
              ],
              "bindingType": "variable",
              "module": "serializable@^1"
            }
          },
          "4": {
            "14": {
              "type": "primitive",
              "range": [
                [
                  4,
                  14
                ],
                [
                  4,
                  17
                ]
              ]
            }
          },
          "5": {
            "17": {
              "type": "primitive",
              "range": [
                [
                  5,
                  17
                ],
                [
                  5,
                  20
                ]
              ]
            }
          },
          "8": {
            "0": {
              "type": "class",
              "name": "PaneAxis",
              "superClass": "Model",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  12,
                  15
                ],
                [
                  25,
                  21
                ],
                [
                  30,
                  19
                ],
                [
                  34,
                  16
                ],
                [
                  40,
                  12
                ],
                [
                  43,
                  12
                ],
                [
                  46,
                  15
                ],
                [
                  51,
                  16
                ],
                [
                  56,
                  21
                ],
                [
                  60,
                  20
                ],
                [
                  64,
                  21
                ]
              ],
              "doc": "~Private~",
              "range": [
                [
                  8,
                  0
                ],
                [
                  65,
                  44
                ]
              ]
            }
          },
          "12": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  12,
                  15
                ],
                [
                  25,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "25": {
            "21": {
              "name": "deserializeParams",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "params"
              ],
              "range": [
                [
                  25,
                  21
                ],
                [
                  30,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "30": {
            "19": {
              "name": "serializeParams",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  30,
                  19
                ],
                [
                  34,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "34": {
            "16": {
              "name": "getViewClass",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  34,
                  16
                ],
                [
                  40,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "40": {
            "12": {
              "name": "getPanes",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  40,
                  12
                ],
                [
                  43,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "43": {
            "12": {
              "name": "addChild",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "child",
                "index"
              ],
              "range": [
                [
                  43,
                  12
                ],
                [
                  46,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "46": {
            "15": {
              "name": "removeChild",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "child"
              ],
              "range": [
                [
                  46,
                  15
                ],
                [
                  51,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "51": {
            "16": {
              "name": "replaceChild",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "oldChild",
                "newChild"
              ],
              "range": [
                [
                  51,
                  16
                ],
                [
                  56,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "56": {
            "21": {
              "name": "insertChildBefore",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "currentChild",
                "newChild"
              ],
              "range": [
                [
                  56,
                  21
                ],
                [
                  60,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "60": {
            "20": {
              "name": "insertChildAfter",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "currentChild",
                "newChild"
              ],
              "range": [
                [
                  60,
                  20
                ],
                [
                  64,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "64": {
            "21": {
              "name": "reparentLastChild",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  64,
                  21
                ],
                [
                  65,
                  44
                ]
              ],
              "doc": "~Private~"
            }
          }
        },
        "exports": 8
      },
      "src/pane-column-view.coffee": {
        "objects": {
          "0": {
            "1": {
              "type": "import",
              "range": [
                [
                  0,
                  1
                ],
                [
                  0,
                  1
                ]
              ],
              "bindingType": "variable",
              "path": "./space-pen-extensions",
              "name": "$",
              "exportsProperty": "$"
            }
          },
          "1": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  1,
                  4
                ],
                [
                  1,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "2": {
            "15": {
              "name": "PaneAxisView",
              "type": "import",
              "range": [
                [
                  2,
                  15
                ],
                [
                  2,
                  40
                ]
              ],
              "bindingType": "variable",
              "path": "./pane-axis-view"
            }
          },
          "5": {
            "0": {
              "type": "class",
              "name": "PaneColumnView",
              "superClass": "PaneAxisView",
              "bindingType": "exports",
              "classProperties": [
                [
                  7,
                  12
                ]
              ],
              "prototypeProperties": [
                [
                  10,
                  13
                ]
              ],
              "doc": "~Private~",
              "range": [
                [
                  5,
                  0
                ],
                [
                  11,
                  16
                ]
              ]
            }
          },
          "7": {
            "12": {
              "name": "content",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  7,
                  12
                ],
                [
                  10,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "10": {
            "13": {
              "name": "className",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  10,
                  13
                ],
                [
                  11,
                  16
                ]
              ],
              "doc": "~Private~"
            }
          }
        },
        "exports": 5
      },
      "src/pane-container-view.coffee": {
        "objects": {
          "0": {
            "1": {
              "type": "import",
              "range": [
                [
                  0,
                  1
                ],
                [
                  0,
                  9
                ]
              ],
              "bindingType": "variable",
              "module": "grim@0.11.0",
              "name": "deprecate",
              "exportsProperty": "deprecate"
            }
          },
          "1": {
            "12": {
              "name": "Delegator",
              "type": "import",
              "range": [
                [
                  1,
                  12
                ],
                [
                  1,
                  29
                ]
              ],
              "bindingType": "variable",
              "module": "delegato@^1"
            }
          },
          "2": {
            "1": {
              "type": "import",
              "range": [
                [
                  2,
                  1
                ],
                [
                  2,
                  1
                ]
              ],
              "bindingType": "variable",
              "path": "./space-pen-extensions",
              "name": "$",
              "exportsProperty": "$"
            },
            "4": {
              "type": "import",
              "range": [
                [
                  2,
                  4
                ],
                [
                  2,
                  7
                ]
              ],
              "bindingType": "variable",
              "path": "./space-pen-extensions",
              "name": "View",
              "exportsProperty": "View"
            }
          },
          "3": {
            "11": {
              "name": "PaneView",
              "type": "import",
              "range": [
                [
                  3,
                  11
                ],
                [
                  3,
                  31
                ]
              ],
              "bindingType": "variable",
              "path": "./pane-view"
            }
          },
          "4": {
            "16": {
              "name": "PaneContainer",
              "type": "import",
              "range": [
                [
                  4,
                  16
                ],
                [
                  4,
                  41
                ]
              ],
              "bindingType": "variable",
              "path": "./pane-container"
            }
          },
          "8": {
            "0": {
              "type": "class",
              "name": "PaneContainerView",
              "superClass": "View",
              "bindingType": "exports",
              "classProperties": [
                [
                  13,
                  12
                ]
              ],
              "prototypeProperties": [
                [
                  16,
                  14
                ],
                [
                  25,
                  16
                ],
                [
                  30,
                  11
                ],
                [
                  33,
                  17
                ],
                [
                  47,
                  27
                ],
                [
                  50,
                  15
                ],
                [
                  55,
                  16
                ],
                [
                  64,
                  16
                ],
                [
                  67,
                  15
                ],
                [
                  70,
                  15
                ],
                [
                  73,
                  16
                ],
                [
                  79,
                  18
                ],
                [
                  82,
                  17
                ],
                [
                  86,
                  21
                ],
                [
                  89,
                  21
                ],
                [
                  92,
                  17
                ],
                [
                  95,
                  14
                ],
                [
                  98,
                  21
                ],
                [
                  101,
                  25
                ],
                [
                  104,
                  22
                ],
                [
                  107,
                  22
                ],
                [
                  110,
                  23
                ],
                [
                  113,
                  24
                ],
                [
                  116,
                  26
                ],
                [
                  143,
                  26
                ],
                [
                  152,
                  12
                ]
              ],
              "doc": "Private: Manages the list of panes within a {WorkspaceView} ",
              "range": [
                [
                  8,
                  0
                ],
                [
                  154,
                  19
                ]
              ]
            }
          },
          "13": {
            "12": {
              "name": "content",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  13,
                  12
                ],
                [
                  16,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "16": {
            "14": {
              "name": "initialize",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "params"
              ],
              "range": [
                [
                  16,
                  14
                ],
                [
                  25,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "25": {
            "16": {
              "name": "viewForModel",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "model"
              ],
              "range": [
                [
                  25,
                  16
                ],
                [
                  30,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "30": {
            "11": {
              "name": "getRoot",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  30,
                  11
                ],
                [
                  33,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "33": {
            "17": {
              "name": "onRootChanged",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "root"
              ],
              "range": [
                [
                  33,
                  17
                ],
                [
                  47,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "47": {
            "27": {
              "name": "onActivePaneItemChanged",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "activeItem"
              ],
              "range": [
                [
                  47,
                  27
                ],
                [
                  50,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "50": {
            "15": {
              "name": "removeChild",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "child"
              ],
              "range": [
                [
                  50,
                  15
                ],
                [
                  55,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "55": {
            "16": {
              "name": "confirmClose",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  55,
                  16
                ],
                [
                  64,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "64": {
            "16": {
              "name": "getPaneViews",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  64,
                  16
                ],
                [
                  67,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "67": {
            "15": {
              "name": "indexOfPane",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "paneView"
              ],
              "range": [
                [
                  67,
                  15
                ],
                [
                  70,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "70": {
            "15": {
              "name": "paneAtIndex",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "index"
              ],
              "range": [
                [
                  70,
                  15
                ],
                [
                  73,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "73": {
            "16": {
              "name": "eachPaneView",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "callback"
              ],
              "range": [
                [
                  73,
                  16
                ],
                [
                  79,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "79": {
            "18": {
              "name": "getFocusedPane",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  79,
                  18
                ],
                [
                  82,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "82": {
            "17": {
              "name": "getActivePane",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  82,
                  17
                ],
                [
                  86,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "86": {
            "21": {
              "name": "getActivePaneView",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  86,
                  21
                ],
                [
                  89,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "89": {
            "21": {
              "name": "getActivePaneItem",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  89,
                  21
                ],
                [
                  92,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "92": {
            "17": {
              "name": "getActiveView",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  92,
                  17
                ],
                [
                  95,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "95": {
            "14": {
              "name": "paneForUri",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "uri"
              ],
              "range": [
                [
                  95,
                  14
                ],
                [
                  98,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "98": {
            "21": {
              "name": "focusNextPaneView",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  98,
                  21
                ],
                [
                  101,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "101": {
            "25": {
              "name": "focusPreviousPaneView",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  101,
                  25
                ],
                [
                  104,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "104": {
            "22": {
              "name": "focusPaneViewAbove",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  104,
                  22
                ],
                [
                  107,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "107": {
            "22": {
              "name": "focusPaneViewBelow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  107,
                  22
                ],
                [
                  110,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "110": {
            "23": {
              "name": "focusPaneViewOnLeft",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  110,
                  23
                ],
                [
                  113,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "113": {
            "24": {
              "name": "focusPaneViewOnRight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  113,
                  24
                ],
                [
                  116,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "116": {
            "26": {
              "name": "nearestPaneInDirection",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "direction"
              ],
              "range": [
                [
                  116,
                  26
                ],
                [
                  143,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "143": {
            "26": {
              "name": "boundingBoxForPaneView",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "paneView"
              ],
              "range": [
                [
                  143,
                  26
                ],
                [
                  152,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "152": {
            "12": {
              "name": "getPanes",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  152,
                  12
                ],
                [
                  154,
                  19
                ]
              ],
              "doc": "Private: Deprecated "
            }
          }
        },
        "exports": 8
      },
      "src/pane-container.coffee": {
        "objects": {
          "0": {
            "1": {
              "type": "import",
              "range": [
                [
                  0,
                  1
                ],
                [
                  0,
                  4
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1",
              "name": "find",
              "exportsProperty": "find"
            }
          },
          "1": {
            "1": {
              "type": "import",
              "range": [
                [
                  1,
                  1
                ],
                [
                  1,
                  5
                ]
              ],
              "bindingType": "variable",
              "module": "theorist@^1",
              "name": "Model",
              "exportsProperty": "Model"
            }
          },
          "2": {
            "15": {
              "name": "Serializable",
              "type": "import",
              "range": [
                [
                  2,
                  15
                ],
                [
                  2,
                  36
                ]
              ],
              "bindingType": "variable",
              "module": "serializable@^1"
            }
          },
          "3": {
            "7": {
              "name": "Pane",
              "type": "import",
              "range": [
                [
                  3,
                  7
                ],
                [
                  3,
                  22
                ]
              ],
              "bindingType": "variable",
              "path": "./pane"
            }
          },
          "6": {
            "0": {
              "type": "class",
              "name": "PaneContainer",
              "superClass": "Model",
              "bindingType": "exports",
              "classProperties": [
                [
                  10,
                  12
                ]
              ],
              "prototypeProperties": [
                [
                  16,
                  16
                ],
                [
                  23,
                  15
                ],
                [
                  28,
                  21
                ],
                [
                  34,
                  19
                ],
                [
                  38,
                  16
                ],
                [
                  42,
                  12
                ],
                [
                  45,
                  17
                ],
                [
                  48,
                  14
                ],
                [
                  51,
                  11
                ],
                [
                  54,
                  20
                ],
                [
                  64,
                  24
                ],
                [
                  75,
                  17
                ],
                [
                  89,
                  21
                ],
                [
                  92,
                  17
                ],
                [
                  96,
                  13
                ]
              ],
              "doc": "~Private~",
              "range": [
                [
                  6,
                  0
                ],
                [
                  97,
                  42
                ]
              ]
            }
          },
          "10": {
            "12": {
              "name": "version",
              "type": "primitive",
              "range": [
                [
                  10,
                  12
                ],
                [
                  10,
                  12
                ]
              ],
              "bindingType": "classProperty"
            }
          },
          "16": {
            "16": {
              "name": "previousRoot",
              "type": "primitive",
              "range": [
                [
                  16,
                  16
                ],
                [
                  16,
                  19
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "23": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "params"
              ],
              "range": [
                [
                  23,
                  15
                ],
                [
                  28,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "28": {
            "21": {
              "name": "deserializeParams",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "params"
              ],
              "range": [
                [
                  28,
                  21
                ],
                [
                  34,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "34": {
            "19": {
              "name": "serializeParams",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "params"
              ],
              "range": [
                [
                  34,
                  19
                ],
                [
                  38,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "38": {
            "16": {
              "name": "replaceChild",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "oldChild",
                "newChild"
              ],
              "range": [
                [
                  38,
                  16
                ],
                [
                  42,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "42": {
            "12": {
              "name": "getPanes",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  42,
                  12
                ],
                [
                  45,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "45": {
            "17": {
              "name": "getActivePane",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  45,
                  17
                ],
                [
                  48,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "48": {
            "14": {
              "name": "paneForUri",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "uri"
              ],
              "range": [
                [
                  48,
                  14
                ],
                [
                  51,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "51": {
            "11": {
              "name": "saveAll",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  51,
                  11
                ],
                [
                  54,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "54": {
            "20": {
              "name": "activateNextPane",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  54,
                  20
                ],
                [
                  64,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "64": {
            "24": {
              "name": "activatePreviousPane",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  64,
                  24
                ],
                [
                  75,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "75": {
            "17": {
              "name": "onRootChanged",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "root"
              ],
              "range": [
                [
                  75,
                  17
                ],
                [
                  89,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "89": {
            "21": {
              "name": "destroyEmptyPanes",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  89,
                  21
                ],
                [
                  92,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "92": {
            "17": {
              "name": "itemDestroyed",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "item"
              ],
              "range": [
                [
                  92,
                  17
                ],
                [
                  96,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "96": {
            "13": {
              "name": "destroyed",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  96,
                  13
                ],
                [
                  97,
                  42
                ]
              ],
              "doc": "Private: Called by Model superclass when destroyed "
            }
          }
        },
        "exports": 6
      },
      "src/pane-row-view.coffee": {
        "objects": {
          "0": {
            "1": {
              "type": "import",
              "range": [
                [
                  0,
                  1
                ],
                [
                  0,
                  1
                ]
              ],
              "bindingType": "variable",
              "path": "./space-pen-extensions",
              "name": "$",
              "exportsProperty": "$"
            }
          },
          "1": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  1,
                  4
                ],
                [
                  1,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "2": {
            "15": {
              "name": "PaneAxisView",
              "type": "import",
              "range": [
                [
                  2,
                  15
                ],
                [
                  2,
                  40
                ]
              ],
              "bindingType": "variable",
              "path": "./pane-axis-view"
            }
          },
          "5": {
            "0": {
              "type": "class",
              "name": "PaneRowView",
              "superClass": "PaneAxisView",
              "bindingType": "exports",
              "classProperties": [
                [
                  6,
                  12
                ]
              ],
              "prototypeProperties": [
                [
                  9,
                  13
                ]
              ],
              "doc": "~Private~",
              "range": [
                [
                  5,
                  0
                ],
                [
                  10,
                  13
                ]
              ]
            }
          },
          "6": {
            "12": {
              "name": "content",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  6,
                  12
                ],
                [
                  9,
                  1
                ]
              ]
            }
          },
          "9": {
            "13": {
              "name": "className",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  9,
                  13
                ],
                [
                  10,
                  13
                ]
              ],
              "doc": "~Private~"
            }
          }
        },
        "exports": 5
      },
      "src/pane-view.coffee": {
        "objects": {
          "0": {
            "1": {
              "type": "import",
              "range": [
                [
                  0,
                  1
                ],
                [
                  0,
                  1
                ]
              ],
              "bindingType": "variable",
              "path": "./space-pen-extensions",
              "name": "$",
              "exportsProperty": "$"
            },
            "4": {
              "type": "import",
              "range": [
                [
                  0,
                  4
                ],
                [
                  0,
                  7
                ]
              ],
              "bindingType": "variable",
              "path": "./space-pen-extensions",
              "name": "View",
              "exportsProperty": "View"
            }
          },
          "1": {
            "12": {
              "name": "Delegator",
              "type": "import",
              "range": [
                [
                  1,
                  12
                ],
                [
                  1,
                  29
                ]
              ],
              "bindingType": "variable",
              "module": "delegato@^1"
            }
          },
          "2": {
            "1": {
              "type": "import",
              "range": [
                [
                  2,
                  1
                ],
                [
                  2,
                  9
                ]
              ],
              "bindingType": "variable",
              "module": "grim@0.11.0",
              "name": "deprecate",
              "exportsProperty": "deprecate"
            }
          },
          "3": {
            "20": {
              "name": "PropertyAccessors",
              "type": "import",
              "range": [
                [
                  3,
                  20
                ],
                [
                  3,
                  47
                ]
              ],
              "bindingType": "variable",
              "module": "property-accessors@^1"
            }
          },
          "5": {
            "7": {
              "name": "Pane",
              "type": "import",
              "range": [
                [
                  5,
                  7
                ],
                [
                  5,
                  22
                ]
              ],
              "bindingType": "variable",
              "path": "./pane"
            }
          },
          "14": {
            "0": {
              "type": "class",
              "name": "PaneView",
              "superClass": "View",
              "bindingType": "exports",
              "classProperties": [
                [
                  18,
                  12
                ],
                [
                  20,
                  12
                ]
              ],
              "prototypeProperties": [
                [
                  32,
                  22
                ],
                [
                  34,
                  14
                ],
                [
                  45,
                  16
                ],
                [
                  84,
                  14
                ],
                [
                  89,
                  12
                ],
                [
                  94,
                  18
                ],
                [
                  99,
                  19
                ],
                [
                  104,
                  16
                ],
                [
                  109,
                  20
                ],
                [
                  113,
                  15
                ],
                [
                  121,
                  15
                ],
                [
                  124,
                  25
                ],
                [
                  133,
                  15
                ],
                [
                  139,
                  21
                ],
                [
                  142,
                  23
                ],
                [
                  158,
                  15
                ],
                [
                  161,
                  17
                ],
                [
                  175,
                  15
                ],
                [
                  178,
                  25
                ],
                [
                  182,
                  26
                ],
                [
                  185,
                  15
                ],
                [
                  199,
                  13
                ],
                [
                  201,
                  14
                ],
                [
                  203,
                  11
                ],
                [
                  205,
                  13
                ],
                [
                  210,
                  16
                ],
                [
                  213,
                  16
                ],
                [
                  216,
                  10
                ]
              ],
              "doc": " Public: A container which can contains multiple items to be switched between.\n\nItems can be almost anything however most commonly they're {EditorView}s.\n\nMost packages won't need to use this class, unless you're interested in\nbuilding a package that deals with switching between panes or items. ",
              "range": [
                [
                  14,
                  0
                ],
                [
                  219,
                  9
                ]
              ]
            }
          },
          "18": {
            "12": {
              "name": "version",
              "type": "primitive",
              "range": [
                [
                  18,
                  12
                ],
                [
                  18,
                  12
                ]
              ],
              "bindingType": "classProperty"
            }
          },
          "20": {
            "12": {
              "name": "content",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "wrappedView"
              ],
              "range": [
                [
                  20,
                  12
                ],
                [
                  24,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "32": {
            "22": {
              "name": "previousActiveItem",
              "type": "primitive",
              "range": [
                [
                  32,
                  22
                ],
                [
                  32,
                  25
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "34": {
            "14": {
              "name": "initialize",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "args"
              ],
              "range": [
                [
                  34,
                  14
                ],
                [
                  45,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "45": {
            "16": {
              "name": "handleEvents",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  45,
                  16
                ],
                [
                  84,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "84": {
            "14": {
              "name": "removeItem",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "item"
              ],
              "range": [
                [
                  84,
                  14
                ],
                [
                  89,
                  1
                ]
              ],
              "doc": "Deprecated: Use ::destroyItem "
            }
          },
          "89": {
            "12": {
              "name": "showItem",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "item"
              ],
              "range": [
                [
                  89,
                  12
                ],
                [
                  94,
                  1
                ]
              ],
              "doc": "Deprecated: Use ::activateItem "
            }
          },
          "94": {
            "18": {
              "name": "showItemForUri",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "item"
              ],
              "range": [
                [
                  94,
                  18
                ],
                [
                  99,
                  1
                ]
              ],
              "doc": "Deprecated: Use ::activateItemForUri "
            }
          },
          "99": {
            "19": {
              "name": "showItemAtIndex",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "index"
              ],
              "range": [
                [
                  99,
                  19
                ],
                [
                  104,
                  1
                ]
              ],
              "doc": "Deprecated: Use ::activateItemAtIndex "
            }
          },
          "104": {
            "16": {
              "name": "showNextItem",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  104,
                  16
                ],
                [
                  109,
                  1
                ]
              ],
              "doc": "Deprecated: Use ::activateNextItem "
            }
          },
          "109": {
            "20": {
              "name": "showPreviousItem",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  109,
                  20
                ],
                [
                  113,
                  1
                ]
              ],
              "doc": "Deprecated: Use ::activatePreviousItem "
            }
          },
          "113": {
            "15": {
              "name": "afterAttach",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "onDom"
              ],
              "range": [
                [
                  113,
                  15
                ],
                [
                  121,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "121": {
            "15": {
              "name": "onActivated",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  121,
                  15
                ],
                [
                  124,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "124": {
            "25": {
              "name": "onActiveStatusChanged",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "active"
              ],
              "range": [
                [
                  124,
                  25
                ],
                [
                  133,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "133": {
            "15": {
              "name": "getNextPane",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  133,
                  15
                ],
                [
                  139,
                  1
                ]
              ],
              "doc": "Public: Returns the next pane, ordered by creation. "
            }
          },
          "139": {
            "21": {
              "name": "getActivePaneItem",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  139,
                  21
                ],
                [
                  142,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "142": {
            "23": {
              "name": "onActiveItemChanged",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "item"
              ],
              "range": [
                [
                  142,
                  23
                ],
                [
                  158,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "158": {
            "15": {
              "name": "onItemAdded",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "item",
                "index"
              ],
              "range": [
                [
                  158,
                  15
                ],
                [
                  161,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "161": {
            "17": {
              "name": "onItemRemoved",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "item",
                "index",
                "destroyed"
              ],
              "range": [
                [
                  161,
                  17
                ],
                [
                  175,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "175": {
            "15": {
              "name": "onItemMoved",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "item",
                "newIndex"
              ],
              "range": [
                [
                  175,
                  15
                ],
                [
                  178,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "178": {
            "25": {
              "name": "onBeforeItemDestroyed",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "item"
              ],
              "range": [
                [
                  178,
                  25
                ],
                [
                  182,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "182": {
            "26": {
              "name": "activeItemTitleChanged",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  182,
                  26
                ],
                [
                  185,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "185": {
            "15": {
              "name": "viewForItem",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "item"
              ],
              "range": [
                [
                  185,
                  15
                ],
                [
                  197,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "199": {
            "13": {
              "name": "splitLeft",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "items"
              ],
              "range": [
                [
                  199,
                  13
                ],
                [
                  199,
                  57
                ]
              ],
              "doc": "~Private~"
            }
          },
          "201": {
            "14": {
              "name": "splitRight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "items"
              ],
              "range": [
                [
                  201,
                  14
                ],
                [
                  201,
                  59
                ]
              ],
              "doc": "~Private~"
            }
          },
          "203": {
            "11": {
              "name": "splitUp",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "items"
              ],
              "range": [
                [
                  203,
                  11
                ],
                [
                  203,
                  53
                ]
              ],
              "doc": "~Private~"
            }
          },
          "205": {
            "13": {
              "name": "splitDown",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "items"
              ],
              "range": [
                [
                  205,
                  13
                ],
                [
                  205,
                  57
                ]
              ],
              "doc": "~Private~"
            }
          },
          "210": {
            "16": {
              "name": "getContainer",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  210,
                  16
                ],
                [
                  213,
                  1
                ]
              ],
              "doc": " Public: Get the container view housing this pane.\n\nReturns a {View}. "
            }
          },
          "213": {
            "16": {
              "name": "beforeRemove",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  213,
                  16
                ],
                [
                  216,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "216": {
            "10": {
              "name": "remove",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "selector",
                "keepData"
              ],
              "range": [
                [
                  216,
                  10
                ],
                [
                  219,
                  9
                ]
              ],
              "doc": "~Private~"
            }
          }
        },
        "exports": 14
      },
      "src/pane.coffee": {
        "objects": {
          "0": {
            "1": {
              "type": "import",
              "range": [
                [
                  0,
                  1
                ],
                [
                  0,
                  4
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1",
              "name": "find",
              "exportsProperty": "find"
            },
            "7": {
              "type": "import",
              "range": [
                [
                  0,
                  7
                ],
                [
                  0,
                  13
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1",
              "name": "compact",
              "exportsProperty": "compact"
            },
            "16": {
              "type": "import",
              "range": [
                [
                  0,
                  16
                ],
                [
                  0,
                  21
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1",
              "name": "extend",
              "exportsProperty": "extend"
            },
            "24": {
              "type": "import",
              "range": [
                [
                  0,
                  24
                ],
                [
                  0,
                  27
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1",
              "name": "last",
              "exportsProperty": "last"
            }
          },
          "1": {
            "1": {
              "type": "import",
              "range": [
                [
                  1,
                  1
                ],
                [
                  1,
                  5
                ]
              ],
              "bindingType": "variable",
              "module": "theorist@^1",
              "name": "Model",
              "exportsProperty": "Model"
            },
            "8": {
              "type": "import",
              "range": [
                [
                  1,
                  8
                ],
                [
                  1,
                  15
                ]
              ],
              "bindingType": "variable",
              "module": "theorist@^1",
              "name": "Sequence",
              "exportsProperty": "Sequence"
            }
          },
          "2": {
            "15": {
              "name": "Serializable",
              "type": "import",
              "range": [
                [
                  2,
                  15
                ],
                [
                  2,
                  36
                ]
              ],
              "bindingType": "variable",
              "module": "serializable@^1"
            }
          },
          "3": {
            "11": {
              "name": "PaneAxis",
              "type": "import",
              "range": [
                [
                  3,
                  11
                ],
                [
                  3,
                  31
                ]
              ],
              "bindingType": "variable",
              "path": "./pane-axis"
            }
          },
          "4": {
            "9": {
              "name": "Editor",
              "type": "import",
              "range": [
                [
                  4,
                  9
                ],
                [
                  4,
                  26
                ]
              ],
              "bindingType": "variable",
              "path": "./editor"
            }
          },
          "5": {
            "11": {
              "type": "primitive",
              "range": [
                [
                  5,
                  11
                ],
                [
                  5,
                  14
                ]
              ]
            }
          },
          "11": {
            "0": {
              "type": "class",
              "name": "Pane",
              "superClass": "Model",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  29,
                  15
                ],
                [
                  43,
                  19
                ],
                [
                  50,
                  21
                ],
                [
                  57,
                  16
                ],
                [
                  59,
                  12
                ],
                [
                  62,
                  9
                ],
                [
                  67,
                  8
                ],
                [
                  73,
                  12
                ],
                [
                  77,
                  12
                ],
                [
                  82,
                  12
                ],
                [
                  88,
                  17
                ],
                [
                  93,
                  19
                ],
                [
                  97,
                  15
                ],
                [
                  101,
                  20
                ],
                [
                  109,
                  24
                ],
                [
                  117,
                  22
                ],
                [
                  121,
                  23
                ],
                [
                  125,
                  16
                ],
                [
                  137,
                  11
                ],
                [
                  154,
                  12
                ],
                [
                  159,
                  14
                ],
                [
                  175,
                  12
                ],
                [
                  182,
                  18
                ],
                [
                  187,
                  21
                ],
                [
                  193,
                  15
                ],
                [
                  204,
                  16
                ],
                [
                  208,
                  24
                ],
                [
                  211,
                  11
                ],
                [
                  218,
                  13
                ],
                [
                  224,
                  20
                ],
                [
                  239,
                  18
                ],
                [
                  243,
                  20
                ],
                [
                  251,
                  12
                ],
                [
                  263,
                  14
                ],
                [
                  273,
                  13
                ],
                [
                  278,
                  14
                ],
                [
                  283,
                  22
                ],
                [
                  290,
                  18
                ],
                [
                  300,
                  13
                ],
                [
                  309,
                  14
                ],
                [
                  318,
                  11
                ],
                [
                  327,
                  13
                ],
                [
                  330,
                  9
                ],
                [
                  344,
                  23
                ],
                [
                  356,
                  32
                ]
              ],
              "doc": " Public: A container for multiple items, one of which is *active* at a given\ntime. With the default packages, a tab is displayed for each item and the\nactive item's view is displayed. ",
              "range": [
                [
                  11,
                  0
                ],
                [
                  364,
                  19
                ]
              ]
            }
          },
          "29": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "params"
              ],
              "range": [
                [
                  29,
                  15
                ],
                [
                  43,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "43": {
            "19": {
              "name": "serializeParams",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  43,
                  19
                ],
                [
                  50,
                  1
                ]
              ],
              "doc": "Private: Called by the Serializable mixin during serialization. "
            }
          },
          "50": {
            "21": {
              "name": "deserializeParams",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "params"
              ],
              "range": [
                [
                  50,
                  21
                ],
                [
                  57,
                  1
                ]
              ],
              "doc": "Private: Called by the Serializable mixin during deserialization. "
            }
          },
          "57": {
            "16": {
              "name": "getViewClass",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  57,
                  16
                ],
                [
                  57,
                  51
                ]
              ],
              "doc": "Private: Called by the view layer to construct a view for this model. "
            }
          },
          "59": {
            "12": {
              "name": "isActive",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  59,
                  12
                ],
                [
                  59,
                  21
                ]
              ],
              "doc": "~Private~"
            }
          },
          "62": {
            "9": {
              "name": "focus",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  62,
                  9
                ],
                [
                  67,
                  1
                ]
              ],
              "doc": "Private: Called by the view layer to indicate that the pane has gained focus. "
            }
          },
          "67": {
            "8": {
              "name": "blur",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  67,
                  8
                ],
                [
                  73,
                  1
                ]
              ],
              "doc": "Private: Called by the view layer to indicate that the pane has lost focus. "
            }
          },
          "73": {
            "12": {
              "name": "activate",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  73,
                  12
                ],
                [
                  77,
                  1
                ]
              ],
              "doc": " Public: Makes this pane the *active* pane, causing it to gain focus\nimmediately. "
            }
          },
          "77": {
            "12": {
              "name": "getPanes",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  77,
                  12
                ],
                [
                  77,
                  20
                ]
              ],
              "doc": "~Private~"
            }
          },
          "82": {
            "12": {
              "name": "getItems",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  82,
                  12
                ],
                [
                  88,
                  1
                ]
              ],
              "doc": " Public: Get the items in this pane.\n\nReturns an {Array} of items. "
            }
          },
          "88": {
            "17": {
              "name": "getActiveItem",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  88,
                  17
                ],
                [
                  93,
                  1
                ]
              ],
              "doc": " Public: Get the active pane item in this pane.\n\nReturns a pane item. "
            }
          },
          "93": {
            "19": {
              "name": "getActiveEditor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  93,
                  19
                ],
                [
                  97,
                  1
                ]
              ],
              "doc": " Public: Returns an {Editor} if the pane item is an {Editor}, or null\notherwise. "
            }
          },
          "97": {
            "15": {
              "name": "itemAtIndex",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "index"
              ],
              "range": [
                [
                  97,
                  15
                ],
                [
                  101,
                  1
                ]
              ],
              "doc": "Public: Returns the item at the specified index. "
            }
          },
          "101": {
            "20": {
              "name": "activateNextItem",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  101,
                  20
                ],
                [
                  109,
                  1
                ]
              ],
              "doc": "Public: Makes the next item active. "
            }
          },
          "109": {
            "24": {
              "name": "activatePreviousItem",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  109,
                  24
                ],
                [
                  117,
                  1
                ]
              ],
              "doc": "Public: Makes the previous item active. "
            }
          },
          "117": {
            "22": {
              "name": "getActiveItemIndex",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  117,
                  22
                ],
                [
                  121,
                  1
                ]
              ],
              "doc": "Private: Returns the index of the current active item. "
            }
          },
          "121": {
            "23": {
              "name": "activateItemAtIndex",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "index"
              ],
              "range": [
                [
                  121,
                  23
                ],
                [
                  125,
                  1
                ]
              ],
              "doc": "Private: Makes the item at the given index active. "
            }
          },
          "125": {
            "16": {
              "name": "activateItem",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "item"
              ],
              "range": [
                [
                  125,
                  16
                ],
                [
                  137,
                  1
                ]
              ],
              "doc": "Private: Makes the given item active, adding the item if necessary. "
            }
          },
          "137": {
            "11": {
              "name": "addItem",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "item",
                "index"
              ],
              "range": [
                [
                  137,
                  11
                ],
                [
                  154,
                  1
                ]
              ],
              "doc": " Public: Adds the item to the pane.\n\nitem - The item to add. It can be a model with an associated view or a view.\nindex - An optional index at which to add the item. If omitted, the item is\n        added after the current active item.\n\nReturns the added item "
            }
          },
          "154": {
            "12": {
              "name": "addItems",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "items",
                "index"
              ],
              "range": [
                [
                  154,
                  12
                ],
                [
                  159,
                  1
                ]
              ],
              "doc": " Public: Adds the given items to the pane.\n\nitems - An {Array} of items to add. Items can be models with associated\n        views or views. Any items that are already present in items will\n        not be added.\nindex - An optional index at which to add the item. If omitted, the item is\n        added after the current active item.\n\nReturns an {Array} of the added items "
            }
          },
          "159": {
            "14": {
              "name": "removeItem",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "item",
                "destroying"
              ],
              "range": [
                [
                  159,
                  14
                ],
                [
                  175,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "175": {
            "12": {
              "name": "moveItem",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "item",
                "newIndex"
              ],
              "range": [
                [
                  175,
                  12
                ],
                [
                  182,
                  1
                ]
              ],
              "doc": "Public: Moves the given item to the specified index. "
            }
          },
          "182": {
            "18": {
              "name": "moveItemToPane",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "item",
                "pane",
                "index"
              ],
              "range": [
                [
                  182,
                  18
                ],
                [
                  187,
                  1
                ]
              ],
              "doc": "Public: Moves the given item to the given index at another pane. "
            }
          },
          "187": {
            "21": {
              "name": "destroyActiveItem",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  187,
                  21
                ],
                [
                  193,
                  1
                ]
              ],
              "doc": "Public: Destroys the currently active item and make the next item active. "
            }
          },
          "193": {
            "15": {
              "name": "destroyItem",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "item"
              ],
              "range": [
                [
                  193,
                  15
                ],
                [
                  204,
                  1
                ]
              ],
              "doc": " Public: Destroys the given item. If it is the active item, activate the next\none. If this is the last item, also destroys the pane. "
            }
          },
          "204": {
            "16": {
              "name": "destroyItems",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  204,
                  16
                ],
                [
                  208,
                  1
                ]
              ],
              "doc": "Public: Destroys all items and destroys the pane. "
            }
          },
          "208": {
            "24": {
              "name": "destroyInactiveItems",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  208,
                  24
                ],
                [
                  211,
                  1
                ]
              ],
              "doc": "Public: Destroys all items but the active one. "
            }
          },
          "211": {
            "11": {
              "name": "destroy",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  211,
                  11
                ],
                [
                  218,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "218": {
            "13": {
              "name": "destroyed",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  218,
                  13
                ],
                [
                  224,
                  1
                ]
              ],
              "doc": "Private: Called by model superclass. "
            }
          },
          "224": {
            "20": {
              "name": "promptToSaveItem",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "item"
              ],
              "range": [
                [
                  224,
                  20
                ],
                [
                  239,
                  1
                ]
              ],
              "doc": " Public: Prompts the user to save the given item if it can be saved and is\ncurrently unsaved. "
            }
          },
          "239": {
            "18": {
              "name": "saveActiveItem",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  239,
                  18
                ],
                [
                  243,
                  1
                ]
              ],
              "doc": "Public: Saves the active item. "
            }
          },
          "243": {
            "20": {
              "name": "saveActiveItemAs",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  243,
                  20
                ],
                [
                  251,
                  1
                ]
              ],
              "doc": "Public: Saves the active item at a prompted-for location. "
            }
          },
          "251": {
            "12": {
              "name": "saveItem",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "item",
                "nextAction"
              ],
              "range": [
                [
                  251,
                  12
                ],
                [
                  263,
                  1
                ]
              ],
              "doc": " Public: Saves the specified item.\n\nitem - The item to save.\nnextAction - An optional function which will be called after the item is\n             saved. "
            }
          },
          "263": {
            "14": {
              "name": "saveItemAs",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "item",
                "nextAction"
              ],
              "range": [
                [
                  263,
                  14
                ],
                [
                  273,
                  1
                ]
              ],
              "doc": " Public: Saves the given item at a prompted-for location.\n\nitem - The item to save.\nnextAction - An optional function which will be called after the item is\n             saved. "
            }
          },
          "273": {
            "13": {
              "name": "saveItems",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  273,
                  13
                ],
                [
                  278,
                  1
                ]
              ],
              "doc": "Public: Saves all items. "
            }
          },
          "278": {
            "14": {
              "name": "itemForUri",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "uri"
              ],
              "range": [
                [
                  278,
                  14
                ],
                [
                  283,
                  1
                ]
              ],
              "doc": " Public: Returns the first item that matches the given URI or undefined if\nnone exists. "
            }
          },
          "283": {
            "22": {
              "name": "activateItemForUri",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "uri"
              ],
              "range": [
                [
                  283,
                  22
                ],
                [
                  290,
                  1
                ]
              ],
              "doc": " Public: Activates the first item that matches the given URI. Returns a\nboolean indicating whether a matching item was found. "
            }
          },
          "290": {
            "18": {
              "name": "copyActiveItem",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  290,
                  18
                ],
                [
                  300,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "300": {
            "13": {
              "name": "splitLeft",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "params"
              ],
              "range": [
                [
                  300,
                  13
                ],
                [
                  309,
                  1
                ]
              ],
              "doc": " Public: Creates a new pane to the left of the receiver.\n\nparams - An object with keys:\n  :items - An optional array of items with which to construct the new pane.\n\nReturns the new {Pane}. "
            }
          },
          "309": {
            "14": {
              "name": "splitRight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "params"
              ],
              "range": [
                [
                  309,
                  14
                ],
                [
                  318,
                  1
                ]
              ],
              "doc": " Public: Creates a new pane to the right of the receiver.\n\nparams - An object with keys:\n  :items - An optional array of items with which to construct the new pane.\n\nReturns the new {Pane}. "
            }
          },
          "318": {
            "11": {
              "name": "splitUp",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "params"
              ],
              "range": [
                [
                  318,
                  11
                ],
                [
                  327,
                  1
                ]
              ],
              "doc": " Public: Creates a new pane above the receiver.\n\nparams - An object with keys:\n  :items - An optional array of items with which to construct the new pane.\n\nReturns the new {Pane}. "
            }
          },
          "327": {
            "13": {
              "name": "splitDown",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "params"
              ],
              "range": [
                [
                  327,
                  13
                ],
                [
                  330,
                  1
                ]
              ],
              "doc": " Public: Creates a new pane below the receiver.\n\nparams - An object with keys:\n  :items - An optional array of items with which to construct the new pane.\n\nReturns the new {Pane}. "
            }
          },
          "330": {
            "9": {
              "name": "split",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "orientation",
                "side",
                "params"
              ],
              "range": [
                [
                  330,
                  9
                ],
                [
                  344,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "344": {
            "23": {
              "name": "findLeftmostSibling",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  344,
                  23
                ],
                [
                  356,
                  1
                ]
              ],
              "doc": " Private: If the parent is a horizontal axis, returns its first child if it is a pane;\notherwise returns this pane. "
            }
          },
          "356": {
            "32": {
              "name": "findOrCreateRightmostSibling",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  356,
                  32
                ],
                [
                  364,
                  19
                ]
              ],
              "doc": " Private: If the parent is a horizontal axis, returns its last child if it is a pane;\notherwise returns a new pane created by splitting this pane rightward. "
            }
          }
        },
        "exports": 11
      },
      "src/project.coffee": {
        "objects": {
          "0": {
            "7": {
              "name": "path",
              "type": "import",
              "range": [
                [
                  0,
                  7
                ],
                [
                  0,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "path",
              "builtin": true
            }
          },
          "1": {
            "6": {
              "name": "url",
              "type": "import",
              "range": [
                [
                  1,
                  6
                ],
                [
                  1,
                  18
                ]
              ],
              "bindingType": "variable",
              "module": "url",
              "builtin": true
            }
          },
          "3": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  3,
                  4
                ],
                [
                  3,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "4": {
            "5": {
              "name": "fs",
              "type": "import",
              "range": [
                [
                  4,
                  5
                ],
                [
                  4,
                  21
                ]
              ],
              "bindingType": "variable",
              "module": "fs-plus@^2.2.6"
            }
          },
          "5": {
            "4": {
              "name": "Q",
              "type": "import",
              "range": [
                [
                  5,
                  4
                ],
                [
                  5,
                  14
                ]
              ],
              "bindingType": "variable",
              "module": "q@^1.0.1"
            }
          },
          "6": {
            "1": {
              "type": "import",
              "range": [
                [
                  6,
                  1
                ],
                [
                  6,
                  9
                ]
              ],
              "bindingType": "variable",
              "module": "grim@0.11.0",
              "name": "deprecate",
              "exportsProperty": "deprecate"
            }
          },
          "7": {
            "1": {
              "type": "import",
              "range": [
                [
                  7,
                  1
                ],
                [
                  7,
                  5
                ]
              ],
              "bindingType": "variable",
              "module": "theorist@^1",
              "name": "Model",
              "exportsProperty": "Model"
            }
          },
          "8": {
            "1": {
              "type": "import",
              "range": [
                [
                  8,
                  1
                ],
                [
                  8,
                  7
                ]
              ],
              "bindingType": "variable",
              "module": "emissary@^1.2.2",
              "name": "Emitter",
              "exportsProperty": "Emitter"
            },
            "10": {
              "type": "import",
              "range": [
                [
                  8,
                  10
                ],
                [
                  8,
                  19
                ]
              ],
              "bindingType": "variable",
              "module": "emissary@^1.2.2",
              "name": "Subscriber",
              "exportsProperty": "Subscriber"
            }
          },
          "9": {
            "15": {
              "name": "Serializable",
              "type": "import",
              "range": [
                [
                  9,
                  15
                ],
                [
                  9,
                  36
                ]
              ],
              "bindingType": "variable",
              "module": "serializable@^1"
            }
          },
          "10": {
            "13": {
              "name": "TextBuffer",
              "type": "import",
              "range": [
                [
                  10,
                  13
                ],
                [
                  10,
                  33
                ]
              ],
              "bindingType": "variable",
              "module": "text-buffer@^3.0.0"
            }
          },
          "11": {
            "1": {
              "type": "import",
              "range": [
                [
                  11,
                  1
                ],
                [
                  11,
                  9
                ]
              ],
              "bindingType": "variable",
              "module": "pathwatcher@^2.0.6",
              "name": "Directory",
              "exportsProperty": "Directory"
            }
          },
          "13": {
            "9": {
              "name": "Editor",
              "type": "import",
              "range": [
                [
                  13,
                  9
                ],
                [
                  13,
                  26
                ]
              ],
              "bindingType": "variable",
              "path": "./editor"
            }
          },
          "14": {
            "7": {
              "name": "Task",
              "type": "import",
              "range": [
                [
                  14,
                  7
                ],
                [
                  14,
                  22
                ]
              ],
              "bindingType": "variable",
              "path": "./task"
            }
          },
          "15": {
            "6": {
              "name": "Git",
              "type": "import",
              "range": [
                [
                  15,
                  6
                ],
                [
                  15,
                  20
                ]
              ],
              "bindingType": "variable",
              "path": "./git"
            }
          },
          "21": {
            "0": {
              "type": "class",
              "name": "Project",
              "superClass": "Model",
              "bindingType": "exports",
              "classProperties": [
                [
                  26,
                  25
                ]
              ],
              "prototypeProperties": [
                [
                  31,
                  15
                ],
                [
                  40,
                  19
                ],
                [
                  44,
                  21
                ],
                [
                  48,
                  13
                ],
                [
                  52,
                  15
                ],
                [
                  57,
                  28
                ],
                [
                  61,
                  11
                ],
                [
                  64,
                  11
                ],
                [
                  68,
                  11
                ],
                [
                  85,
                  20
                ],
                [
                  95,
                  11
                ],
                [
                  109,
                  14
                ],
                [
                  114,
                  12
                ],
                [
                  124,
                  8
                ],
                [
                  130,
                  12
                ],
                [
                  139,
                  14
                ],
                [
                  143,
                  18
                ],
                [
                  146,
                  21
                ],
                [
                  150,
                  21
                ],
                [
                  163,
                  17
                ],
                [
                  168,
                  15
                ],
                [
                  172,
                  19
                ],
                [
                  184,
                  15
                ],
                [
                  194,
                  13
                ],
                [
                  198,
                  20
                ],
                [
                  207,
                  16
                ],
                [
                  211,
                  23
                ],
                [
                  221,
                  8
                ],
                [
                  268,
                  11
                ],
                [
                  300,
                  24
                ],
                [
                  304,
                  14
                ],
                [
                  315,
                  18
                ],
                [
                  320,
                  20
                ],
                [
                  325,
                  14
                ],
                [
                  330,
                  14
                ]
              ],
              "doc": " Public: Represents a project that's opened in Atom.\n\nAn instance of this class is always available as the `atom.project` global. ",
              "range": [
                [
                  21,
                  0
                ],
                [
                  332,
                  31
                ]
              ]
            }
          },
          "26": {
            "25": {
              "name": "pathForRepositoryUrl",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "repoUrl"
              ],
              "range": [
                [
                  26,
                  25
                ],
                [
                  31,
                  1
                ]
              ],
              "doc": "Public: Find the local path for the given repository URL. "
            }
          },
          "31": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  31,
                  15
                ],
                [
                  40,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "40": {
            "19": {
              "name": "serializeParams",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  40,
                  19
                ],
                [
                  44,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "44": {
            "21": {
              "name": "deserializeParams",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "params"
              ],
              "range": [
                [
                  44,
                  21
                ],
                [
                  48,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "48": {
            "13": {
              "name": "destroyed",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  48,
                  13
                ],
                [
                  52,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "52": {
            "15": {
              "name": "destroyRepo",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  52,
                  15
                ],
                [
                  57,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "57": {
            "28": {
              "name": "destroyUnretainedBuffers",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  57,
                  28
                ],
                [
                  61,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "61": {
            "11": {
              "name": "getRepo",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  61,
                  11
                ],
                [
                  61,
                  18
                ]
              ],
              "doc": "Public: Returns the {Git} repository if available. "
            }
          },
          "64": {
            "11": {
              "name": "getPath",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  64,
                  11
                ],
                [
                  68,
                  1
                ]
              ],
              "doc": "Public: Returns the project's fullpath. "
            }
          },
          "68": {
            "11": {
              "name": "setPath",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "projectPath"
              ],
              "range": [
                [
                  68,
                  11
                ],
                [
                  85,
                  1
                ]
              ],
              "doc": "Public: Sets the project's fullpath. "
            }
          },
          "85": {
            "20": {
              "name": "getRootDirectory",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  85,
                  20
                ],
                [
                  95,
                  1
                ]
              ],
              "doc": "Public: Returns the root {Directory} object for this project. "
            }
          },
          "95": {
            "11": {
              "name": "resolve",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "uri"
              ],
              "range": [
                [
                  95,
                  11
                ],
                [
                  109,
                  1
                ]
              ],
              "doc": " Public: Given a uri, this resolves it relative to the project directory. If\nthe path is already absolute or if it is prefixed with a scheme, it is\nreturned unchanged.\n\nuri - The {String} name of the path to convert.\n\nReturns a {String} or undefined if the uri is not missing or empty. "
            }
          },
          "109": {
            "14": {
              "name": "relativize",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "fullPath"
              ],
              "range": [
                [
                  109,
                  14
                ],
                [
                  114,
                  1
                ]
              ],
              "doc": "Public: Make the given path relative to the project directory. "
            }
          },
          "114": {
            "12": {
              "name": "contains",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "pathToCheck"
              ],
              "range": [
                [
                  114,
                  12
                ],
                [
                  124,
                  1
                ]
              ],
              "doc": "Public: Returns whether the given path is inside this project. "
            }
          },
          "124": {
            "8": {
              "name": "open",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "filePath",
                "options"
              ],
              "range": [
                [
                  124,
                  8
                ],
                [
                  130,
                  1
                ]
              ],
              "doc": " Private: Given a path to a file, this constructs and associates a new\n{Editor}, showing the file.\n\nfilePath - The {String} path of the file to associate with.\noptions  - Options that you can pass to the {Editor} constructor.\n\nReturns a promise that resolves to an {Editor}. "
            }
          },
          "130": {
            "12": {
              "name": "openSync",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "filePath",
                "options"
              ],
              "range": [
                [
                  130,
                  12
                ],
                [
                  139,
                  1
                ]
              ],
              "doc": "Private: Deprecated "
            }
          },
          "139": {
            "14": {
              "name": "getBuffers",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  139,
                  14
                ],
                [
                  143,
                  1
                ]
              ],
              "doc": " Private: Retrieves all the {TextBuffer}s in the project; that is, the\nbuffers for all open files.\n\nReturns an {Array} of {TextBuffer}s. "
            }
          },
          "143": {
            "18": {
              "name": "isPathModified",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "filePath"
              ],
              "range": [
                [
                  143,
                  18
                ],
                [
                  146,
                  1
                ]
              ],
              "doc": "Private: Is the buffer for the given path modified? "
            }
          },
          "146": {
            "21": {
              "name": "findBufferForPath",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "filePath"
              ],
              "range": [
                [
                  146,
                  21
                ],
                [
                  150,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "150": {
            "21": {
              "name": "bufferForPathSync",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "filePath"
              ],
              "range": [
                [
                  150,
                  21
                ],
                [
                  163,
                  1
                ]
              ],
              "doc": "Private: Only to be used in specs "
            }
          },
          "163": {
            "17": {
              "name": "bufferForPath",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "filePath"
              ],
              "range": [
                [
                  163,
                  17
                ],
                [
                  168,
                  1
                ]
              ],
              "doc": " Private: Given a file path, this retrieves or creates a new {TextBuffer}.\n\nIf the `filePath` already has a `buffer`, that value is used instead. Otherwise,\n`text` is used as the contents of the new buffer.\n\nfilePath - A {String} representing a path. If `null`, an \"Untitled\" buffer is created.\n\nReturns a promise that resolves to the {TextBuffer}. "
            }
          },
          "168": {
            "15": {
              "name": "bufferForId",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "id"
              ],
              "range": [
                [
                  168,
                  15
                ],
                [
                  172,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "172": {
            "19": {
              "name": "buildBufferSync",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "absoluteFilePath"
              ],
              "range": [
                [
                  172,
                  19
                ],
                [
                  184,
                  1
                ]
              ],
              "doc": "Private: Still needed when deserializing a tokenized buffer "
            }
          },
          "184": {
            "15": {
              "name": "buildBuffer",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "absoluteFilePath"
              ],
              "range": [
                [
                  184,
                  15
                ],
                [
                  194,
                  1
                ]
              ],
              "doc": " Private: Given a file path, this sets its {TextBuffer}.\n\nabsoluteFilePath - A {String} representing a path.\ntext - The {String} text to use as a buffer.\n\nReturns a promise that resolves to the {TextBuffer}. "
            }
          },
          "194": {
            "13": {
              "name": "addBuffer",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "buffer",
                "options"
              ],
              "range": [
                [
                  194,
                  13
                ],
                [
                  198,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "198": {
            "20": {
              "name": "addBufferAtIndex",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "buffer",
                "index",
                "options"
              ],
              "range": [
                [
                  198,
                  20
                ],
                [
                  207,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "207": {
            "16": {
              "name": "removeBuffer",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "buffer"
              ],
              "range": [
                [
                  207,
                  16
                ],
                [
                  211,
                  1
                ]
              ],
              "doc": " Private: Removes a {TextBuffer} association from the project.\n\nReturns the removed {TextBuffer}. "
            }
          },
          "211": {
            "23": {
              "name": "removeBufferAtIndex",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "index",
                "options"
              ],
              "range": [
                [
                  211,
                  23
                ],
                [
                  221,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "221": {
            "8": {
              "name": "scan",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "regex",
                "options",
                "iterator"
              ],
              "range": [
                [
                  221,
                  8
                ],
                [
                  268,
                  1
                ]
              ],
              "doc": " Public: Performs a search across all the files in the project.\n\nregex - A {RegExp} to search with.\noptions - An optional options {Object} (default: {}):\n  :paths - An {Array} of glob patterns to search within\niterator - A {Function} callback on each file found "
            }
          },
          "268": {
            "11": {
              "name": "replace",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "regex",
                "replacementText",
                "filePaths",
                "iterator"
              ],
              "range": [
                [
                  268,
                  11
                ],
                [
                  300,
                  1
                ]
              ],
              "doc": " Public: Performs a replace across all the specified files in the project.\n\nregex - A {RegExp} to search with.\nreplacementText - Text to replace all matches of regex with\nfilePaths - List of file path strings to run the replace on.\niterator - A {Function} callback on each file with replacements:\n           `({filePath, replacements}) ->`. "
            }
          },
          "300": {
            "24": {
              "name": "buildEditorForBuffer",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "buffer",
                "editorOptions"
              ],
              "range": [
                [
                  300,
                  24
                ],
                [
                  304,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "304": {
            "14": {
              "name": "eachBuffer",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "args"
              ],
              "range": [
                [
                  304,
                  14
                ],
                [
                  315,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "315": {
            "18": {
              "name": "registerOpener",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "opener"
              ],
              "range": [
                [
                  315,
                  18
                ],
                [
                  320,
                  1
                ]
              ],
              "doc": "Deprecated: delegate "
            }
          },
          "320": {
            "20": {
              "name": "unregisterOpener",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "opener"
              ],
              "range": [
                [
                  320,
                  20
                ],
                [
                  325,
                  1
                ]
              ],
              "doc": "Deprecated: delegate "
            }
          },
          "325": {
            "14": {
              "name": "eachEditor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "callback"
              ],
              "range": [
                [
                  325,
                  14
                ],
                [
                  330,
                  1
                ]
              ],
              "doc": "Deprecated: delegate "
            }
          },
          "330": {
            "14": {
              "name": "getEditors",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  330,
                  14
                ],
                [
                  332,
                  31
                ]
              ],
              "doc": "Deprecated: delegate "
            }
          }
        },
        "exports": 21
      },
      "src/react-editor-view.coffee": {
        "objects": {
          "0": {
            "1": {
              "type": "import",
              "range": [
                [
                  0,
                  1
                ],
                [
                  0,
                  4
                ]
              ],
              "bindingType": "variable",
              "module": "space-pen@3.2.0",
              "name": "View",
              "exportsProperty": "View"
            },
            "7": {
              "type": "import",
              "range": [
                [
                  0,
                  7
                ],
                [
                  0,
                  7
                ]
              ],
              "bindingType": "variable",
              "module": "space-pen@3.2.0",
              "name": "$",
              "exportsProperty": "$"
            }
          },
          "1": {
            "8": {
              "name": "React",
              "type": "import",
              "range": [
                [
                  1,
                  8
                ],
                [
                  1,
                  32
                ]
              ],
              "bindingType": "variable",
              "module": "react-atom-fork@^0.11.1"
            }
          },
          "2": {
            "1": {
              "type": "import",
              "range": [
                [
                  2,
                  1
                ],
                [
                  2,
                  8
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1",
              "name": "defaults",
              "exportsProperty": "defaults"
            }
          },
          "3": {
            "13": {
              "name": "TextBuffer",
              "type": "import",
              "range": [
                [
                  3,
                  13
                ],
                [
                  3,
                  33
                ]
              ],
              "bindingType": "variable",
              "module": "text-buffer@^3.0.0"
            }
          },
          "4": {
            "9": {
              "name": "Editor",
              "type": "import",
              "range": [
                [
                  4,
                  9
                ],
                [
                  4,
                  26
                ]
              ],
              "bindingType": "variable",
              "path": "./editor"
            }
          },
          "5": {
            "18": {
              "name": "EditorComponent",
              "type": "import",
              "range": [
                [
                  5,
                  18
                ],
                [
                  5,
                  45
                ]
              ],
              "bindingType": "variable",
              "path": "./editor-component"
            }
          },
          "8": {
            "0": {
              "type": "class",
              "name": "ReactEditorView",
              "superClass": "View",
              "bindingType": "exports",
              "classProperties": [
                [
                  9,
                  12
                ]
              ],
              "prototypeProperties": [
                [
                  14,
                  17
                ],
                [
                  16,
                  15
                ],
                [
                  58,
                  13
                ],
                [
                  60,
                  12
                ],
                [
                  69,
                  15
                ],
                [
                  77,
                  13
                ],
                [
                  83,
                  14
                ],
                [
                  89,
                  18
                ],
                [
                  92,
                  26
                ],
                [
                  95,
                  26
                ],
                [
                  98,
                  26
                ],
                [
                  101,
                  25
                ],
                [
                  105,
                  34
                ],
                [
                  108,
                  34
                ],
                [
                  111,
                  21
                ],
                [
                  116,
                  16
                ],
                [
                  122,
                  13
                ],
                [
                  127,
                  14
                ],
                [
                  132,
                  11
                ],
                [
                  137,
                  13
                ],
                [
                  141,
                  11
                ],
                [
                  144,
                  9
                ],
                [
                  150,
                  8
                ],
                [
                  154,
                  8
                ],
                [
                  158,
                  20
                ],
                [
                  165,
                  12
                ],
                [
                  168,
                  10
                ],
                [
                  171,
                  12
                ],
                [
                  174,
                  28
                ],
                [
                  177,
                  27
                ],
                [
                  180,
                  17
                ],
                [
                  183,
                  17
                ],
                [
                  186,
                  15
                ],
                [
                  189,
                  15
                ],
                [
                  192,
                  19
                ],
                [
                  195,
                  17
                ],
                [
                  198,
                  22
                ],
                [
                  201,
                  15
                ],
                [
                  204,
                  21
                ],
                [
                  207,
                  18
                ],
                [
                  210,
                  18
                ],
                [
                  213,
                  11
                ],
                [
                  216,
                  11
                ],
                [
                  219,
                  14
                ],
                [
                  222,
                  18
                ],
                [
                  225,
                  19
                ],
                [
                  228,
                  24
                ],
                [
                  230,
                  17
                ],
                [
                  232,
                  16
                ],
                [
                  234,
                  10
                ],
                [
                  236,
                  22
                ],
                [
                  242,
                  27
                ]
              ],
              "doc": "~Private~",
              "range": [
                [
                  8,
                  0
                ],
                [
                  243,
                  49
                ]
              ]
            }
          },
          "9": {
            "12": {
              "name": "content",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "params"
              ],
              "range": [
                [
                  9,
                  12
                ],
                [
                  14,
                  1
                ]
              ]
            }
          },
          "14": {
            "17": {
              "name": "focusOnAttach",
              "type": "primitive",
              "range": [
                [
                  14,
                  17
                ],
                [
                  14,
                  21
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "16": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "editorOrParams",
                "props"
              ],
              "range": [
                [
                  16,
                  15
                ],
                [
                  58,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "58": {
            "13": {
              "name": "getEditor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  58,
                  13
                ],
                [
                  58,
                  22
                ]
              ],
              "doc": "~Private~"
            }
          },
          "69": {
            "15": {
              "name": "afterAttach",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "onDom"
              ],
              "range": [
                [
                  69,
                  15
                ],
                [
                  77,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "77": {
            "13": {
              "name": "scrollTop",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scrollTop"
              ],
              "range": [
                [
                  77,
                  13
                ],
                [
                  83,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "83": {
            "14": {
              "name": "scrollLeft",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scrollLeft"
              ],
              "range": [
                [
                  83,
                  14
                ],
                [
                  89,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "89": {
            "18": {
              "name": "scrollToBottom",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  89,
                  18
                ],
                [
                  92,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "92": {
            "26": {
              "name": "scrollToScreenPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenPosition",
                "options"
              ],
              "range": [
                [
                  92,
                  26
                ],
                [
                  95,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "95": {
            "26": {
              "name": "scrollToBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferPosition",
                "options"
              ],
              "range": [
                [
                  95,
                  26
                ],
                [
                  98,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "98": {
            "26": {
              "name": "scrollToCursorPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  98,
                  26
                ],
                [
                  101,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "101": {
            "25": {
              "name": "scrollToPixelPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "pixelPosition"
              ],
              "range": [
                [
                  101,
                  25
                ],
                [
                  105,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "105": {
            "34": {
              "name": "pixelPositionForBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferPosition"
              ],
              "range": [
                [
                  105,
                  34
                ],
                [
                  108,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "108": {
            "34": {
              "name": "pixelPositionForScreenPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenPosition"
              ],
              "range": [
                [
                  108,
                  34
                ],
                [
                  111,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "111": {
            "21": {
              "name": "appendToLinesView",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "view"
              ],
              "range": [
                [
                  111,
                  21
                ],
                [
                  116,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "116": {
            "16": {
              "name": "beforeRemove",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  116,
                  16
                ],
                [
                  122,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "122": {
            "13": {
              "name": "splitLeft",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  122,
                  13
                ],
                [
                  127,
                  1
                ]
              ],
              "doc": "Public: Split the editor view left. "
            }
          },
          "127": {
            "14": {
              "name": "splitRight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  127,
                  14
                ],
                [
                  132,
                  1
                ]
              ],
              "doc": "Public: Split the editor view right. "
            }
          },
          "132": {
            "11": {
              "name": "splitUp",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  132,
                  11
                ],
                [
                  137,
                  1
                ]
              ],
              "doc": "Public: Split the editor view up. "
            }
          },
          "137": {
            "13": {
              "name": "splitDown",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  137,
                  13
                ],
                [
                  141,
                  1
                ]
              ],
              "doc": "Public: Split the editor view down. "
            }
          },
          "141": {
            "11": {
              "name": "getPane",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  141,
                  11
                ],
                [
                  144,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "144": {
            "9": {
              "name": "focus",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  144,
                  9
                ],
                [
                  150,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "150": {
            "8": {
              "name": "hide",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  150,
                  8
                ],
                [
                  154,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "154": {
            "8": {
              "name": "show",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  154,
                  8
                ],
                [
                  158,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "158": {
            "20": {
              "name": "pollComponentDOM",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  158,
                  20
                ],
                [
                  165,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "165": {
            "12": {
              "name": "pageDown",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  165,
                  12
                ],
                [
                  168,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "168": {
            "10": {
              "name": "pageUp",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  168,
                  10
                ],
                [
                  171,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "171": {
            "12": {
              "name": "getModel",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  171,
                  12
                ],
                [
                  174,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "174": {
            "28": {
              "name": "getFirstVisibleScreenRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  174,
                  28
                ],
                [
                  177,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "177": {
            "27": {
              "name": "getLastVisibleScreenRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  177,
                  27
                ],
                [
                  180,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "180": {
            "17": {
              "name": "getFontFamily",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  180,
                  17
                ],
                [
                  183,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "183": {
            "17": {
              "name": "setFontFamily",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "fontFamily"
              ],
              "range": [
                [
                  183,
                  17
                ],
                [
                  186,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "186": {
            "15": {
              "name": "getFontSize",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  186,
                  15
                ],
                [
                  189,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "189": {
            "15": {
              "name": "setFontSize",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "fontSize"
              ],
              "range": [
                [
                  189,
                  15
                ],
                [
                  192,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "192": {
            "19": {
              "name": "setWidthInChars",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "widthInChars"
              ],
              "range": [
                [
                  192,
                  19
                ],
                [
                  195,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "195": {
            "17": {
              "name": "setLineHeight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "lineHeight"
              ],
              "range": [
                [
                  195,
                  17
                ],
                [
                  198,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "198": {
            "22": {
              "name": "setShowIndentGuide",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "showIndentGuide"
              ],
              "range": [
                [
                  198,
                  22
                ],
                [
                  201,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "201": {
            "15": {
              "name": "setSoftWrap",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "softWrap"
              ],
              "range": [
                [
                  201,
                  15
                ],
                [
                  204,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "204": {
            "21": {
              "name": "setShowInvisibles",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "showInvisibles"
              ],
              "range": [
                [
                  204,
                  21
                ],
                [
                  207,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "207": {
            "18": {
              "name": "toggleSoftWrap",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  207,
                  18
                ],
                [
                  210,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "210": {
            "18": {
              "name": "toggleSoftTabs",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  210,
                  18
                ],
                [
                  213,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "213": {
            "11": {
              "name": "getText",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  213,
                  11
                ],
                [
                  216,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "216": {
            "11": {
              "name": "setText",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "text"
              ],
              "range": [
                [
                  216,
                  11
                ],
                [
                  219,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "219": {
            "14": {
              "name": "insertText",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "text"
              ],
              "range": [
                [
                  219,
                  14
                ],
                [
                  222,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "222": {
            "18": {
              "name": "isInputEnabled",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  222,
                  18
                ],
                [
                  225,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "225": {
            "19": {
              "name": "setInputEnabled",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "inputEnabled"
              ],
              "range": [
                [
                  225,
                  19
                ],
                [
                  228,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "228": {
            "24": {
              "name": "requestDisplayUpdate",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  228,
                  24
                ],
                [
                  228,
                  25
                ]
              ],
              "doc": "~Private~"
            }
          },
          "230": {
            "17": {
              "name": "updateDisplay",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  230,
                  17
                ],
                [
                  230,
                  18
                ]
              ],
              "doc": "~Private~"
            }
          },
          "232": {
            "16": {
              "name": "resetDisplay",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  232,
                  16
                ],
                [
                  232,
                  17
                ]
              ],
              "doc": "~Private~"
            }
          },
          "234": {
            "10": {
              "name": "redraw",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  234,
                  10
                ],
                [
                  234,
                  11
                ]
              ],
              "doc": "~Private~"
            }
          },
          "236": {
            "22": {
              "name": "setPlaceholderText",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "placeholderText"
              ],
              "range": [
                [
                  236,
                  22
                ],
                [
                  242,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "242": {
            "27": {
              "name": "lineElementForScreenRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenRow"
              ],
              "range": [
                [
                  242,
                  27
                ],
                [
                  243,
                  49
                ]
              ],
              "doc": "~Private~"
            }
          }
        },
        "exports": 8
      },
      "src/replace-handler.coffee": {
        "objects": {
          "0": {
            "1": {
              "type": "import",
              "range": [
                [
                  0,
                  1
                ],
                [
                  0,
                  12
                ]
              ],
              "bindingType": "variable",
              "module": "scandal@1.0.0",
              "name": "PathReplacer",
              "exportsProperty": "PathReplacer"
            }
          }
        },
        "exports": 2
      },
      "src/repository-status-handler.coffee": {
        "objects": {
          "0": {
            "6": {
              "name": "Git",
              "type": "import",
              "range": [
                [
                  0,
                  6
                ],
                [
                  0,
                  24
                ]
              ],
              "bindingType": "variable",
              "module": "git-utils@^2.1.3"
            }
          },
          "1": {
            "7": {
              "name": "path",
              "type": "import",
              "range": [
                [
                  1,
                  7
                ],
                [
                  1,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "path",
              "builtin": true
            }
          }
        },
        "exports": 3
      },
      "src/row-map.coffee": {
        "objects": {
          "0": {
            "1": {
              "type": "import",
              "range": [
                [
                  0,
                  1
                ],
                [
                  0,
                  15
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1",
              "name": "spliceWithArray",
              "exportsProperty": "spliceWithArray"
            }
          },
          "16": {
            "0": {
              "type": "class",
              "name": "RowMap",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  17,
                  15
                ],
                [
                  21,
                  14
                ],
                [
                  27,
                  30
                ],
                [
                  40,
                  30
                ],
                [
                  50,
                  30
                ],
                [
                  61,
                  17
                ],
                [
                  83,
                  23
                ],
                [
                  93,
                  23
                ],
                [
                  103,
                  35
                ],
                [
                  116,
                  11
                ]
              ],
              "doc": " Private: Used by the display buffer to map screen rows to buffer rows and vice-versa.\nThis mapping may not be 1:1 due to folds and soft-wraps. This object maintains\nan array of regions, which contain `bufferRows` and `screenRows` fields.\n\nRectangular Regions:\nIf a region has the same number of buffer rows and screen rows, it is referred\nto as \"rectangular\", and represents one or more non-soft-wrapped, non-folded\nlines.\n\nTrapezoidal Regions:\nIf a region has one buffer row and more than one screen row, it represents a\nsoft-wrapped line. If a region has one screen row and more than one buffer\nrow, it represents folded lines ",
              "range": [
                [
                  16,
                  0
                ],
                [
                  118,
                  35
                ]
              ]
            }
          },
          "17": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  17,
                  15
                ],
                [
                  21,
                  1
                ]
              ]
            }
          },
          "21": {
            "14": {
              "name": "getRegions",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  21,
                  14
                ],
                [
                  27,
                  1
                ]
              ],
              "doc": "Public: Returns a copy of all the regions in the map "
            }
          },
          "27": {
            "30": {
              "name": "screenRowRangeForBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "targetBufferRow"
              ],
              "range": [
                [
                  27,
                  30
                ],
                [
                  40,
                  1
                ]
              ],
              "doc": " Public: Returns an end-row-exclusive range of screen rows corresponding to\nthe given buffer row. If the buffer row is soft-wrapped, the range may span\nmultiple screen rows. Otherwise it will span a single screen row. "
            }
          },
          "40": {
            "30": {
              "name": "bufferRowRangeForScreenRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "targetScreenRow"
              ],
              "range": [
                [
                  40,
                  30
                ],
                [
                  50,
                  1
                ]
              ],
              "doc": " Public: Returns an end-row-exclusive range of buffer rows corresponding to\nthe given screen row. If the screen row is the first line of a folded range\nof buffer rows, the range may span multiple buffer rows. Otherwise it will\nspan a single buffer row. "
            }
          },
          "50": {
            "30": {
              "name": "bufferRowRangeForBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "targetBufferRow"
              ],
              "range": [
                [
                  50,
                  30
                ],
                [
                  61,
                  1
                ]
              ],
              "doc": " Public: If the given buffer row is part of a folded row range, returns that\nrow range. Otherwise returns a range spanning only the given buffer row. "
            }
          },
          "61": {
            "17": {
              "name": "spliceRegions",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "startBufferRow",
                "bufferRowCount",
                "regions"
              ],
              "range": [
                [
                  61,
                  17
                ],
                [
                  83,
                  1
                ]
              ],
              "doc": " Public: Given a starting buffer row, the number of buffer rows to replace,\nand an array of regions of shape {bufferRows: n, screenRows: m}, splices\nthe regions at the appropriate location in the map. This method is used by\ndisplay buffer to keep the map updated when the underlying buffer changes. "
            }
          },
          "83": {
            "23": {
              "name": "traverseToBufferRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "targetBufferRow"
              ],
              "range": [
                [
                  83,
                  23
                ],
                [
                  93,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "93": {
            "23": {
              "name": "traverseToScreenRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "targetScreenRow"
              ],
              "range": [
                [
                  93,
                  23
                ],
                [
                  103,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "103": {
            "35": {
              "name": "mergeAdjacentRectangularRegions",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "startIndex",
                "endIndex"
              ],
              "range": [
                [
                  103,
                  35
                ],
                [
                  116,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "116": {
            "11": {
              "name": "inspect",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  116,
                  11
                ],
                [
                  118,
                  35
                ]
              ],
              "doc": "Public: Returns an array of strings describing the map's regions. "
            }
          }
        },
        "exports": 16
      },
      "src/scan-handler.coffee": {
        "objects": {
          "0": {
            "1": {
              "type": "import",
              "range": [
                [
                  0,
                  1
                ],
                [
                  0,
                  12
                ]
              ],
              "bindingType": "variable",
              "module": "scandal@1.0.0",
              "name": "PathSearcher",
              "exportsProperty": "PathSearcher"
            },
            "15": {
              "type": "import",
              "range": [
                [
                  0,
                  15
                ],
                [
                  0,
                  25
                ]
              ],
              "bindingType": "variable",
              "module": "scandal@1.0.0",
              "name": "PathScanner",
              "exportsProperty": "PathScanner"
            },
            "28": {
              "type": "import",
              "range": [
                [
                  0,
                  28
                ],
                [
                  0,
                  33
                ]
              ],
              "bindingType": "variable",
              "module": "scandal@1.0.0",
              "name": "search",
              "exportsProperty": "search"
            }
          }
        },
        "exports": 2
      },
      "src/scoped-properties.coffee": {
        "objects": {
          "0": {
            "7": {
              "name": "CSON",
              "type": "import",
              "range": [
                [
                  0,
                  7
                ],
                [
                  0,
                  22
                ]
              ],
              "bindingType": "variable",
              "module": "season@^1.0.2"
            }
          },
          "3": {
            "0": {
              "type": "class",
              "name": "ScopedProperties",
              "bindingType": "exports",
              "classProperties": [
                [
                  4,
                  9
                ]
              ],
              "prototypeProperties": [
                [
                  11,
                  15
                ],
                [
                  13,
                  12
                ],
                [
                  17,
                  14
                ]
              ],
              "doc": "~Private~",
              "range": [
                [
                  3,
                  0
                ],
                [
                  18,
                  39
                ]
              ]
            }
          },
          "4": {
            "9": {
              "name": "load",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "scopedPropertiesPath",
                "callback"
              ],
              "range": [
                [
                  4,
                  9
                ],
                [
                  11,
                  1
                ]
              ]
            }
          },
          "11": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null,
                null
              ],
              "range": [
                [
                  11,
                  15
                ],
                [
                  11,
                  43
                ]
              ],
              "doc": "~Private~"
            }
          },
          "13": {
            "12": {
              "name": "activate",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  13,
                  12
                ],
                [
                  17,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "17": {
            "14": {
              "name": "deactivate",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  17,
                  14
                ],
                [
                  18,
                  39
                ]
              ],
              "doc": "~Private~"
            }
          }
        },
        "exports": 3
      },
      "src/scroll-view.coffee": {
        "objects": {
          "0": {
            "1": {
              "type": "import",
              "range": [
                [
                  0,
                  1
                ],
                [
                  0,
                  4
                ]
              ],
              "bindingType": "variable",
              "path": "./space-pen-extensions",
              "name": "View",
              "exportsProperty": "View"
            }
          },
          "21": {
            "0": {
              "type": "class",
              "name": "ScrollView",
              "superClass": "View",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  22,
                  14
                ]
              ],
              "doc": " Public: Represents a view that scrolls.\n\nSubclasses must call `super` if overriding the `initialize` method or else\nthe following events won't be handled by the ScrollView.\n\n## Events\n  * `core:move-up`\n  * `core:move-down`\n  * `core:page-up`\n  * `core:page-down`\n  * `core:move-to-top`\n  * `core:move-to-bottom`\n\n## Requiring in packages\n\n```coffee\n  {ScrollView} = require 'atom'\n``` ",
              "range": [
                [
                  21,
                  0
                ],
                [
                  28,
                  51
                ]
              ]
            }
          },
          "22": {
            "14": {
              "name": "initialize",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  22,
                  14
                ],
                [
                  28,
                  51
                ]
              ]
            }
          }
        },
        "exports": 21
      },
      "src/scrollbar-component.coffee": {
        "objects": {
          "0": {
            "8": {
              "name": "React",
              "type": "import",
              "range": [
                [
                  0,
                  8
                ],
                [
                  0,
                  32
                ]
              ],
              "bindingType": "variable",
              "module": "react-atom-fork@^0.11.1"
            }
          },
          "1": {
            "1": {
              "type": "import",
              "range": [
                [
                  1,
                  1
                ],
                [
                  1,
                  3
                ]
              ],
              "bindingType": "variable",
              "module": "reactionary-atom-fork@^1.0.0",
              "name": "div",
              "exportsProperty": "div"
            }
          },
          "2": {
            "1": {
              "type": "import",
              "range": [
                [
                  2,
                  1
                ],
                [
                  2,
                  6
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1",
              "name": "extend",
              "exportsProperty": "extend"
            },
            "9": {
              "type": "import",
              "range": [
                [
                  2,
                  9
                ],
                [
                  2,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1",
              "name": "isEqualForProperties",
              "exportsProperty": "isEqualForProperties"
            }
          },
          "5": {
            "21": {
              "name": "ScrollbarComponent",
              "type": "function",
              "range": [
                [
                  5,
                  21
                ],
                [
                  69,
                  28
                ]
              ]
            }
          },
          "6": {
            "15": {
              "name": "'ScrollbarComponent'",
              "type": "primitive",
              "range": [
                [
                  6,
                  15
                ],
                [
                  6,
                  34
                ]
              ]
            }
          },
          "8": {
            "10": {
              "name": "render",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  8,
                  10
                ],
                [
                  30,
                  1
                ]
              ],
              "doc": null
            }
          },
          "30": {
            "21": {
              "name": "componentDidMount",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  30,
                  21
                ],
                [
                  36,
                  1
                ]
              ],
              "doc": null
            }
          },
          "36": {
            "25": {
              "name": "shouldComponentUpdate",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "newProps"
              ],
              "range": [
                [
                  36,
                  25
                ],
                [
                  45,
                  1
                ]
              ],
              "doc": null
            }
          },
          "45": {
            "22": {
              "name": "componentDidUpdate",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  45,
                  22
                ],
                [
                  57,
                  1
                ]
              ],
              "doc": null
            }
          },
          "57": {
            "12": {
              "name": "onScroll",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  57,
                  12
                ],
                [
                  69,
                  28
                ]
              ],
              "doc": null
            }
          }
        },
        "exports": 5
      },
      "src/scrollbar-corner-component.coffee": {
        "objects": {
          "0": {
            "8": {
              "name": "React",
              "type": "import",
              "range": [
                [
                  0,
                  8
                ],
                [
                  0,
                  32
                ]
              ],
              "bindingType": "variable",
              "module": "react-atom-fork@^0.11.1"
            }
          },
          "1": {
            "1": {
              "type": "import",
              "range": [
                [
                  1,
                  1
                ],
                [
                  1,
                  3
                ]
              ],
              "bindingType": "variable",
              "module": "reactionary-atom-fork@^1.0.0",
              "name": "div",
              "exportsProperty": "div"
            }
          },
          "2": {
            "1": {
              "type": "import",
              "range": [
                [
                  2,
                  1
                ],
                [
                  2,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1",
              "name": "isEqualForProperties",
              "exportsProperty": "isEqualForProperties"
            }
          },
          "5": {
            "27": {
              "name": "ScrollbarCornerComponent",
              "type": "function",
              "range": [
                [
                  5,
                  27
                ],
                [
                  23,
                  99
                ]
              ]
            }
          },
          "6": {
            "15": {
              "name": "'ScrollbarCornerComponent'",
              "type": "primitive",
              "range": [
                [
                  6,
                  15
                ],
                [
                  6,
                  40
                ]
              ]
            }
          },
          "8": {
            "10": {
              "name": "render",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  8,
                  10
                ],
                [
                  22,
                  1
                ]
              ],
              "doc": null
            }
          },
          "22": {
            "25": {
              "name": "shouldComponentUpdate",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "newProps"
              ],
              "range": [
                [
                  22,
                  25
                ],
                [
                  23,
                  99
                ]
              ],
              "doc": null
            }
          }
        },
        "exports": 5
      },
      "src/select-list-view.coffee": {
        "objects": {
          "0": {
            "1": {
              "type": "import",
              "range": [
                [
                  0,
                  1
                ],
                [
                  0,
                  1
                ]
              ],
              "bindingType": "variable",
              "path": "./space-pen-extensions",
              "name": "$",
              "exportsProperty": "$"
            },
            "4": {
              "type": "import",
              "range": [
                [
                  0,
                  4
                ],
                [
                  0,
                  7
                ]
              ],
              "bindingType": "variable",
              "path": "./space-pen-extensions",
              "name": "View",
              "exportsProperty": "View"
            }
          },
          "4": {
            "15": {
              "name": "EditorView",
              "type": "import",
              "range": [
                [
                  4,
                  15
                ],
                [
                  4,
                  37
                ]
              ],
              "bindingType": "variable",
              "path": "./editor-view"
            }
          },
          "5": {
            "14": {
              "type": "primitive",
              "range": [
                [
                  5,
                  14
                ],
                [
                  5,
                  41
                ]
              ]
            }
          },
          "36": {
            "0": {
              "type": "class",
              "name": "SelectListView",
              "superClass": "View",
              "bindingType": "exports",
              "classProperties": [
                [
                  37,
                  12
                ]
              ],
              "prototypeProperties": [
                [
                  46,
                  12
                ],
                [
                  47,
                  19
                ],
                [
                  48,
                  17
                ],
                [
                  49,
                  14
                ],
                [
                  55,
                  14
                ],
                [
                  90,
                  24
                ],
                [
                  102,
                  12
                ],
                [
                  109,
                  12
                ],
                [
                  119,
                  14
                ],
                [
                  136,
                  18
                ],
                [
                  143,
                  16
                ],
                [
                  174,
                  19
                ],
                [
                  179,
                  15
                ],
                [
                  181,
                  26
                ],
                [
                  186,
                  22
                ],
                [
                  191,
                  18
                ],
                [
                  197,
                  20
                ],
                [
                  207,
                  23
                ],
                [
                  213,
                  19
                ],
                [
                  216,
                  20
                ],
                [
                  233,
                  15
                ],
                [
                  244,
                  13
                ],
                [
                  258,
                  16
                ],
                [
                  261,
                  21
                ],
                [
                  266,
                  23
                ],
                [
                  269,
                  16
                ],
                [
                  275,
                  13
                ],
                [
                  283,
                  10
                ]
              ],
              "doc": " Public: Provides a view that renders a list of items with an editor that\nfilters the items. Used by many packages such as the fuzzy-finder,\ncommand-palette, symbols-view and autocomplete.\n\nSubclasses must implement the following methods:\n\n* {::viewForItem}\n* {::confirmed}\n\n## Requiring in packages\n\n```coffee\n{SelectListView} = require 'atom'\n\nclass MySelectListView extends SelectListView\n  initialize: ->\n    super\n    @addClass('overlay from-top')\n    @setItems(['Hello', 'World'])\n    atom.workspaceView.append(this)\n    @focusFilterEditor()\n\n  viewForItem: (item) ->\n    \"<li>#{item}</li>\"\n\n  confirmed: (item) ->\n    console.log(\"#{item} was selected\")\n``` ",
              "range": [
                [
                  36,
                  0
                ],
                [
                  291,
                  34
                ]
              ]
            }
          },
          "37": {
            "12": {
              "name": "content",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  37,
                  12
                ],
                [
                  46,
                  1
                ]
              ]
            }
          },
          "46": {
            "12": {
              "name": "maxItems",
              "type": "primitive",
              "range": [
                [
                  46,
                  12
                ],
                [
                  46,
                  19
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "47": {
            "19": {
              "name": "scheduleTimeout",
              "type": "primitive",
              "range": [
                [
                  47,
                  19
                ],
                [
                  47,
                  22
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "48": {
            "17": {
              "name": "inputThrottle",
              "type": "primitive",
              "range": [
                [
                  48,
                  17
                ],
                [
                  48,
                  18
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "49": {
            "14": {
              "name": "cancelling",
              "type": "primitive",
              "range": [
                [
                  49,
                  14
                ],
                [
                  49,
                  18
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "55": {
            "14": {
              "name": "initialize",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  55,
                  14
                ],
                [
                  90,
                  1
                ]
              ],
              "doc": " Public: Initialize the select list view.\n\nThis method can be overridden by subclasses but `super` should always\nbe called. "
            }
          },
          "90": {
            "24": {
              "name": "schedulePopulateList",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  90,
                  24
                ],
                [
                  102,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "102": {
            "12": {
              "name": "setItems",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  102,
                  12
                ],
                [
                  109,
                  1
                ]
              ],
              "doc": " Public: Set the array of items to display in the list.\n\nThis should be model items not actual views. {::viewForItem} will be\ncalled to render the item when it is being appended to the list view.\n\nitems - The {Array} of model items to display in the list (default: []). "
            }
          },
          "109": {
            "12": {
              "name": "setError",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "message"
              ],
              "range": [
                [
                  109,
                  12
                ],
                [
                  119,
                  1
                ]
              ],
              "doc": " Public: Set the error message to display.\n\nmessage - The {String} error message (default: ''). "
            }
          },
          "119": {
            "14": {
              "name": "setLoading",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "message"
              ],
              "range": [
                [
                  119,
                  14
                ],
                [
                  136,
                  1
                ]
              ],
              "doc": " Public: Set the loading message to display.\n\nmessage - The {String} loading message (default: ''). "
            }
          },
          "136": {
            "18": {
              "name": "getFilterQuery",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  136,
                  18
                ],
                [
                  143,
                  1
                ]
              ],
              "doc": " Public: Get the filter query to use when fuzzy filtering the visible\nelements.\n\nBy default this method returns the text in the mini editor but it can be\noverridden by subclasses if needed.\n\nReturns a {String} to use when fuzzy filtering the elements to display. "
            }
          },
          "143": {
            "16": {
              "name": "populateList",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  143,
                  16
                ],
                [
                  174,
                  1
                ]
              ],
              "doc": " Public: Populate the list view with the model items previously set by\ncalling {::setItems}.\n\nSubclasses may override this method but should always call `super`. "
            }
          },
          "174": {
            "19": {
              "name": "getEmptyMessage",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "itemCount",
                "filteredItemCount"
              ],
              "range": [
                [
                  174,
                  19
                ],
                [
                  174,
                  70
                ]
              ],
              "doc": " Public: Get the message to display when there are no items.\n\nSubclasses may override this method to customize the message.\n\nitemCount - The {Number} of items in the array specified to {::setItems}\nfilteredItemCount - The {Number} of items that pass the fuzzy filter test.\n\nReturns a {String} message (default: 'No matches found'). "
            }
          },
          "179": {
            "15": {
              "name": "setMaxItems",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  179,
                  15
                ],
                [
                  179,
                  28
                ]
              ],
              "doc": " Public: Set the maximum numbers of items to display in the list.\n\nmaxItems - The maximum {Number} of items to display. "
            }
          },
          "181": {
            "26": {
              "name": "selectPreviousItemView",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  181,
                  26
                ],
                [
                  186,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "186": {
            "22": {
              "name": "selectNextItemView",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  186,
                  22
                ],
                [
                  191,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "191": {
            "18": {
              "name": "selectItemView",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "view"
              ],
              "range": [
                [
                  191,
                  18
                ],
                [
                  197,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "197": {
            "20": {
              "name": "scrollToItemView",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "view"
              ],
              "range": [
                [
                  197,
                  20
                ],
                [
                  207,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "207": {
            "23": {
              "name": "getSelectedItemView",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  207,
                  23
                ],
                [
                  213,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "213": {
            "19": {
              "name": "getSelectedItem",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  213,
                  19
                ],
                [
                  216,
                  1
                ]
              ],
              "doc": " Public: Get the model item that is currently selected in the list view.\n\nReturns a model item. "
            }
          },
          "216": {
            "20": {
              "name": "confirmSelection",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  216,
                  20
                ],
                [
                  233,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "233": {
            "15": {
              "name": "viewForItem",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "item"
              ],
              "range": [
                [
                  233,
                  15
                ],
                [
                  244,
                  1
                ]
              ],
              "doc": " Public: Create a view for the given model item.\n\nThis method must be overridden by subclasses.\n\nThis is called when the item is about to appended to the list view.\n\nitem - The model item being rendered. This will always be one of the items\n       previously passed to {::setItems}.\n\nReturns a String of HTML, DOM element, jQuery object, or View. "
            }
          },
          "244": {
            "13": {
              "name": "confirmed",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "item"
              ],
              "range": [
                [
                  244,
                  13
                ],
                [
                  258,
                  1
                ]
              ],
              "doc": " Public: Callback function for when an item is selected.\n\nThis method must be overridden by subclasses.\n\nitem - The selected model item. This will always be one of the items\n       previously passed to {::setItems}.\n\nReturns a DOM element, jQuery object, or {View}. "
            }
          },
          "258": {
            "16": {
              "name": "getFilterKey",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  258,
                  16
                ],
                [
                  258,
                  17
                ]
              ],
              "doc": " Public: Get the property name to use when filtering items.\n\nThis method may be overridden by classes to allow fuzzy filtering based\non a specific property of the item objects.\n\nFor example if the objects you pass to {::setItems} are of the type\n`{\"id\": 3, \"name\": \"Atom\"}` then you would return `\"name\"` from this method\nto fuzzy filter by that property when text is entered into this view's\neditor.\n\nReturns the property name to fuzzy filter by. "
            }
          },
          "261": {
            "21": {
              "name": "focusFilterEditor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  261,
                  21
                ],
                [
                  266,
                  1
                ]
              ],
              "doc": "Public: Focus the fuzzy filter editor view. "
            }
          },
          "266": {
            "23": {
              "name": "storeFocusedElement",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  266,
                  23
                ],
                [
                  269,
                  1
                ]
              ],
              "doc": " Public: Store the currently focused element. This element will be given\nback focus when {::cancel} is called. "
            }
          },
          "269": {
            "16": {
              "name": "restoreFocus",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  269,
                  16
                ],
                [
                  275,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "275": {
            "13": {
              "name": "cancelled",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  275,
                  13
                ],
                [
                  283,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "283": {
            "10": {
              "name": "cancel",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  283,
                  10
                ],
                [
                  291,
                  34
                ]
              ],
              "doc": " Public: Cancel and close this select list view.\n\nThis restores focus to the previously focused element if\n{::storeFocusedElement} was called prior to this view being attached. "
            }
          }
        },
        "exports": 36
      },
      "src/selection-view.coffee": {
        "objects": {
          "0": {
            "1": {
              "type": "import",
              "range": [
                [
                  0,
                  1
                ],
                [
                  0,
                  5
                ]
              ],
              "bindingType": "variable",
              "module": "text-buffer@^3.0.0",
              "name": "Point",
              "exportsProperty": "Point"
            },
            "8": {
              "type": "import",
              "range": [
                [
                  0,
                  8
                ],
                [
                  0,
                  12
                ]
              ],
              "bindingType": "variable",
              "module": "text-buffer@^3.0.0",
              "name": "Range",
              "exportsProperty": "Range"
            }
          },
          "1": {
            "1": {
              "type": "import",
              "range": [
                [
                  1,
                  1
                ],
                [
                  1,
                  4
                ]
              ],
              "bindingType": "variable",
              "path": "./space-pen-extensions",
              "name": "View",
              "exportsProperty": "View"
            },
            "7": {
              "type": "import",
              "range": [
                [
                  1,
                  7
                ],
                [
                  1,
                  8
                ]
              ],
              "bindingType": "variable",
              "path": "./space-pen-extensions",
              "name": "$$",
              "exportsProperty": "$$"
            }
          },
          "4": {
            "0": {
              "type": "class",
              "name": "SelectionView",
              "superClass": "View",
              "bindingType": "exports",
              "classProperties": [
                [
                  6,
                  12
                ]
              ],
              "prototypeProperties": [
                [
                  9,
                  11
                ],
                [
                  10,
                  16
                ],
                [
                  12,
                  14
                ],
                [
                  19,
                  17
                ],
                [
                  37,
                  16
                ],
                [
                  50,
                  26
                ],
                [
                  57,
                  16
                ],
                [
                  61,
                  18
                ],
                [
                  64,
                  18
                ],
                [
                  67,
                  19
                ],
                [
                  70,
                  19
                ],
                [
                  73,
                  13
                ],
                [
                  79,
                  15
                ],
                [
                  82,
                  10
                ]
              ],
              "doc": "~Private~",
              "range": [
                [
                  4,
                  0
                ],
                [
                  84,
                  9
                ]
              ]
            }
          },
          "6": {
            "12": {
              "name": "content",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  6,
                  12
                ],
                [
                  9,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "9": {
            "11": {
              "name": "regions",
              "type": "primitive",
              "range": [
                [
                  9,
                  11
                ],
                [
                  9,
                  14
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "10": {
            "16": {
              "name": "needsRemoval",
              "type": "primitive",
              "range": [
                [
                  10,
                  16
                ],
                [
                  10,
                  20
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "12": {
            "14": {
              "name": "initialize",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  12,
                  14
                ],
                [
                  19,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "19": {
            "17": {
              "name": "updateDisplay",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  19,
                  17
                ],
                [
                  37,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "37": {
            "16": {
              "name": "appendRegion",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "rows",
                "start",
                "end"
              ],
              "range": [
                [
                  37,
                  16
                ],
                [
                  50,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "50": {
            "26": {
              "name": "getCenterPixelPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  50,
                  26
                ],
                [
                  57,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "57": {
            "16": {
              "name": "clearRegions",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  57,
                  16
                ],
                [
                  61,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "61": {
            "18": {
              "name": "getScreenRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  61,
                  18
                ],
                [
                  64,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "64": {
            "18": {
              "name": "getBufferRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  64,
                  18
                ],
                [
                  67,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "67": {
            "19": {
              "name": "needsAutoscroll",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  67,
                  19
                ],
                [
                  70,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "70": {
            "19": {
              "name": "clearAutoscroll",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  70,
                  19
                ],
                [
                  73,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "73": {
            "13": {
              "name": "highlight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  73,
                  13
                ],
                [
                  79,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "79": {
            "15": {
              "name": "unhighlight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  79,
                  15
                ],
                [
                  82,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "82": {
            "10": {
              "name": "remove",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  82,
                  10
                ],
                [
                  84,
                  9
                ]
              ],
              "doc": "~Private~"
            }
          }
        },
        "exports": 4
      },
      "src/selection.coffee": {
        "objects": {
          "0": {
            "1": {
              "type": "import",
              "range": [
                [
                  0,
                  1
                ],
                [
                  0,
                  5
                ]
              ],
              "bindingType": "variable",
              "module": "text-buffer@^3.0.0",
              "name": "Point",
              "exportsProperty": "Point"
            },
            "8": {
              "type": "import",
              "range": [
                [
                  0,
                  8
                ],
                [
                  0,
                  12
                ]
              ],
              "bindingType": "variable",
              "module": "text-buffer@^3.0.0",
              "name": "Range",
              "exportsProperty": "Range"
            }
          },
          "1": {
            "1": {
              "type": "import",
              "range": [
                [
                  1,
                  1
                ],
                [
                  1,
                  5
                ]
              ],
              "bindingType": "variable",
              "module": "theorist@^1",
              "name": "Model",
              "exportsProperty": "Model"
            }
          },
          "2": {
            "1": {
              "type": "import",
              "range": [
                [
                  2,
                  1
                ],
                [
                  2,
                  4
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1",
              "name": "pick",
              "exportsProperty": "pick"
            }
          },
          "6": {
            "0": {
              "type": "class",
              "name": "Selection",
              "superClass": "Model",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  7,
                  10
                ],
                [
                  8,
                  10
                ],
                [
                  9,
                  10
                ],
                [
                  10,
                  22
                ],
                [
                  11,
                  12
                ],
                [
                  12,
                  19
                ],
                [
                  14,
                  15
                ],
                [
                  25,
                  11
                ],
                [
                  28,
                  12
                ],
                [
                  34,
                  19
                ],
                [
                  38,
                  11
                ],
                [
                  45,
                  14
                ],
                [
                  49,
                  22
                ],
                [
                  53,
                  18
                ],
                [
                  60,
                  18
                ],
                [
                  64,
                  18
                ],
                [
                  74,
                  18
                ],
                [
                  91,
                  21
                ],
                [
                  98,
                  25
                ],
                [
                  101,
                  25
                ],
                [
                  104,
                  25
                ],
                [
                  107,
                  25
                ],
                [
                  110,
                  14
                ],
                [
                  114,
                  11
                ],
                [
                  118,
                  9
                ],
                [
                  126,
                  14
                ],
                [
                  138,
                  18
                ],
                [
                  144,
                  14
                ],
                [
                  155,
                  18
                ],
                [
                  163,
                  26
                ],
                [
                  184,
                  26
                ],
                [
                  188,
                  15
                ],
                [
                  192,
                  14
                ],
                [
                  196,
                  12
                ],
                [
                  200,
                  14
                ],
                [
                  205,
                  15
                ],
                [
                  210,
                  18
                ],
                [
                  214,
                  13
                ],
                [
                  219,
                  27
                ],
                [
                  224,
                  32
                ],
                [
                  229,
                  21
                ],
                [
                  234,
                  27
                ],
                [
                  239,
                  21
                ],
                [
                  244,
                  31
                ],
                [
                  248,
                  32
                ],
                [
                  252,
                  28
                ],
                [
                  257,
                  36
                ],
                [
                  262,
                  40
                ],
                [
                  266,
                  21
                ],
                [
                  284,
                  22
                ],
                [
                  289,
                  21
                ],
                [
                  316,
                  14
                ],
                [
                  349,
                  20
                ],
                [
                  383,
                  10
                ],
                [
                  399,
                  22
                ],
                [
                  405,
                  25
                ],
                [
                  412,
                  13
                ],
                [
                  417,
                  30
                ],
                [
                  422,
                  30
                ],
                [
                  428,
                  27
                ],
                [
                  434,
                  27
                ],
                [
                  443,
                  10
                ],
                [
                  455,
                  21
                ],
                [
                  462,
                  21
                ],
                [
                  467,
                  22
                ],
                [
                  477,
                  14
                ],
                [
                  496,
                  13
                ],
                [
                  522,
                  23
                ],
                [
                  532,
                  26
                ],
                [
                  542,
                  22
                ],
                [
                  546,
                  18
                ],
                [
                  551,
                  7
                ],
                [
                  561,
                  8
                ],
                [
                  579,
                  8
                ],
                [
                  584,
                  19
                ],
                [
                  595,
                  13
                ],
                [
                  603,
                  25
                ],
                [
                  606,
                  28
                ],
                [
                  609,
                  23
                ],
                [
                  617,
                  18
                ],
                [
                  625,
                  9
                ],
                [
                  641,
                  11
                ],
                [
                  644,
                  22
                ]
              ],
              "doc": "Public: Represents a selection in the {Editor}. ",
              "range": [
                [
                  6,
                  0
                ],
                [
                  647,
                  45
                ]
              ]
            }
          },
          "7": {
            "10": {
              "name": "cursor",
              "type": "primitive",
              "range": [
                [
                  7,
                  10
                ],
                [
                  7,
                  13
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "8": {
            "10": {
              "name": "marker",
              "type": "primitive",
              "range": [
                [
                  8,
                  10
                ],
                [
                  8,
                  13
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "9": {
            "10": {
              "name": "editor",
              "type": "primitive",
              "range": [
                [
                  9,
                  10
                ],
                [
                  9,
                  13
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "10": {
            "22": {
              "name": "initialScreenRange",
              "type": "primitive",
              "range": [
                [
                  10,
                  22
                ],
                [
                  10,
                  25
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "11": {
            "12": {
              "name": "wordwise",
              "type": "primitive",
              "range": [
                [
                  11,
                  12
                ],
                [
                  11,
                  16
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "12": {
            "19": {
              "name": "needsAutoscroll",
              "type": "primitive",
              "range": [
                [
                  12,
                  19
                ],
                [
                  12,
                  22
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "14": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  14,
                  15
                ],
                [
                  25,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "25": {
            "11": {
              "name": "destroy",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  25,
                  11
                ],
                [
                  28,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "28": {
            "12": {
              "name": "finalize",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  28,
                  12
                ],
                [
                  34,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "34": {
            "19": {
              "name": "clearAutoscroll",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  34,
                  19
                ],
                [
                  38,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "38": {
            "11": {
              "name": "isEmpty",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  38,
                  11
                ],
                [
                  45,
                  1
                ]
              ],
              "doc": "Public: Determines if the selection contains anything. "
            }
          },
          "45": {
            "14": {
              "name": "isReversed",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  45,
                  14
                ],
                [
                  49,
                  1
                ]
              ],
              "doc": " Public: Determines if the ending position of a marker is greater than the\nstarting position.\n\nThis can happen when, for example, you highlight text \"up\" in a {TextBuffer}. "
            }
          },
          "49": {
            "22": {
              "name": "isSingleScreenLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  49,
                  22
                ],
                [
                  53,
                  1
                ]
              ],
              "doc": "Public: Returns whether the selection is a single line or not. "
            }
          },
          "53": {
            "18": {
              "name": "getScreenRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  53,
                  18
                ],
                [
                  60,
                  1
                ]
              ],
              "doc": "Public: Returns the screen {Range} for the selection. "
            }
          },
          "60": {
            "18": {
              "name": "setScreenRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenRange",
                "options"
              ],
              "range": [
                [
                  60,
                  18
                ],
                [
                  64,
                  1
                ]
              ],
              "doc": " Public: Modifies the screen range for the selection.\n\nscreenRange - The new {Range} to use.\noptions - A hash of options matching those found in {::setBufferRange}. "
            }
          },
          "64": {
            "18": {
              "name": "getBufferRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  64,
                  18
                ],
                [
                  74,
                  1
                ]
              ],
              "doc": "Public: Returns the buffer {Range} for the selection. "
            }
          },
          "74": {
            "18": {
              "name": "setBufferRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRange",
                "options"
              ],
              "range": [
                [
                  74,
                  18
                ],
                [
                  91,
                  1
                ]
              ],
              "doc": " Public: Modifies the buffer {Range} for the selection.\n\nscreenRange - The new {Range} to select.\noptions - An {Object} with the keys:\n  :preserveFolds - if `true`, the fold settings are preserved after the\n                   selection moves.\n  :autoscroll - if `true`, the {Editor} scrolls to the new selection. "
            }
          },
          "91": {
            "21": {
              "name": "getBufferRowRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  91,
                  21
                ],
                [
                  98,
                  1
                ]
              ],
              "doc": " Public: Returns the starting and ending buffer rows the selection is\nhighlighting.\n\nReturns an {Array} of two {Number}s: the starting row, and the ending row. "
            }
          },
          "98": {
            "25": {
              "name": "getTailScreenPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  98,
                  25
                ],
                [
                  101,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "101": {
            "25": {
              "name": "getTailBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  101,
                  25
                ],
                [
                  104,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "104": {
            "25": {
              "name": "getHeadScreenPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  104,
                  25
                ],
                [
                  107,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "107": {
            "25": {
              "name": "getHeadBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  107,
                  25
                ],
                [
                  110,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "110": {
            "14": {
              "name": "autoscroll",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  110,
                  14
                ],
                [
                  114,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "114": {
            "11": {
              "name": "getText",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  114,
                  11
                ],
                [
                  118,
                  1
                ]
              ],
              "doc": "Public: Returns the text in the selection. "
            }
          },
          "118": {
            "9": {
              "name": "clear",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  118,
                  9
                ],
                [
                  126,
                  1
                ]
              ],
              "doc": "Public: Clears the selection, moving the marker to the head. "
            }
          },
          "126": {
            "14": {
              "name": "selectWord",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  126,
                  14
                ],
                [
                  138,
                  1
                ]
              ],
              "doc": " Public: Modifies the selection to encompass the current word.\n\nReturns a {Range}. "
            }
          },
          "138": {
            "18": {
              "name": "expandOverWord",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  138,
                  18
                ],
                [
                  144,
                  1
                ]
              ],
              "doc": " Public: Expands the newest selection to include the entire word on which\nthe cursors rests. "
            }
          },
          "144": {
            "14": {
              "name": "selectLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "row"
              ],
              "range": [
                [
                  144,
                  14
                ],
                [
                  155,
                  1
                ]
              ],
              "doc": " Public: Selects an entire line in the buffer.\n\nrow - The line {Number} to select (default: the row of the cursor). "
            }
          },
          "155": {
            "18": {
              "name": "expandOverLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  155,
                  18
                ],
                [
                  163,
                  1
                ]
              ],
              "doc": " Public: Expands the newest selection to include the entire line on which\nthe cursor currently rests.\n\nIt also includes the newline character. "
            }
          },
          "163": {
            "26": {
              "name": "selectToScreenPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "position"
              ],
              "range": [
                [
                  163,
                  26
                ],
                [
                  184,
                  1
                ]
              ],
              "doc": " Public: Selects the text from the current cursor position to a given screen\nposition.\n\nposition - An instance of {Point}, with a given `row` and `column`. "
            }
          },
          "184": {
            "26": {
              "name": "selectToBufferPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "position"
              ],
              "range": [
                [
                  184,
                  26
                ],
                [
                  188,
                  1
                ]
              ],
              "doc": " Public: Selects the text from the current cursor position to a given buffer\nposition.\n\nposition - An instance of {Point}, with a given `row` and `column`. "
            }
          },
          "188": {
            "15": {
              "name": "selectRight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  188,
                  15
                ],
                [
                  192,
                  1
                ]
              ],
              "doc": "Public: Selects the text one position right of the cursor. "
            }
          },
          "192": {
            "14": {
              "name": "selectLeft",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  192,
                  14
                ],
                [
                  196,
                  1
                ]
              ],
              "doc": "Public: Selects the text one position left of the cursor. "
            }
          },
          "196": {
            "12": {
              "name": "selectUp",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "rowCount"
              ],
              "range": [
                [
                  196,
                  12
                ],
                [
                  200,
                  1
                ]
              ],
              "doc": "Public: Selects all the text one position above the cursor. "
            }
          },
          "200": {
            "14": {
              "name": "selectDown",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "rowCount"
              ],
              "range": [
                [
                  200,
                  14
                ],
                [
                  205,
                  1
                ]
              ],
              "doc": "Public: Selects all the text one position below the cursor. "
            }
          },
          "205": {
            "15": {
              "name": "selectToTop",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  205,
                  15
                ],
                [
                  210,
                  1
                ]
              ],
              "doc": " Public: Selects all the text from the current cursor position to the top of\nthe buffer. "
            }
          },
          "210": {
            "18": {
              "name": "selectToBottom",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  210,
                  18
                ],
                [
                  214,
                  1
                ]
              ],
              "doc": " Public: Selects all the text from the current cursor position to the bottom\nof the buffer. "
            }
          },
          "214": {
            "13": {
              "name": "selectAll",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  214,
                  13
                ],
                [
                  219,
                  1
                ]
              ],
              "doc": "Public: Selects all the text in the buffer. "
            }
          },
          "219": {
            "27": {
              "name": "selectToBeginningOfLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  219,
                  27
                ],
                [
                  224,
                  1
                ]
              ],
              "doc": " Public: Selects all the text from the current cursor position to the\nbeginning of the line. "
            }
          },
          "224": {
            "32": {
              "name": "selectToFirstCharacterOfLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  224,
                  32
                ],
                [
                  229,
                  1
                ]
              ],
              "doc": " Public: Selects all the text from the current cursor position to the first\ncharacter of the line. "
            }
          },
          "229": {
            "21": {
              "name": "selectToEndOfLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  229,
                  21
                ],
                [
                  234,
                  1
                ]
              ],
              "doc": " Public: Selects all the text from the current cursor position to the end of\nthe line. "
            }
          },
          "234": {
            "27": {
              "name": "selectToBeginningOfWord",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  234,
                  27
                ],
                [
                  239,
                  1
                ]
              ],
              "doc": " Public: Selects all the text from the current cursor position to the\nbeginning of the word. "
            }
          },
          "239": {
            "21": {
              "name": "selectToEndOfWord",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  239,
                  21
                ],
                [
                  244,
                  1
                ]
              ],
              "doc": " Public: Selects all the text from the current cursor position to the end of\nthe word. "
            }
          },
          "244": {
            "31": {
              "name": "selectToBeginningOfNextWord",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  244,
                  31
                ],
                [
                  248,
                  1
                ]
              ],
              "doc": " Public: Selects all the text from the current cursor position to the\nbeginning of the next word. "
            }
          },
          "248": {
            "32": {
              "name": "selectToPreviousWordBoundary",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  248,
                  32
                ],
                [
                  252,
                  1
                ]
              ],
              "doc": "Public: Selects text to the previous word boundary. "
            }
          },
          "252": {
            "28": {
              "name": "selectToNextWordBoundary",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  252,
                  28
                ],
                [
                  257,
                  1
                ]
              ],
              "doc": "Public: Selects text to the next word boundary. "
            }
          },
          "257": {
            "36": {
              "name": "selectToBeginningOfNextParagraph",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  257,
                  36
                ],
                [
                  262,
                  1
                ]
              ],
              "doc": " Public: Selects all the text from the current cursor position to the\nbeginning of the next paragraph. "
            }
          },
          "262": {
            "40": {
              "name": "selectToBeginningOfPreviousParagraph",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  262,
                  40
                ],
                [
                  266,
                  1
                ]
              ],
              "doc": " Public: Selects all the text from the current cursor position to the\nbeginning of the previous paragraph. "
            }
          },
          "266": {
            "21": {
              "name": "addSelectionBelow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  266,
                  21
                ],
                [
                  284,
                  1
                ]
              ],
              "doc": "Public: Moves the selection down one row. "
            }
          },
          "284": {
            "22": {
              "name": "getGoalBufferRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  284,
                  22
                ],
                [
                  289,
                  1
                ]
              ],
              "doc": "FIXME: I have no idea what this does. "
            }
          },
          "289": {
            "21": {
              "name": "addSelectionAbove",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  289,
                  21
                ],
                [
                  316,
                  1
                ]
              ],
              "doc": "Public: Moves the selection up one row. "
            }
          },
          "316": {
            "14": {
              "name": "insertText",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "text",
                "options"
              ],
              "range": [
                [
                  316,
                  14
                ],
                [
                  349,
                  1
                ]
              ],
              "doc": " Public: Replaces text at the current selection.\n\ntext - A {String} representing the text to add\noptions - An {Object} with keys:\n  :select - if `true`, selects the newly added text.\n  :autoIndent - if `true`, indents all inserted text appropriately.\n  :autoIndentNewline - if `true`, indent newline appropriately.\n  :autoDecreaseIndent - if `true`, decreases indent level appropriately\n                        (for example, when a closing bracket is inserted).\n  :undo - if `skip`, skips the undo stack for this operation. "
            }
          },
          "349": {
            "20": {
              "name": "normalizeIndents",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "text",
                "indentBasis"
              ],
              "range": [
                [
                  349,
                  20
                ],
                [
                  383,
                  1
                ]
              ],
              "doc": " Public: Indents the given text to the suggested level based on the grammar.\n\ntext - The {String} to indent within the selection.\nindentBasis - The beginning indent level. "
            }
          },
          "383": {
            "10": {
              "name": "indent",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  383,
                  10
                ],
                [
                  399,
                  1
                ]
              ],
              "doc": " Private: Indent the current line(s).\n\nIf the selection is empty, indents the current line if the cursor precedes\nnon-whitespace characters, and otherwise inserts a tab. If the selection is\nnon empty, calls {::indentSelectedRows}.\n\noptions - A {Object} with the keys:\n  :autoIndent - If `true`, the line is indented to an automatically-inferred\n                level. Otherwise, {Editor::getTabText} is inserted. "
            }
          },
          "399": {
            "22": {
              "name": "indentSelectedRows",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  399,
                  22
                ],
                [
                  405,
                  1
                ]
              ],
              "doc": "Public: If the selection spans multiple rows, indent all of them. "
            }
          },
          "405": {
            "25": {
              "name": "setIndentationForLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "line",
                "indentLevel"
              ],
              "range": [
                [
                  405,
                  25
                ],
                [
                  412,
                  1
                ]
              ],
              "doc": "Public: ? "
            }
          },
          "412": {
            "13": {
              "name": "backspace",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  412,
                  13
                ],
                [
                  417,
                  1
                ]
              ],
              "doc": " Public: Removes the first character before the selection if the selection\nis empty otherwise it deletes the selection. "
            }
          },
          "417": {
            "30": {
              "name": "backspaceToBeginningOfWord",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  417,
                  30
                ],
                [
                  422,
                  1
                ]
              ],
              "doc": "Deprecated: Use {::deleteToBeginningOfWord} instead. "
            }
          },
          "422": {
            "30": {
              "name": "backspaceToBeginningOfLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  422,
                  30
                ],
                [
                  428,
                  1
                ]
              ],
              "doc": "Deprecated: Use {::deleteToBeginningOfLine} instead. "
            }
          },
          "428": {
            "27": {
              "name": "deleteToBeginningOfWord",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  428,
                  27
                ],
                [
                  434,
                  1
                ]
              ],
              "doc": " Public: Removes from the start of the selection to the beginning of the\ncurrent word if the selection is empty otherwise it deletes the selection. "
            }
          },
          "434": {
            "27": {
              "name": "deleteToBeginningOfLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  434,
                  27
                ],
                [
                  443,
                  1
                ]
              ],
              "doc": " Public: Removes from the beginning of the line which the selection begins on\nall the way through to the end of the selection. "
            }
          },
          "443": {
            "10": {
              "name": "delete",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  443,
                  10
                ],
                [
                  455,
                  1
                ]
              ]
            }
          },
          "455": {
            "21": {
              "name": "deleteToEndOfLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  455,
                  21
                ],
                [
                  462,
                  1
                ]
              ],
              "doc": " Public: If the selection is empty, removes all text from the cursor to the\nend of the line. If the cursor is already at the end of the line, it\nremoves the following newline. If the selection isn't empty, only deletes\nthe contents of the selection. "
            }
          },
          "462": {
            "21": {
              "name": "deleteToEndOfWord",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  462,
                  21
                ],
                [
                  467,
                  1
                ]
              ],
              "doc": " Public: Removes the selection or all characters from the start of the\nselection to the end of the current word if nothing is selected. "
            }
          },
          "467": {
            "22": {
              "name": "deleteSelectedText",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  467,
                  22
                ],
                [
                  477,
                  1
                ]
              ],
              "doc": "Public: Removes only the selected text. "
            }
          },
          "477": {
            "14": {
              "name": "deleteLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  477,
                  14
                ],
                [
                  496,
                  1
                ]
              ],
              "doc": " Public: Removes the line at the beginning of the selection if the selection\nis empty unless the selection spans multiple lines in which case all lines\nare removed. "
            }
          },
          "496": {
            "13": {
              "name": "joinLines",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  496,
                  13
                ],
                [
                  522,
                  1
                ]
              ],
              "doc": " Public: Joins the current line with the one below it.\n\nIf there selection spans more than one line, all the lines are joined together. "
            }
          },
          "522": {
            "23": {
              "name": "outdentSelectedRows",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  522,
                  23
                ],
                [
                  532,
                  1
                ]
              ],
              "doc": "Public: Removes one level of indent from the currently selected rows. "
            }
          },
          "532": {
            "26": {
              "name": "autoIndentSelectedRows",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  532,
                  26
                ],
                [
                  542,
                  1
                ]
              ],
              "doc": " Public: Sets the indentation level of all selected rows to values suggested\nby the relevant grammars. "
            }
          },
          "542": {
            "22": {
              "name": "toggleLineComments",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  542,
                  22
                ],
                [
                  546,
                  1
                ]
              ],
              "doc": " Public: Wraps the selected lines in comments if they aren't currently part\nof a comment.\n\nRemoves the comment if they are currently wrapped in a comment.\n\nReturns an Array of the commented {Range}s. "
            }
          },
          "546": {
            "18": {
              "name": "cutToEndOfLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "maintainClipboard"
              ],
              "range": [
                [
                  546,
                  18
                ],
                [
                  551,
                  1
                ]
              ],
              "doc": "Public: Cuts the selection until the end of the line. "
            }
          },
          "551": {
            "7": {
              "name": "cut",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "maintainClipboard"
              ],
              "range": [
                [
                  551,
                  7
                ],
                [
                  561,
                  1
                ]
              ],
              "doc": "Public: Copies the selection to the clipboard and then deletes it. "
            }
          },
          "561": {
            "8": {
              "name": "copy",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "maintainClipboard"
              ],
              "range": [
                [
                  561,
                  8
                ],
                [
                  579,
                  1
                ]
              ],
              "doc": " Public: Copies the current selection to the clipboard.\n\nIf the `maintainClipboard` is set to `true`, a specific metadata property\nis created to store each content copied to the clipboard. The clipboard\n`text` still contains the concatenation of the clipboard with the\ncurrent selection. "
            }
          },
          "579": {
            "8": {
              "name": "fold",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  579,
                  8
                ],
                [
                  584,
                  1
                ]
              ],
              "doc": "Public: Creates a fold containing the current selection. "
            }
          },
          "584": {
            "19": {
              "name": "modifySelection",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "fn"
              ],
              "range": [
                [
                  584,
                  19
                ],
                [
                  595,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "595": {
            "13": {
              "name": "plantTail",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  595,
                  13
                ],
                [
                  603,
                  1
                ]
              ],
              "doc": " Private: Sets the marker's tail to the same position as the marker's head.\n\nThis only works if there isn't already a tail position.\n\nReturns a {Point} representing the new tail position. "
            }
          },
          "603": {
            "25": {
              "name": "intersectsBufferRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRange"
              ],
              "range": [
                [
                  603,
                  25
                ],
                [
                  606,
                  1
                ]
              ],
              "doc": " Public: Identifies if a selection intersects with a given buffer range.\n\nbufferRange - A {Range} to check against.\n\nReturns a Boolean. "
            }
          },
          "606": {
            "28": {
              "name": "intersectsScreenRowRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "startRow",
                "endRow"
              ],
              "range": [
                [
                  606,
                  28
                ],
                [
                  609,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "609": {
            "23": {
              "name": "intersectsScreenRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenRow"
              ],
              "range": [
                [
                  609,
                  23
                ],
                [
                  617,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "617": {
            "18": {
              "name": "intersectsWith",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "otherSelection"
              ],
              "range": [
                [
                  617,
                  18
                ],
                [
                  625,
                  1
                ]
              ],
              "doc": " Public: Identifies if a selection intersects with another selection.\n\notherSelection - A {Selection} to check against.\n\nReturns a Boolean. "
            }
          },
          "625": {
            "9": {
              "name": "merge",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "otherSelection",
                "options"
              ],
              "range": [
                [
                  625,
                  9
                ],
                [
                  641,
                  1
                ]
              ],
              "doc": " Public: Combines the given selection into this selection and then destroys\nthe given selection.\n\notherSelection - A {Selection} to merge with.\noptions - A hash of options matching those found in {::setBufferRange}. "
            }
          },
          "641": {
            "11": {
              "name": "compare",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "otherSelection"
              ],
              "range": [
                [
                  641,
                  11
                ],
                [
                  644,
                  1
                ]
              ],
              "doc": " Public: Compare this selection's buffer range to another selection's buffer\nrange.\n\nSee {Range::compare} for more details.\n\notherSelection - A {Selection} to compare against. "
            }
          },
          "644": {
            "22": {
              "name": "screenRangeChanged",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  644,
                  22
                ],
                [
                  647,
                  45
                ]
              ],
              "doc": "~Private~"
            }
          }
        },
        "exports": 6
      },
      "src/space-pen-extensions.coffee": {
        "objects": {
          "0": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  0,
                  4
                ],
                [
                  0,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "1": {
            "11": {
              "name": "spacePen",
              "type": "import",
              "range": [
                [
                  1,
                  11
                ],
                [
                  1,
                  29
                ]
              ],
              "bindingType": "variable",
              "module": "space-pen@3.2.0"
            }
          },
          "2": {
            "1": {
              "type": "import",
              "range": [
                [
                  2,
                  1
                ],
                [
                  2,
                  10
                ]
              ],
              "bindingType": "variable",
              "module": "emissary@^1.2.2",
              "name": "Subscriber",
              "exportsProperty": "Subscriber"
            }
          },
          "6": {
            "9": {
              "name": "spacePen",
              "type": "primitive",
              "range": [
                [
                  6,
                  9
                ],
                [
                  6,
                  16
                ]
              ]
            }
          },
          "7": {
            "20": {
              "name": "jQuery",
              "type": "primitive",
              "range": [
                [
                  7,
                  20
                ],
                [
                  7,
                  25
                ]
              ]
            }
          },
          "8": {
            "19": {
              "name": "jQuery.cleanData",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "elements"
              ],
              "range": [
                [
                  8,
                  19
                ],
                [
                  11,
                  0
                ]
              ],
              "doc": null
            }
          },
          "13": {
            "2": {
              "type": "primitive",
              "range": [
                [
                  13,
                  2
                ],
                [
                  19,
                  19
                ]
              ]
            }
          },
          "14": {
            "4": {
              "type": "primitive",
              "range": [
                [
                  14,
                  4
                ],
                [
                  15,
                  12
                ]
              ]
            },
            "10": {
              "name": "1000",
              "type": "primitive",
              "range": [
                [
                  14,
                  10
                ],
                [
                  14,
                  13
                ]
              ]
            }
          },
          "15": {
            "10": {
              "name": "100",
              "type": "primitive",
              "range": [
                [
                  15,
                  10
                ],
                [
                  15,
                  12
                ]
              ]
            }
          },
          "16": {
            "13": {
              "name": "'body'",
              "type": "primitive",
              "range": [
                [
                  16,
                  13
                ],
                [
                  16,
                  18
                ]
              ]
            }
          },
          "17": {
            "8": {
              "type": "primitive",
              "range": [
                [
                  17,
                  8
                ],
                [
                  17,
                  11
                ]
              ]
            }
          },
          "18": {
            "13": {
              "name": "'auto top'",
              "type": "primitive",
              "range": [
                [
                  18,
                  13
                ],
                [
                  18,
                  22
                ]
              ]
            }
          },
          "19": {
            "19": {
              "name": "2",
              "type": "primitive",
              "range": [
                [
                  19,
                  19
                ],
                [
                  19,
                  19
                ]
              ]
            }
          },
          "21": {
            "21": {
              "name": "humanizeKeystrokes",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "keystroke"
              ],
              "range": [
                [
                  21,
                  21
                ],
                [
                  25,
                  0
                ]
              ],
              "doc": "~Private~"
            }
          },
          "26": {
            "15": {
              "name": "getKeystroke",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "bindings"
              ],
              "range": [
                [
                  26,
                  15
                ],
                [
                  31,
                  0
                ]
              ],
              "doc": "~Private~"
            }
          },
          "32": {
            "26": {
              "name": "requireBootstrapTooltip",
              "type": "function",
              "range": [
                [
                  32,
                  26
                ],
                [
                  35,
                  59
                ]
              ]
            }
          },
          "36": {
            "23": {
              "name": "jQuery.fn.setTooltip",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "tooltipOptions",
                null
              ],
              "range": [
                [
                  36,
                  23
                ],
                [
                  49,
                  0
                ]
              ],
              "doc": null
            }
          },
          "50": {
            "24": {
              "name": "jQuery.fn.hideTooltip",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  50,
                  24
                ],
                [
                  55,
                  0
                ]
              ],
              "doc": null
            }
          },
          "56": {
            "27": {
              "name": "jQuery.fn.destroyTooltip",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  56,
                  27
                ],
                [
                  61,
                  38
                ]
              ],
              "doc": null
            }
          },
          "68": {
            "36": {
              "name": "getKeystroke",
              "type": "primitive",
              "range": [
                [
                  68,
                  36
                ],
                [
                  68,
                  47
                ]
              ]
            }
          },
          "69": {
            "42": {
              "name": "humanizeKeystrokes",
              "type": "primitive",
              "range": [
                [
                  69,
                  42
                ],
                [
                  69,
                  59
                ]
              ]
            }
          },
          "71": {
            "49": {
              "name": "get",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  71,
                  49
                ],
                [
                  71,
                  55
                ]
              ],
              "doc": null
            }
          }
        },
        "exports": 73
      },
      "src/subscriber-mixin.coffee": {
        "objects": {
          "0": {
            "1": {
              "type": "import",
              "range": [
                [
                  0,
                  1
                ],
                [
                  0,
                  10
                ]
              ],
              "bindingType": "variable",
              "module": "emissary@^1.2.2",
              "name": "Subscriber",
              "exportsProperty": "Subscriber"
            }
          },
          "1": {
            "18": {
              "type": "primitive",
              "range": [
                [
                  1,
                  18
                ],
                [
                  1,
                  55
                ]
              ]
            },
            "39": {
              "name": "componentDidUnmount",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1,
                  39
                ],
                [
                  1,
                  55
                ]
              ],
              "doc": null
            }
          }
        },
        "exports": 3
      },
      "src/syntax.coffee": {
        "objects": {
          "0": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  0,
                  4
                ],
                [
                  0,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "1": {
            "1": {
              "type": "import",
              "range": [
                [
                  1,
                  1
                ],
                [
                  1,
                  9
                ]
              ],
              "bindingType": "variable",
              "module": "grim@0.11.0",
              "name": "deprecate",
              "exportsProperty": "deprecate"
            }
          },
          "2": {
            "1": {
              "type": "import",
              "range": [
                [
                  2,
                  1
                ],
                [
                  2,
                  11
                ]
              ],
              "bindingType": "variable",
              "module": "clear-cut@0.4.0",
              "name": "specificity",
              "exportsProperty": "specificity"
            }
          },
          "3": {
            "1": {
              "type": "import",
              "range": [
                [
                  3,
                  1
                ],
                [
                  3,
                  10
                ]
              ],
              "bindingType": "variable",
              "module": "emissary@^1.2.2",
              "name": "Subscriber",
              "exportsProperty": "Subscriber"
            }
          },
          "4": {
            "1": {
              "type": "import",
              "range": [
                [
                  4,
                  1
                ],
                [
                  4,
                  15
                ]
              ],
              "bindingType": "variable",
              "module": "first-mate@^2.0.1",
              "name": "GrammarRegistry",
              "exportsProperty": "GrammarRegistry"
            },
            "18": {
              "type": "import",
              "range": [
                [
                  4,
                  18
                ],
                [
                  4,
                  30
                ]
              ],
              "bindingType": "variable",
              "module": "first-mate@^2.0.1",
              "name": "ScopeSelector",
              "exportsProperty": "ScopeSelector"
            }
          },
          "5": {
            "22": {
              "name": "ScopedPropertyStore",
              "type": "import",
              "range": [
                [
                  5,
                  22
                ],
                [
                  5,
                  52
                ]
              ],
              "bindingType": "variable",
              "module": "scoped-property-store@^0.9.0"
            }
          },
          "6": {
            "20": {
              "name": "PropertyAccessors",
              "type": "import",
              "range": [
                [
                  6,
                  20
                ],
                [
                  6,
                  47
                ]
              ],
              "bindingType": "variable",
              "module": "property-accessors@^1"
            }
          },
          "8": {
            "1": {
              "type": "import",
              "range": [
                [
                  8,
                  1
                ],
                [
                  8,
                  1
                ]
              ],
              "bindingType": "variable",
              "path": "./space-pen-extensions",
              "name": "$",
              "exportsProperty": "$"
            },
            "4": {
              "type": "import",
              "range": [
                [
                  8,
                  4
                ],
                [
                  8,
                  5
                ]
              ],
              "bindingType": "variable",
              "path": "./space-pen-extensions",
              "name": "$$",
              "exportsProperty": "$$"
            }
          },
          "9": {
            "8": {
              "name": "Token",
              "type": "import",
              "range": [
                [
                  9,
                  8
                ],
                [
                  9,
                  24
                ]
              ],
              "bindingType": "variable",
              "path": "./token"
            }
          },
          "18": {
            "0": {
              "type": "class",
              "name": "Syntax",
              "superClass": "GrammarRegistry",
              "bindingType": "exports",
              "classProperties": [
                [
                  23,
                  16
                ]
              ],
              "prototypeProperties": [
                [
                  28,
                  15
                ],
                [
                  32,
                  13
                ],
                [
                  35,
                  15
                ],
                [
                  42,
                  17
                ],
                [
                  49,
                  20
                ],
                [
                  52,
                  19
                ],
                [
                  67,
                  15
                ],
                [
                  75,
                  22
                ],
                [
                  84,
                  32
                ]
              ],
              "doc": " Public: Syntax class holding the grammars used for tokenizing.\n\nAn instance of this class is always available as the `atom.syntax` global.\n\nThe Syntax class also contains properties for things such as the\nlanguage-specific comment regexes. ",
              "range": [
                [
                  18,
                  0
                ],
                [
                  85,
                  52
                ]
              ]
            }
          },
          "23": {
            "16": {
              "name": "deserialize",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  23,
                  16
                ],
                [
                  28,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "28": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  28,
                  15
                ],
                [
                  32,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "32": {
            "13": {
              "name": "serialize",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  32,
                  13
                ],
                [
                  35,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "35": {
            "15": {
              "name": "createToken",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "value",
                "scopes"
              ],
              "range": [
                [
                  35,
                  15
                ],
                [
                  35,
                  59
                ]
              ],
              "doc": "~Private~"
            }
          },
          "42": {
            "17": {
              "name": "addProperties",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "args"
              ],
              "range": [
                [
                  42,
                  17
                ],
                [
                  49,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "49": {
            "20": {
              "name": "removeProperties",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "name"
              ],
              "range": [
                [
                  49,
                  20
                ],
                [
                  52,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "52": {
            "19": {
              "name": "clearProperties",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  52,
                  19
                ],
                [
                  67,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "67": {
            "15": {
              "name": "getProperty",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scope",
                "keyPath"
              ],
              "range": [
                [
                  67,
                  15
                ],
                [
                  75,
                  1
                ]
              ],
              "doc": " Public: Get a property for the given scope and key path.\n\n## Example\n```coffee\ncomment = atom.syntax.getProperty(['.source.ruby'], 'editor.commentStart')\nconsole.log(comment) # '# '\n```\n\nscope - An {Array} of {String} scopes.\nkeyPath - A {String} key path.\n\nReturns a {String} property value or undefined. "
            }
          },
          "75": {
            "22": {
              "name": "propertiesForScope",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scope",
                "keyPath"
              ],
              "range": [
                [
                  75,
                  22
                ],
                [
                  84,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "84": {
            "32": {
              "name": "cssSelectorFromScopeSelector",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scopeSelector"
              ],
              "range": [
                [
                  84,
                  32
                ],
                [
                  85,
                  52
                ]
              ],
              "doc": "~Private~"
            }
          }
        },
        "exports": 18
      },
      "src/task-bootstrap.coffee": {
        "objects": {
          "0": {
            "1": {
              "type": "primitive",
              "name": "userAgent",
              "range": [
                [
                  0,
                  1
                ],
                [
                  0,
                  9
                ]
              ],
              "exportsProperty": "userAgent"
            },
            "12": {
              "type": "primitive",
              "name": "taskPath",
              "range": [
                [
                  0,
                  12
                ],
                [
                  0,
                  19
                ]
              ],
              "exportsProperty": "taskPath"
            }
          },
          "3": {
            "15": {
              "name": "setupGlobals",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  3,
                  15
                ],
                [
                  28,
                  0
                ]
              ],
              "doc": "~Private~"
            }
          },
          "29": {
            "15": {
              "name": "handleEvents",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  29,
                  15
                ],
                [
                  42,
                  0
                ]
              ],
              "doc": "~Private~"
            }
          },
          "45": {
            "10": {
              "name": "handler",
              "type": "import",
              "range": [
                [
                  45,
                  10
                ],
                [
                  45,
                  26
                ]
              ],
              "bindingType": "variable",
              "module": "askPat"
            }
          }
        },
        "exports": {}
      },
      "src/task.coffee": {
        "objects": {
          "0": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  0,
                  4
                ],
                [
                  0,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "1": {
            "16": {
              "name": "child_process",
              "type": "import",
              "range": [
                [
                  1,
                  16
                ],
                [
                  1,
                  38
                ]
              ],
              "bindingType": "variable",
              "module": "child_process",
              "builtin": true
            }
          },
          "2": {
            "1": {
              "type": "import",
              "range": [
                [
                  2,
                  1
                ],
                [
                  2,
                  7
                ]
              ],
              "bindingType": "variable",
              "module": "emissary@^1.2.2",
              "name": "Emitter",
              "exportsProperty": "Emitter"
            }
          },
          "21": {
            "0": {
              "type": "class",
              "name": "Task",
              "bindingType": "exports",
              "classProperties": [
                [
                  29,
                  9
                ]
              ],
              "prototypeProperties": [
                [
                  41,
                  12
                ],
                [
                  47,
                  15
                ],
                [
                  73,
                  16
                ],
                [
                  82,
                  9
                ],
                [
                  95,
                  8
                ],
                [
                  102,
                  13
                ]
              ],
              "doc": " Public: Run a node script in a separate process.\n\nUsed by the fuzzy-finder.\n\n## Events\n\n* task:log - Emitted when console.log is called within the task.\n* task:warn - Emitted when console.warn is called within the task.\n* task:error - Emitted when console.error is called within the task.\n* task:completed - Emitted when the task has succeeded or failed.\n\n## Requiring in packages\n\n```coffee\n  {Task} = require 'atom'\n``` ",
              "range": [
                [
                  21,
                  0
                ],
                [
                  109,
                  10
                ]
              ]
            }
          },
          "29": {
            "9": {
              "name": "once",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "taskPath",
                "args"
              ],
              "range": [
                [
                  29,
                  9
                ],
                [
                  41,
                  1
                ]
              ],
              "doc": " Public: A helper method to easily launch and run a task once.\n\ntaskPath - The {String} path to the CoffeeScript/JavaScript file which\n           exports a single {Function} to execute.\nargs     - The arguments to pass to the exported function. "
            }
          },
          "41": {
            "12": {
              "name": "callback",
              "type": "primitive",
              "range": [
                [
                  41,
                  12
                ],
                [
                  41,
                  15
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "47": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "taskPath"
              ],
              "range": [
                [
                  47,
                  15
                ],
                [
                  73,
                  1
                ]
              ],
              "doc": " Public: Creates a task.\n\ntaskPath - The {String} path to the CoffeeScript/JavaScript file that\n           exports a single {Function} to execute. "
            }
          },
          "73": {
            "16": {
              "name": "handleEvents",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  73,
                  16
                ],
                [
                  82,
                  1
                ]
              ],
              "doc": "Private: Routes messages from the child to the appropriate event. "
            }
          },
          "82": {
            "9": {
              "name": "start",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "args",
                "callback"
              ],
              "range": [
                [
                  82,
                  9
                ],
                [
                  95,
                  1
                ]
              ],
              "doc": " Public: Starts the task.\n\nargs - The arguments to pass to the function exported by this task's script.\ncallback - An optional {Function} to call when the task completes. "
            }
          },
          "95": {
            "8": {
              "name": "send",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "message"
              ],
              "range": [
                [
                  95,
                  8
                ],
                [
                  102,
                  1
                ]
              ],
              "doc": " Public: Send message to the task.\n\nmessage - The message to send to the task. "
            }
          },
          "102": {
            "13": {
              "name": "terminate",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  102,
                  13
                ],
                [
                  109,
                  10
                ]
              ],
              "doc": " Public: Forcefully stop the running task.\n\nNo events are emitted. "
            }
          }
        },
        "exports": 21
      },
      "src/text-utils.coffee": {
        "objects": {
          "0": {
            "18": {
              "name": "isHighSurrogate",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "string",
                "index"
              ],
              "range": [
                [
                  0,
                  18
                ],
                [
                  2,
                  0
                ]
              ],
              "doc": "~Private~"
            }
          },
          "3": {
            "17": {
              "name": "isLowSurrogate",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "string",
                "index"
              ],
              "range": [
                [
                  3,
                  17
                ],
                [
                  11,
                  21
                ]
              ],
              "doc": "~Private~"
            }
          },
          "12": {
            "18": {
              "name": "isSurrogatePair",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "string",
                "index"
              ],
              "range": [
                [
                  12,
                  18
                ],
                [
                  22,
                  21
                ]
              ],
              "doc": " Private: Is the character at the given index the start of a high/low surrogate pair?\n\nstring - The {String} to check for a surrogate pair.\nindex - The {Number} index to look for a surrogate pair at.\n\nReturn a {Boolean}. "
            }
          },
          "23": {
            "20": {
              "name": "getCharacterCount",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "string"
              ],
              "range": [
                [
                  23,
                  20
                ],
                [
                  32,
                  22
                ]
              ],
              "doc": " Private: Get the number of characters in the string accounting for surrogate pairs.\n\nThis method counts high/low surrogate pairs as a single character and will\nalways returns a value less than or equal to `string.length`.\n\nstring - The {String} to count the number of full characters in.\n\nReturns a {Number}. "
            }
          },
          "33": {
            "19": {
              "name": "hasSurrogatePair",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "string"
              ],
              "range": [
                [
                  33,
                  19
                ],
                [
                  35,
                  0
                ]
              ],
              "doc": " Private: Does the given string contain at least one surrogate pair?\n\nstring - The {String} to check for the presence of surrogate pairs.\n\nReturns a {Boolean}. "
            }
          }
        },
        "exports": 36
      },
      "src/theme-manager.coffee": {
        "objects": {
          "0": {
            "7": {
              "name": "path",
              "type": "import",
              "range": [
                [
                  0,
                  7
                ],
                [
                  0,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "path",
              "builtin": true
            }
          },
          "2": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  2,
                  4
                ],
                [
                  2,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "3": {
            "1": {
              "type": "import",
              "range": [
                [
                  3,
                  1
                ],
                [
                  3,
                  7
                ]
              ],
              "bindingType": "variable",
              "module": "emissary@^1.2.2",
              "name": "Emitter",
              "exportsProperty": "Emitter"
            }
          },
          "4": {
            "5": {
              "name": "fs",
              "type": "import",
              "range": [
                [
                  4,
                  5
                ],
                [
                  4,
                  21
                ]
              ],
              "bindingType": "variable",
              "module": "fs-plus@^2.2.6"
            }
          },
          "5": {
            "4": {
              "name": "Q",
              "type": "import",
              "range": [
                [
                  5,
                  4
                ],
                [
                  5,
                  14
                ]
              ],
              "bindingType": "variable",
              "module": "q@^1.0.1"
            }
          },
          "7": {
            "1": {
              "type": "import",
              "range": [
                [
                  7,
                  1
                ],
                [
                  7,
                  1
                ]
              ],
              "bindingType": "variable",
              "path": "./space-pen-extensions",
              "name": "$",
              "exportsProperty": "$"
            }
          },
          "8": {
            "10": {
              "name": "Package",
              "type": "import",
              "range": [
                [
                  8,
                  10
                ],
                [
                  8,
                  28
                ]
              ],
              "bindingType": "variable",
              "path": "./package"
            }
          },
          "9": {
            "1": {
              "type": "import",
              "range": [
                [
                  9,
                  1
                ],
                [
                  9,
                  4
                ]
              ],
              "bindingType": "variable",
              "module": "pathwatcher@^2.0.6",
              "name": "File",
              "exportsProperty": "File"
            }
          },
          "15": {
            "0": {
              "type": "class",
              "name": "ThemeManager",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  18,
                  15
                ],
                [
                  22,
                  21
                ],
                [
                  27,
                  18
                ],
                [
                  31,
                  18
                ],
                [
                  35,
                  19
                ],
                [
                  39,
                  19
                ],
                [
                  42,
                  20
                ],
                [
                  47,
                  24
                ],
                [
                  57,
                  18
                ],
                [
                  82,
                  20
                ],
                [
                  87,
                  20
                ],
                [
                  93,
                  20
                ],
                [
                  96,
                  18
                ],
                [
                  109,
                  25
                ],
                [
                  116,
                  25
                ],
                [
                  121,
                  22
                ],
                [
                  133,
                  23
                ],
                [
                  137,
                  25
                ],
                [
                  142,
                  26
                ],
                [
                  145,
                  21
                ],
                [
                  160,
                  21
                ],
                [
                  169,
                  18
                ],
                [
                  175,
                  22
                ],
                [
                  197,
                  14
                ],
                [
                  200,
                  20
                ],
                [
                  209,
                  19
                ]
              ],
              "doc": " Public: Handles loading and activating available themes.\n\nAn instance of this class is always available as the `atom.themes` global. ",
              "range": [
                [
                  15,
                  0
                ],
                [
                  222,
                  31
                ]
              ]
            }
          },
          "18": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  18,
                  15
                ],
                [
                  22,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "22": {
            "21": {
              "name": "getAvailableNames",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  22,
                  21
                ],
                [
                  27,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "27": {
            "18": {
              "name": "getLoadedNames",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  27,
                  18
                ],
                [
                  31,
                  1
                ]
              ],
              "doc": "Public: Get an array of all the loaded theme names. "
            }
          },
          "31": {
            "18": {
              "name": "getActiveNames",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  31,
                  18
                ],
                [
                  35,
                  1
                ]
              ],
              "doc": "Public: Get an array of all the active theme names. "
            }
          },
          "35": {
            "19": {
              "name": "getActiveThemes",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  35,
                  19
                ],
                [
                  39,
                  1
                ]
              ],
              "doc": "Public: Get an array of all the active themes. "
            }
          },
          "39": {
            "19": {
              "name": "getLoadedThemes",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  39,
                  19
                ],
                [
                  42,
                  1
                ]
              ],
              "doc": "Public: Get an array of all the loaded themes. "
            }
          },
          "42": {
            "20": {
              "name": "activatePackages",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "themePackages"
              ],
              "range": [
                [
                  42,
                  20
                ],
                [
                  42,
                  55
                ]
              ],
              "doc": "~Private~"
            }
          },
          "47": {
            "24": {
              "name": "getEnabledThemeNames",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  47,
                  24
                ],
                [
                  57,
                  1
                ]
              ],
              "doc": " Private: Get the enabled theme names from the config.\n\nReturns an array of theme names in the order that they should be activated. "
            }
          },
          "57": {
            "18": {
              "name": "activateThemes",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  57,
                  18
                ],
                [
                  82,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "82": {
            "20": {
              "name": "deactivateThemes",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  82,
                  20
                ],
                [
                  87,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "87": {
            "20": {
              "name": "refreshLessCache",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  87,
                  20
                ],
                [
                  93,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "93": {
            "20": {
              "name": "setEnabledThemes",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "enabledThemeNames"
              ],
              "range": [
                [
                  93,
                  20
                ],
                [
                  96,
                  1
                ]
              ],
              "doc": " Public: Set the list of enabled themes.\n\nenabledThemeNames - An {Array} of {String} theme names. "
            }
          },
          "96": {
            "18": {
              "name": "getImportPaths",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  96,
                  18
                ],
                [
                  109,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "109": {
            "25": {
              "name": "getUserStylesheetPath",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  109,
                  25
                ],
                [
                  116,
                  1
                ]
              ],
              "doc": "Public: Returns the {String} path to the user's stylesheet under ~/.atom "
            }
          },
          "116": {
            "25": {
              "name": "unwatchUserStylesheet",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  116,
                  25
                ],
                [
                  121,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "121": {
            "22": {
              "name": "loadUserStylesheet",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  121,
                  22
                ],
                [
                  133,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "133": {
            "23": {
              "name": "loadBaseStylesheets",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  133,
                  23
                ],
                [
                  137,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "137": {
            "25": {
              "name": "reloadBaseStylesheets",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  137,
                  25
                ],
                [
                  142,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "142": {
            "26": {
              "name": "stylesheetElementForId",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "id",
                "htmlElement"
              ],
              "range": [
                [
                  142,
                  26
                ],
                [
                  145,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "145": {
            "21": {
              "name": "resolveStylesheet",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "stylesheetPath"
              ],
              "range": [
                [
                  145,
                  21
                ],
                [
                  160,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "160": {
            "21": {
              "name": "requireStylesheet",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "stylesheetPath",
                "type",
                "htmlElement"
              ],
              "range": [
                [
                  160,
                  21
                ],
                [
                  169,
                  1
                ]
              ],
              "doc": " Public: Resolve and apply the stylesheet specified by the path.\n\nThis supports both CSS and LESS stylsheets.\n\nstylesheetPath - A {String} path to the stylesheet that can be an absolute\n                 path or a relative path that will be resolved against the\n                 load path.\n\nReturns the absolute path to the required stylesheet. "
            }
          },
          "169": {
            "18": {
              "name": "loadStylesheet",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "stylesheetPath",
                "importFallbackVariables"
              ],
              "range": [
                [
                  169,
                  18
                ],
                [
                  175,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "175": {
            "22": {
              "name": "loadLessStylesheet",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "lessStylesheetPath",
                "importFallbackVariables"
              ],
              "range": [
                [
                  175,
                  22
                ],
                [
                  197,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "197": {
            "14": {
              "name": "stringToId",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "string"
              ],
              "range": [
                [
                  197,
                  14
                ],
                [
                  200,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "200": {
            "20": {
              "name": "removeStylesheet",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "stylesheetPath"
              ],
              "range": [
                [
                  200,
                  20
                ],
                [
                  209,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "209": {
            "19": {
              "name": "applyStylesheet",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "path",
                "text",
                "type",
                "htmlElement"
              ],
              "range": [
                [
                  209,
                  19
                ],
                [
                  222,
                  31
                ]
              ],
              "doc": "~Private~"
            }
          }
        },
        "exports": 15
      },
      "src/theme-package.coffee": {
        "objects": {
          "0": {
            "4": {
              "name": "Q",
              "type": "import",
              "range": [
                [
                  0,
                  4
                ],
                [
                  0,
                  14
                ]
              ],
              "bindingType": "variable",
              "module": "q@^1.0.1"
            }
          },
          "1": {
            "10": {
              "name": "Package",
              "type": "import",
              "range": [
                [
                  1,
                  10
                ],
                [
                  1,
                  28
                ]
              ],
              "bindingType": "variable",
              "path": "./package"
            }
          },
          "4": {
            "0": {
              "type": "class",
              "name": "ThemePackage",
              "superClass": "Package",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  5,
                  11
                ],
                [
                  7,
                  21
                ],
                [
                  9,
                  10
                ],
                [
                  12,
                  11
                ],
                [
                  15,
                  8
                ],
                [
                  23,
                  12
                ]
              ],
              "doc": "~Private~",
              "range": [
                [
                  4,
                  0
                ],
                [
                  31,
                  31
                ]
              ]
            }
          },
          "5": {
            "11": {
              "name": "getType",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  5,
                  11
                ],
                [
                  5,
                  20
                ]
              ]
            }
          },
          "7": {
            "21": {
              "name": "getStylesheetType",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  7,
                  21
                ],
                [
                  7,
                  30
                ]
              ],
              "doc": "~Private~"
            }
          },
          "9": {
            "10": {
              "name": "enable",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  9,
                  10
                ],
                [
                  12,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "12": {
            "11": {
              "name": "disable",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  12,
                  11
                ],
                [
                  15,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "15": {
            "8": {
              "name": "load",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  15,
                  8
                ],
                [
                  23,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "23": {
            "12": {
              "name": "activate",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  23,
                  12
                ],
                [
                  31,
                  31
                ]
              ],
              "doc": "~Private~"
            }
          }
        },
        "exports": 4
      },
      "src/token.coffee": {
        "objects": {
          "0": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  0,
                  4
                ],
                [
                  0,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "1": {
            "12": {
              "name": "textUtils",
              "type": "import",
              "range": [
                [
                  1,
                  12
                ],
                [
                  1,
                  33
                ]
              ],
              "bindingType": "variable",
              "path": "./text-utils"
            }
          },
          "3": {
            "31": {
              "type": "primitive",
              "range": [
                [
                  3,
                  31
                ],
                [
                  3,
                  32
                ]
              ]
            }
          },
          "4": {
            "20": {
              "name": "/^[ ]+/",
              "type": "primitive",
              "range": [
                [
                  4,
                  20
                ],
                [
                  4,
                  26
                ]
              ]
            }
          },
          "5": {
            "21": {
              "name": "/[ ]+$/",
              "type": "primitive",
              "range": [
                [
                  5,
                  21
                ],
                [
                  5,
                  27
                ]
              ]
            }
          },
          "6": {
            "14": {
              "name": "/[&\"'<>]/g",
              "type": "primitive",
              "range": [
                [
                  6,
                  14
                ],
                [
                  6,
                  23
                ]
              ]
            }
          },
          "7": {
            "17": {
              "name": "/./g",
              "type": "primitive",
              "range": [
                [
                  7,
                  17
                ],
                [
                  7,
                  20
                ]
              ]
            }
          },
          "8": {
            "22": {
              "name": "/^./",
              "type": "primitive",
              "range": [
                [
                  8,
                  22
                ],
                [
                  8,
                  25
                ]
              ]
            }
          },
          "9": {
            "16": {
              "name": "/^\\.?/",
              "type": "primitive",
              "range": [
                [
                  9,
                  16
                ],
                [
                  9,
                  21
                ]
              ]
            }
          },
          "10": {
            "18": {
              "name": "/\\S/",
              "type": "primitive",
              "range": [
                [
                  10,
                  18
                ],
                [
                  10,
                  21
                ]
              ]
            }
          },
          "12": {
            "17": {
              "name": "20000",
              "type": "primitive",
              "range": [
                [
                  12,
                  17
                ],
                [
                  12,
                  21
                ]
              ]
            }
          },
          "16": {
            "0": {
              "type": "class",
              "name": "Token",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  17,
                  9
                ],
                [
                  18,
                  20
                ],
                [
                  19,
                  10
                ],
                [
                  20,
                  12
                ],
                [
                  21,
                  13
                ],
                [
                  22,
                  24
                ],
                [
                  23,
                  25
                ],
                [
                  25,
                  15
                ],
                [
                  30,
                  11
                ],
                [
                  33,
                  13
                ],
                [
                  36,
                  11
                ],
                [
                  41,
                  31
                ],
                [
                  44,
                  24
                ],
                [
                  86,
                  26
                ],
                [
                  106,
                  27
                ],
                [
                  113,
                  21
                ],
                [
                  116,
                  21
                ],
                [
                  119,
                  17
                ],
                [
                  129,
                  20
                ],
                [
                  132,
                  24
                ],
                [
                  138,
                  18
                ],
                [
                  185,
                  16
                ],
                [
                  194,
                  23
                ]
              ],
              "doc": "Private: Represents a single unit of text as selected by a grammar. ",
              "range": [
                [
                  16,
                  0
                ],
                [
                  201,
                  16
                ]
              ]
            }
          },
          "17": {
            "9": {
              "name": "value",
              "type": "primitive",
              "range": [
                [
                  17,
                  9
                ],
                [
                  17,
                  12
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "18": {
            "20": {
              "name": "hasSurrogatePair",
              "type": "primitive",
              "range": [
                [
                  18,
                  20
                ],
                [
                  18,
                  24
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "19": {
            "10": {
              "name": "scopes",
              "type": "primitive",
              "range": [
                [
                  19,
                  10
                ],
                [
                  19,
                  13
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "20": {
            "12": {
              "name": "isAtomic",
              "type": "primitive",
              "range": [
                [
                  20,
                  12
                ],
                [
                  20,
                  15
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "21": {
            "13": {
              "name": "isHardTab",
              "type": "primitive",
              "range": [
                [
                  21,
                  13
                ],
                [
                  21,
                  16
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "22": {
            "24": {
              "name": "hasLeadingWhitespace",
              "type": "primitive",
              "range": [
                [
                  22,
                  24
                ],
                [
                  22,
                  28
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "23": {
            "25": {
              "name": "hasTrailingWhitespace",
              "type": "primitive",
              "range": [
                [
                  23,
                  25
                ],
                [
                  23,
                  29
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "25": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  25,
                  15
                ],
                [
                  30,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "30": {
            "11": {
              "name": "isEqual",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "other"
              ],
              "range": [
                [
                  30,
                  11
                ],
                [
                  33,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "33": {
            "13": {
              "name": "isBracket",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  33,
                  13
                ],
                [
                  36,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "36": {
            "11": {
              "name": "splitAt",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "splitIndex"
              ],
              "range": [
                [
                  36,
                  11
                ],
                [
                  41,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "41": {
            "31": {
              "name": "whitespaceRegexForTabLength",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "tabLength"
              ],
              "range": [
                [
                  41,
                  31
                ],
                [
                  44,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "44": {
            "24": {
              "name": "breakOutAtomicTokens",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "tabLength",
                "breakOutLeadingSoftTabs",
                "startColumn"
              ],
              "range": [
                [
                  44,
                  24
                ],
                [
                  86,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "86": {
            "26": {
              "name": "breakOutSurrogatePairs",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  86,
                  26
                ],
                [
                  106,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "106": {
            "27": {
              "name": "buildSurrogatePairToken",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "value",
                "index"
              ],
              "range": [
                [
                  106,
                  27
                ],
                [
                  113,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "113": {
            "21": {
              "name": "buildHardTabToken",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "tabLength",
                "column"
              ],
              "range": [
                [
                  113,
                  21
                ],
                [
                  116,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "116": {
            "21": {
              "name": "buildSoftTabToken",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "tabLength"
              ],
              "range": [
                [
                  116,
                  21
                ],
                [
                  119,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "119": {
            "17": {
              "name": "buildTabToken",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "tabLength",
                "isHardTab",
                "column"
              ],
              "range": [
                [
                  119,
                  17
                ],
                [
                  129,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "129": {
            "20": {
              "name": "isOnlyWhitespace",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  129,
                  20
                ],
                [
                  132,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "132": {
            "24": {
              "name": "matchesScopeSelector",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "selector"
              ],
              "range": [
                [
                  132,
                  24
                ],
                [
                  138,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "138": {
            "18": {
              "name": "getValueAsHtml",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  138,
                  18
                ],
                [
                  185,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "185": {
            "16": {
              "name": "escapeString",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "str",
                "startIndex",
                "endIndex"
              ],
              "range": [
                [
                  185,
                  16
                ],
                [
                  194,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "194": {
            "23": {
              "name": "escapeStringReplace",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "match"
              ],
              "range": [
                [
                  194,
                  23
                ],
                [
                  201,
                  16
                ]
              ],
              "doc": "~Private~"
            }
          }
        },
        "exports": 16
      },
      "src/tokenized-buffer.coffee": {
        "objects": {
          "0": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  0,
                  4
                ],
                [
                  0,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "1": {
            "1": {
              "type": "import",
              "range": [
                [
                  1,
                  1
                ],
                [
                  1,
                  5
                ]
              ],
              "bindingType": "variable",
              "module": "theorist@^1",
              "name": "Model",
              "exportsProperty": "Model"
            }
          },
          "2": {
            "1": {
              "type": "import",
              "range": [
                [
                  2,
                  1
                ],
                [
                  2,
                  5
                ]
              ],
              "bindingType": "variable",
              "module": "text-buffer@^3.0.0",
              "name": "Point",
              "exportsProperty": "Point"
            },
            "8": {
              "type": "import",
              "range": [
                [
                  2,
                  8
                ],
                [
                  2,
                  12
                ]
              ],
              "bindingType": "variable",
              "module": "text-buffer@^3.0.0",
              "name": "Range",
              "exportsProperty": "Range"
            }
          },
          "3": {
            "15": {
              "name": "Serializable",
              "type": "import",
              "range": [
                [
                  3,
                  15
                ],
                [
                  3,
                  36
                ]
              ],
              "bindingType": "variable",
              "module": "serializable@^1"
            }
          },
          "4": {
            "16": {
              "name": "TokenizedLine",
              "type": "import",
              "range": [
                [
                  4,
                  16
                ],
                [
                  4,
                  41
                ]
              ],
              "bindingType": "variable",
              "path": "./tokenized-line"
            }
          },
          "5": {
            "8": {
              "name": "Token",
              "type": "import",
              "range": [
                [
                  5,
                  8
                ],
                [
                  5,
                  24
                ]
              ],
              "bindingType": "variable",
              "path": "./token"
            }
          },
          "8": {
            "0": {
              "type": "class",
              "name": "TokenizedBuffer",
              "superClass": "Model",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  13,
                  11
                ],
                [
                  14,
                  23
                ],
                [
                  15,
                  10
                ],
                [
                  16,
                  18
                ],
                [
                  17,
                  13
                ],
                [
                  18,
                  15
                ],
                [
                  19,
                  11
                ],
                [
                  21,
                  15
                ],
                [
                  48,
                  19
                ],
                [
                  52,
                  21
                ],
                [
                  56,
                  14
                ],
                [
                  64,
                  17
                ],
                [
                  70,
                  23
                ],
                [
                  76,
                  23
                ],
                [
                  82,
                  14
                ],
                [
                  88,
                  16
                ],
                [
                  94,
                  16
                ],
                [
                  96,
                  24
                ],
                [
                  103,
                  21
                ],
                [
                  133,
                  19
                ],
                [
                  136,
                  15
                ],
                [
                  139,
                  17
                ],
                [
                  144,
                  21
                ],
                [
                  153,
                  22
                ],
                [
                  173,
                  48
                ],
                [
                  183,
                  30
                ],
                [
                  200,
                  41
                ],
                [
                  203,
                  39
                ],
                [
                  210,
                  37
                ],
                [
                  220,
                  20
                ],
                [
                  225,
                  22
                ],
                [
                  228,
                  15
                ],
                [
                  231,
                  21
                ],
                [
                  257,
                  22
                ],
                [
                  266,
                  21
                ],
                [
                  269,
                  20
                ],
                [
                  273,
                  33
                ],
                [
                  278,
                  33
                ],
                [
                  299,
                  30
                ],
                [
                  314,
                  39
                ],
                [
                  329,
                  22
                ],
                [
                  344,
                  22
                ],
                [
                  362,
                  14
                ],
                [
                  365,
                  16
                ],
                [
                  368,
                  12
                ]
              ],
              "doc": "~Private~",
              "range": [
                [
                  8,
                  0
                ],
                [
                  371,
                  40
                ]
              ]
            }
          },
          "13": {
            "11": {
              "name": "grammar",
              "type": "primitive",
              "range": [
                [
                  13,
                  11
                ],
                [
                  13,
                  14
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "14": {
            "23": {
              "name": "currentGrammarScore",
              "type": "primitive",
              "range": [
                [
                  14,
                  23
                ],
                [
                  14,
                  26
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "15": {
            "10": {
              "name": "buffer",
              "type": "primitive",
              "range": [
                [
                  15,
                  10
                ],
                [
                  15,
                  13
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "16": {
            "18": {
              "name": "tokenizedLines",
              "type": "primitive",
              "range": [
                [
                  16,
                  18
                ],
                [
                  16,
                  21
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "17": {
            "13": {
              "name": "chunkSize",
              "type": "primitive",
              "range": [
                [
                  17,
                  13
                ],
                [
                  17,
                  14
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "18": {
            "15": {
              "name": "invalidRows",
              "type": "primitive",
              "range": [
                [
                  18,
                  15
                ],
                [
                  18,
                  18
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "19": {
            "11": {
              "name": "visible",
              "type": "primitive",
              "range": [
                [
                  19,
                  11
                ],
                [
                  19,
                  15
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "21": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  21,
                  15
                ],
                [
                  48,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "48": {
            "19": {
              "name": "serializeParams",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  48,
                  19
                ],
                [
                  52,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "52": {
            "21": {
              "name": "deserializeParams",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "params"
              ],
              "range": [
                [
                  52,
                  21
                ],
                [
                  56,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "56": {
            "14": {
              "name": "setGrammar",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "grammar",
                "score"
              ],
              "range": [
                [
                  56,
                  14
                ],
                [
                  64,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "64": {
            "17": {
              "name": "reloadGrammar",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  64,
                  17
                ],
                [
                  70,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "70": {
            "23": {
              "name": "hasTokenForSelector",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "selector"
              ],
              "range": [
                [
                  70,
                  23
                ],
                [
                  76,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "76": {
            "23": {
              "name": "resetTokenizedLines",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  76,
                  23
                ],
                [
                  82,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "82": {
            "14": {
              "name": "setVisible",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  82,
                  14
                ],
                [
                  88,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "88": {
            "16": {
              "name": "getTabLength",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  88,
                  16
                ],
                [
                  94,
                  1
                ]
              ],
              "doc": " Private: Retrieves the current tab length.\n\nReturns a {Number}. "
            }
          },
          "94": {
            "16": {
              "name": "setTabLength",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  94,
                  16
                ],
                [
                  94,
                  30
                ]
              ],
              "doc": " Private: Specifies the tab length.\n\ntabLength - A {Number} that defines the new tab length. "
            }
          },
          "96": {
            "24": {
              "name": "tokenizeInBackground",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  96,
                  24
                ],
                [
                  103,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "103": {
            "21": {
              "name": "tokenizeNextChunk",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  103,
                  21
                ],
                [
                  133,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "133": {
            "19": {
              "name": "firstInvalidRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  133,
                  19
                ],
                [
                  136,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "136": {
            "15": {
              "name": "validateRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "row"
              ],
              "range": [
                [
                  136,
                  15
                ],
                [
                  139,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "139": {
            "17": {
              "name": "invalidateRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "row"
              ],
              "range": [
                [
                  139,
                  17
                ],
                [
                  144,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "144": {
            "21": {
              "name": "updateInvalidRows",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "start",
                "end",
                "delta"
              ],
              "range": [
                [
                  144,
                  21
                ],
                [
                  153,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "153": {
            "22": {
              "name": "handleBufferChange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "e"
              ],
              "range": [
                [
                  153,
                  22
                ],
                [
                  173,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "173": {
            "48": {
              "name": "retokenizeWhitespaceRowsIfIndentLevelChanged",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "row",
                "increment"
              ],
              "range": [
                [
                  173,
                  48
                ],
                [
                  183,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "183": {
            "30": {
              "name": "buildTokenizedLinesForRows",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "startRow",
                "endRow",
                "startingStack"
              ],
              "range": [
                [
                  183,
                  30
                ],
                [
                  200,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "200": {
            "41": {
              "name": "buildPlaceholderTokenizedLinesForRows",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "startRow",
                "endRow"
              ],
              "range": [
                [
                  200,
                  41
                ],
                [
                  203,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "203": {
            "39": {
              "name": "buildPlaceholderTokenizedLineForRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "row"
              ],
              "range": [
                [
                  203,
                  39
                ],
                [
                  210,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "210": {
            "37": {
              "name": "buildTokenizedTokenizedLineForRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "row",
                "ruleStack"
              ],
              "range": [
                [
                  210,
                  37
                ],
                [
                  220,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "220": {
            "20": {
              "name": "lineForScreenRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "row"
              ],
              "range": [
                [
                  220,
                  20
                ],
                [
                  225,
                  1
                ]
              ],
              "doc": " FIXME: benogle says: These are actually buffer rows as all buffer rows are\naccounted for in @tokenizedLines "
            }
          },
          "225": {
            "22": {
              "name": "linesForScreenRows",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "startRow",
                "endRow"
              ],
              "range": [
                [
                  225,
                  22
                ],
                [
                  228,
                  1
                ]
              ],
              "doc": " FIXME: benogle says: These are actually buffer rows as all buffer rows are\naccounted for in @tokenizedLines "
            }
          },
          "228": {
            "15": {
              "name": "stackForRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "row"
              ],
              "range": [
                [
                  228,
                  15
                ],
                [
                  231,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "231": {
            "21": {
              "name": "indentLevelForRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "row"
              ],
              "range": [
                [
                  231,
                  21
                ],
                [
                  257,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "257": {
            "22": {
              "name": "indentLevelForLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "line"
              ],
              "range": [
                [
                  257,
                  22
                ],
                [
                  266,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "266": {
            "21": {
              "name": "scopesForPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "position"
              ],
              "range": [
                [
                  266,
                  21
                ],
                [
                  269,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "269": {
            "20": {
              "name": "tokenForPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "position"
              ],
              "range": [
                [
                  269,
                  20
                ],
                [
                  273,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "273": {
            "33": {
              "name": "tokenStartPositionForPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "position"
              ],
              "range": [
                [
                  273,
                  33
                ],
                [
                  278,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "278": {
            "33": {
              "name": "bufferRangeForScopeAtPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "selector",
                "position"
              ],
              "range": [
                [
                  278,
                  33
                ],
                [
                  299,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "299": {
            "30": {
              "name": "iterateTokensInBufferRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRange",
                "iterator"
              ],
              "range": [
                [
                  299,
                  30
                ],
                [
                  314,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "314": {
            "39": {
              "name": "backwardsIterateTokensInBufferRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferRange",
                "iterator"
              ],
              "range": [
                [
                  314,
                  39
                ],
                [
                  329,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "329": {
            "22": {
              "name": "findOpeningBracket",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "startBufferPosition"
              ],
              "range": [
                [
                  329,
                  22
                ],
                [
                  344,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "344": {
            "22": {
              "name": "findClosingBracket",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "startBufferPosition"
              ],
              "range": [
                [
                  344,
                  22
                ],
                [
                  362,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "362": {
            "14": {
              "name": "getLastRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  362,
                  14
                ],
                [
                  365,
                  1
                ]
              ],
              "doc": " Private: Gets the row number of the last line.\n\nReturns a {Number}. "
            }
          },
          "365": {
            "16": {
              "name": "getLineCount",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  365,
                  16
                ],
                [
                  368,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "368": {
            "12": {
              "name": "logLines",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "start",
                "end"
              ],
              "range": [
                [
                  368,
                  12
                ],
                [
                  371,
                  40
                ]
              ],
              "doc": "~Private~"
            }
          }
        },
        "exports": 8
      },
      "src/tokenized-line.coffee": {
        "objects": {
          "0": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  0,
                  4
                ],
                [
                  0,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "2": {
            "12": {
              "name": "1",
              "type": "primitive",
              "range": [
                [
                  2,
                  12
                ],
                [
                  2,
                  12
                ]
              ]
            }
          },
          "5": {
            "0": {
              "type": "class",
              "name": "TokenizedLine",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  6,
                  15
                ],
                [
                  15,
                  13
                ],
                [
                  20,
                  20
                ],
                [
                  25,
                  8
                ],
                [
                  28,
                  20
                ],
                [
                  47,
                  31
                ],
                [
                  57,
                  31
                ],
                [
                  66,
                  22
                ],
                [
                  72,
                  22
                ],
                [
                  75,
                  14
                ],
                [
                  102,
                  17
                ],
                [
                  105,
                  23
                ],
                [
                  108,
                  28
                ],
                [
                  115,
                  35
                ],
                [
                  123,
                  24
                ],
                [
                  134,
                  42
                ],
                [
                  145,
                  13
                ],
                [
                  154,
                  20
                ],
                [
                  162,
                  16
                ],
                [
                  165,
                  17
                ],
                [
                  168,
                  24
                ],
                [
                  174,
                  16
                ],
                [
                  186,
                  20
                ]
              ],
              "doc": "~Private~",
              "range": [
                [
                  5,
                  0
                ],
                [
                  199,
                  0
                ]
              ]
            }
          },
          "6": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  6,
                  15
                ],
                [
                  15,
                  1
                ]
              ]
            }
          },
          "15": {
            "13": {
              "name": "buildText",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  15,
                  13
                ],
                [
                  20,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "20": {
            "20": {
              "name": "buildBufferDelta",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  20,
                  20
                ],
                [
                  25,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "25": {
            "8": {
              "name": "copy",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  25,
                  8
                ],
                [
                  28,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "28": {
            "20": {
              "name": "clipScreenColumn",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "column",
                "options"
              ],
              "range": [
                [
                  28,
                  20
                ],
                [
                  47,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "47": {
            "31": {
              "name": "screenColumnForBufferColumn",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferColumn",
                "options"
              ],
              "range": [
                [
                  47,
                  31
                ],
                [
                  57,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "57": {
            "31": {
              "name": "bufferColumnForScreenColumn",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "screenColumn",
                "options"
              ],
              "range": [
                [
                  57,
                  31
                ],
                [
                  66,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "66": {
            "22": {
              "name": "getMaxScreenColumn",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  66,
                  22
                ],
                [
                  72,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "72": {
            "22": {
              "name": "getMaxBufferColumn",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  72,
                  22
                ],
                [
                  75,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "75": {
            "14": {
              "name": "softWrapAt",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "column"
              ],
              "range": [
                [
                  75,
                  14
                ],
                [
                  102,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "102": {
            "17": {
              "name": "isSoftWrapped",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  102,
                  17
                ],
                [
                  105,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "105": {
            "23": {
              "name": "tokenAtBufferColumn",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferColumn"
              ],
              "range": [
                [
                  105,
                  23
                ],
                [
                  108,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "108": {
            "28": {
              "name": "tokenIndexAtBufferColumn",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferColumn"
              ],
              "range": [
                [
                  108,
                  28
                ],
                [
                  115,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "115": {
            "35": {
              "name": "tokenStartColumnForBufferColumn",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bufferColumn"
              ],
              "range": [
                [
                  115,
                  35
                ],
                [
                  123,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "123": {
            "24": {
              "name": "breakOutAtomicTokens",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "inputTokens"
              ],
              "range": [
                [
                  123,
                  24
                ],
                [
                  134,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "134": {
            "42": {
              "name": "markLeadingAndTrailingWhitespaceTokens",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  134,
                  42
                ],
                [
                  145,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "145": {
            "13": {
              "name": "isComment",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  145,
                  13
                ],
                [
                  154,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "154": {
            "20": {
              "name": "isOnlyWhitespace",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  154,
                  20
                ],
                [
                  162,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "162": {
            "16": {
              "name": "tokenAtIndex",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "index"
              ],
              "range": [
                [
                  162,
                  16
                ],
                [
                  165,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "165": {
            "17": {
              "name": "getTokenCount",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  165,
                  17
                ],
                [
                  168,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "168": {
            "24": {
              "name": "bufferColumnForToken",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "targetToken"
              ],
              "range": [
                [
                  168,
                  24
                ],
                [
                  174,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "174": {
            "16": {
              "name": "getScopeTree",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  174,
                  16
                ],
                [
                  186,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "186": {
            "20": {
              "name": "updateScopeStack",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scopeStack",
                "desiredScopes"
              ],
              "range": [
                [
                  186,
                  20
                ],
                [
                  199,
                  0
                ]
              ],
              "doc": "~Private~"
            }
          },
          "200": {
            "0": {
              "type": "class",
              "name": "Scope",
              "classProperties": [],
              "prototypeProperties": [
                [
                  201,
                  15
                ]
              ],
              "doc": "~Private~",
              "range": [
                [
                  200,
                  0
                ],
                [
                  202,
                  18
                ]
              ]
            }
          },
          "201": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  201,
                  15
                ],
                [
                  202,
                  18
                ]
              ]
            }
          }
        },
        "exports": 5
      },
      "src/window-bootstrap.coffee": {
        "objects": {
          "1": {
            "12": {
              "name": "startTime",
              "type": "function",
              "range": [
                [
                  1,
                  12
                ],
                [
                  1,
                  21
                ]
              ]
            }
          },
          "5": {
            "7": {
              "name": "Atom",
              "type": "import",
              "range": [
                [
                  5,
                  7
                ],
                [
                  5,
                  22
                ]
              ],
              "bindingType": "variable",
              "path": "./atom"
            }
          },
          "6": {
            "14": {
              "name": "window.atom",
              "type": "function",
              "range": [
                [
                  6,
                  14
                ],
                [
                  6,
                  40
                ]
              ]
            }
          }
        },
        "exports": {}
      },
      "src/window-event-handler.coffee": {
        "objects": {
          "0": {
            "1": {
              "type": "import",
              "range": [
                [
                  0,
                  1
                ],
                [
                  0,
                  1
                ]
              ],
              "bindingType": "variable",
              "path": "./space-pen-extensions",
              "name": "$",
              "exportsProperty": "$"
            }
          },
          "1": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  1,
                  4
                ],
                [
                  1,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "2": {
            "6": {
              "name": "ipc",
              "type": "import",
              "range": [
                [
                  2,
                  6
                ],
                [
                  2,
                  18
                ]
              ],
              "bindingType": "variable",
              "module": "ipc"
            }
          },
          "3": {
            "8": {
              "name": "shell",
              "type": "import",
              "range": [
                [
                  3,
                  8
                ],
                [
                  3,
                  22
                ]
              ],
              "bindingType": "variable",
              "module": "shell"
            }
          },
          "4": {
            "1": {
              "type": "import",
              "range": [
                [
                  4,
                  1
                ],
                [
                  4,
                  10
                ]
              ],
              "bindingType": "variable",
              "module": "emissary@^1.2.2",
              "name": "Subscriber",
              "exportsProperty": "Subscriber"
            }
          },
          "5": {
            "5": {
              "name": "fs",
              "type": "import",
              "range": [
                [
                  5,
                  5
                ],
                [
                  5,
                  21
                ]
              ],
              "bindingType": "variable",
              "module": "fs-plus@^2.2.6"
            }
          },
          "9": {
            "0": {
              "type": "class",
              "name": "WindowEventHandler",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  12,
                  15
                ],
                [
                  81,
                  27
                ],
                [
                  96,
                  13
                ],
                [
                  100,
                  12
                ],
                [
                  106,
                  25
                ],
                [
                  116,
                  13
                ],
                [
                  137,
                  17
                ]
              ],
              "doc": "Private: Handles low-level events related to the window. ",
              "range": [
                [
                  9,
                  0
                ],
                [
                  156,
                  28
                ]
              ]
            }
          },
          "12": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  12,
                  15
                ],
                [
                  81,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "81": {
            "27": {
              "name": "handleNativeKeybindings",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  81,
                  27
                ],
                [
                  96,
                  1
                ]
              ],
              "doc": " Private: Wire commands that should be handled by the native menu\nfor elements with the `.native-key-bindings` class. "
            }
          },
          "96": {
            "13": {
              "name": "onKeydown",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "event"
              ],
              "range": [
                [
                  96,
                  13
                ],
                [
                  100,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "100": {
            "12": {
              "name": "openLink",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  100,
                  12
                ],
                [
                  106,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "106": {
            "25": {
              "name": "eachTabIndexedElement",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "callback"
              ],
              "range": [
                [
                  106,
                  25
                ],
                [
                  116,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "116": {
            "13": {
              "name": "focusNext",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  116,
                  13
                ],
                [
                  137,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "137": {
            "17": {
              "name": "focusPrevious",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  137,
                  17
                ],
                [
                  156,
                  28
                ]
              ],
              "doc": "~Private~"
            }
          }
        },
        "exports": 9
      },
      "src/window.coffee": {
        "objects": {
          "7": {
            "17": {
              "name": "window.measure",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "description",
                "fn"
              ],
              "range": [
                [
                  7,
                  17
                ],
                [
                  20,
                  51
                ]
              ],
              "doc": null
            }
          },
          "21": {
            "17": {
              "name": "window.profile",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "description",
                "fn"
              ],
              "range": [
                [
                  21,
                  17
                ],
                [
                  26,
                  9
                ]
              ],
              "doc": null
            }
          }
        },
        "exports": {}
      },
      "src/workspace-view.coffee": {
        "objects": {
          "0": {
            "6": {
              "name": "ipc",
              "type": "import",
              "range": [
                [
                  0,
                  6
                ],
                [
                  0,
                  18
                ]
              ],
              "bindingType": "variable",
              "module": "ipc"
            }
          },
          "1": {
            "7": {
              "name": "path",
              "type": "import",
              "range": [
                [
                  1,
                  7
                ],
                [
                  1,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "path",
              "builtin": true
            }
          },
          "2": {
            "4": {
              "name": "Q",
              "type": "import",
              "range": [
                [
                  2,
                  4
                ],
                [
                  2,
                  14
                ]
              ],
              "bindingType": "variable",
              "module": "q@^1.0.1"
            }
          },
          "3": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  3,
                  4
                ],
                [
                  3,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "4": {
            "12": {
              "name": "Delegator",
              "type": "import",
              "range": [
                [
                  4,
                  12
                ],
                [
                  4,
                  29
                ]
              ],
              "bindingType": "variable",
              "module": "delegato@^1"
            }
          },
          "5": {
            "1": {
              "type": "import",
              "range": [
                [
                  5,
                  1
                ],
                [
                  5,
                  9
                ]
              ],
              "bindingType": "variable",
              "module": "grim@0.11.0",
              "name": "deprecate",
              "exportsProperty": "deprecate"
            },
            "12": {
              "type": "import",
              "range": [
                [
                  5,
                  12
                ],
                [
                  5,
                  33
                ]
              ],
              "bindingType": "variable",
              "module": "grim@0.11.0",
              "name": "logDeprecationWarnings",
              "exportsProperty": "logDeprecationWarnings"
            }
          },
          "6": {
            "17": {
              "name": "scrollbarStyle",
              "type": "import",
              "range": [
                [
                  6,
                  17
                ],
                [
                  6,
                  41
                ]
              ],
              "bindingType": "variable",
              "module": "scrollbar-style@^1.0.2"
            }
          },
          "7": {
            "1": {
              "type": "import",
              "range": [
                [
                  7,
                  1
                ],
                [
                  7,
                  1
                ]
              ],
              "bindingType": "variable",
              "path": "./space-pen-extensions",
              "name": "$",
              "exportsProperty": "$"
            },
            "4": {
              "type": "import",
              "range": [
                [
                  7,
                  4
                ],
                [
                  7,
                  5
                ]
              ],
              "bindingType": "variable",
              "path": "./space-pen-extensions",
              "name": "$$",
              "exportsProperty": "$$"
            },
            "8": {
              "type": "import",
              "range": [
                [
                  7,
                  8
                ],
                [
                  7,
                  11
                ]
              ],
              "bindingType": "variable",
              "path": "./space-pen-extensions",
              "name": "View",
              "exportsProperty": "View"
            }
          },
          "8": {
            "5": {
              "name": "fs",
              "type": "import",
              "range": [
                [
                  8,
                  5
                ],
                [
                  8,
                  21
                ]
              ],
              "bindingType": "variable",
              "module": "fs-plus@^2.2.6"
            }
          },
          "9": {
            "12": {
              "name": "Workspace",
              "type": "import",
              "range": [
                [
                  9,
                  12
                ],
                [
                  9,
                  32
                ]
              ],
              "bindingType": "variable",
              "path": "./workspace"
            }
          },
          "10": {
            "19": {
              "name": "CommandInstaller",
              "type": "import",
              "range": [
                [
                  10,
                  19
                ],
                [
                  10,
                  47
                ]
              ],
              "bindingType": "variable",
              "path": "./command-installer"
            }
          },
          "11": {
            "13": {
              "name": "EditorView",
              "type": "import",
              "range": [
                [
                  11,
                  13
                ],
                [
                  11,
                  35
                ]
              ],
              "bindingType": "variable",
              "path": "./editor-view"
            }
          },
          "12": {
            "11": {
              "name": "PaneView",
              "type": "import",
              "range": [
                [
                  12,
                  11
                ],
                [
                  12,
                  31
                ]
              ],
              "bindingType": "variable",
              "path": "./pane-view"
            }
          },
          "13": {
            "17": {
              "name": "PaneColumnView",
              "type": "import",
              "range": [
                [
                  13,
                  17
                ],
                [
                  13,
                  44
                ]
              ],
              "bindingType": "variable",
              "path": "./pane-column-view"
            }
          },
          "14": {
            "14": {
              "name": "PaneRowView",
              "type": "import",
              "range": [
                [
                  14,
                  14
                ],
                [
                  14,
                  38
                ]
              ],
              "bindingType": "variable",
              "path": "./pane-row-view"
            }
          },
          "15": {
            "20": {
              "name": "PaneContainerView",
              "type": "import",
              "range": [
                [
                  15,
                  20
                ],
                [
                  15,
                  50
                ]
              ],
              "bindingType": "variable",
              "path": "./pane-container-view"
            }
          },
          "16": {
            "9": {
              "name": "Editor",
              "type": "import",
              "range": [
                [
                  16,
                  9
                ],
                [
                  16,
                  26
                ]
              ],
              "bindingType": "variable",
              "path": "./editor"
            }
          },
          "55": {
            "0": {
              "type": "class",
              "name": "WorkspaceView",
              "superClass": "View",
              "bindingType": "exports",
              "classProperties": [
                [
                  63,
                  12
                ],
                [
                  66,
                  4
                ],
                [
                  75,
                  12
                ]
              ],
              "prototypeProperties": [
                [
                  81,
                  14
                ],
                [
                  168,
                  12
                ],
                [
                  171,
                  24
                ],
                [
                  191,
                  15
                ],
                [
                  205,
                  15
                ],
                [
                  209,
                  16
                ],
                [
                  213,
                  15
                ],
                [
                  223,
                  12
                ],
                [
                  233,
                  18
                ],
                [
                  238,
                  16
                ],
                [
                  242,
                  15
                ],
                [
                  247,
                  19
                ],
                [
                  252,
                  18
                ],
                [
                  257,
                  17
                ],
                [
                  262,
                  16
                ],
                [
                  267,
                  18
                ],
                [
                  272,
                  17
                ],
                [
                  281,
                  21
                ],
                [
                  287,
                  17
                ],
                [
                  291,
                  25
                ],
                [
                  294,
                  21
                ],
                [
                  297,
                  22
                ],
                [
                  300,
                  22
                ],
                [
                  303,
                  23
                ],
                [
                  306,
                  24
                ],
                [
                  315,
                  16
                ],
                [
                  325,
                  16
                ],
                [
                  336,
                  18
                ],
                [
                  344,
                  16
                ],
                [
                  347,
                  21
                ],
                [
                  350,
                  23
                ],
                [
                  353,
                  23
                ],
                [
                  356,
                  18
                ],
                [
                  368,
                  12
                ],
                [
                  373,
                  12
                ],
                [
                  378,
                  17
                ],
                [
                  383,
                  21
                ]
              ],
              "doc": " Public: The top-level view for the entire window. An instance of this class is\navailable via the `atom.workspaceView` global.\n\nIt is backed by a model object, an instance of {Workspace}, which is available\nvia the `atom.workspace` global or {::getModel}. You should prefer to interact\nwith the model object when possible, but it won't always be possible with the\ncurrent API.\n\n## Adding Perimeter Panels\n\nUse the following methods if possible to attach panels to the perimeter of the\nworkspace rather than manipulating the DOM directly to better insulate you to\nchanges in the workspace markup:\n\n* {::prependToTop}\n* {::appendToTop}\n* {::prependToBottom}\n* {::appendToBottom}\n* {::prependToLeft}\n* {::appendToLeft}\n* {::prependToRight}\n* {::appendToRight}\n\n## Requiring in package specs\n\nIf you need a `WorkspaceView` instance to test your package, require it via\nthe built-in `atom` module.\n\n```coffee\n  {WorkspaceView} = require 'atom'\n```\n\nYou can assign it to the `atom.workspaceView` global in the spec or just use\nit as a local, depending on what you're trying to accomplish. Building the\n`WorkspaceView` is currently expensive, so you should try build a {Workspace}\ninstead if possible. ",
              "range": [
                [
                  55,
                  0
                ],
                [
                  385,
                  25
                ]
              ]
            }
          },
          "63": {
            "12": {
              "name": "version",
              "type": "primitive",
              "range": [
                [
                  63,
                  12
                ],
                [
                  63,
                  12
                ]
              ],
              "bindingType": "classProperty"
            }
          },
          "66": {
            "4": {
              "name": "configDefaults",
              "type": "primitive",
              "range": [
                [
                  66,
                  4
                ],
                [
                  73,
                  23
                ]
              ],
              "bindingType": "classProperty"
            }
          },
          "75": {
            "12": {
              "name": "content",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  75,
                  12
                ],
                [
                  81,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "81": {
            "14": {
              "name": "initialize",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  81,
                  14
                ],
                [
                  168,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "168": {
            "12": {
              "name": "getModel",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  168,
                  12
                ],
                [
                  168,
                  20
                ]
              ],
              "doc": " Public: Get the underlying model object.\n\nReturns a {Workspace}. "
            }
          },
          "171": {
            "24": {
              "name": "installShellCommands",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  171,
                  24
                ],
                [
                  191,
                  1
                ]
              ],
              "doc": "Public: Install the Atom shell commands on the user's system. "
            }
          },
          "191": {
            "15": {
              "name": "handleFocus",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  191,
                  15
                ],
                [
                  205,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "205": {
            "15": {
              "name": "afterAttach",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "onDom"
              ],
              "range": [
                [
                  205,
                  15
                ],
                [
                  209,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "209": {
            "16": {
              "name": "confirmClose",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  209,
                  16
                ],
                [
                  213,
                  1
                ]
              ],
              "doc": "Private: Prompts to save all unsaved items "
            }
          },
          "213": {
            "15": {
              "name": "updateTitle",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  213,
                  15
                ],
                [
                  223,
                  1
                ]
              ],
              "doc": "Private: Updates the application's title, based on whichever file is open. "
            }
          },
          "223": {
            "12": {
              "name": "setTitle",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "title"
              ],
              "range": [
                [
                  223,
                  12
                ],
                [
                  233,
                  1
                ]
              ],
              "doc": "Private: Sets the application's title. "
            }
          },
          "233": {
            "18": {
              "name": "getEditorViews",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  233,
                  18
                ],
                [
                  238,
                  1
                ]
              ],
              "doc": " Private: Get all editor views.\n\nYou should prefer {Workspace::getEditors} unless you absolutely need access\nto the view objects. Also consider using {::eachEditorView}, which will call\na callback for all current and *future* editor views.\n\nReturns an {Array} of {EditorView}s. "
            }
          },
          "238": {
            "16": {
              "name": "prependToTop",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "element"
              ],
              "range": [
                [
                  238,
                  16
                ],
                [
                  242,
                  1
                ]
              ],
              "doc": " Public: Prepend an element or view to the panels at the top of the\nworkspace. "
            }
          },
          "242": {
            "15": {
              "name": "appendToTop",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "element"
              ],
              "range": [
                [
                  242,
                  15
                ],
                [
                  247,
                  1
                ]
              ],
              "doc": "Public: Append an element or view to the panels at the top of the workspace. "
            }
          },
          "247": {
            "19": {
              "name": "prependToBottom",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "element"
              ],
              "range": [
                [
                  247,
                  19
                ],
                [
                  252,
                  1
                ]
              ],
              "doc": " Public: Prepend an element or view to the panels at the bottom of the\nworkspace. "
            }
          },
          "252": {
            "18": {
              "name": "appendToBottom",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "element"
              ],
              "range": [
                [
                  252,
                  18
                ],
                [
                  257,
                  1
                ]
              ],
              "doc": " Public: Append an element or view to the panels at the bottom of the\nworkspace. "
            }
          },
          "257": {
            "17": {
              "name": "prependToLeft",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "element"
              ],
              "range": [
                [
                  257,
                  17
                ],
                [
                  262,
                  1
                ]
              ],
              "doc": " Public: Prepend an element or view to the panels at the left of the\nworkspace. "
            }
          },
          "262": {
            "16": {
              "name": "appendToLeft",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "element"
              ],
              "range": [
                [
                  262,
                  16
                ],
                [
                  267,
                  1
                ]
              ],
              "doc": " Public: Append an element or view to the panels at the left of the\nworkspace. "
            }
          },
          "267": {
            "18": {
              "name": "prependToRight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "element"
              ],
              "range": [
                [
                  267,
                  18
                ],
                [
                  272,
                  1
                ]
              ],
              "doc": " Public: Prepend an element or view to the panels at the right of the\nworkspace. "
            }
          },
          "272": {
            "17": {
              "name": "appendToRight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "element"
              ],
              "range": [
                [
                  272,
                  17
                ],
                [
                  281,
                  1
                ]
              ],
              "doc": " Public: Append an element or view to the panels at the right of the\nworkspace. "
            }
          },
          "281": {
            "21": {
              "name": "getActivePaneView",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  281,
                  21
                ],
                [
                  287,
                  1
                ]
              ],
              "doc": " Public: Get the active pane view.\n\nPrefer {Workspace::getActivePane} if you don't actually need access to the\nview.\n\nReturns a {PaneView}. "
            }
          },
          "287": {
            "17": {
              "name": "getActiveView",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  287,
                  17
                ],
                [
                  291,
                  1
                ]
              ],
              "doc": " Public: Get the view associated with the active pane item.\n\nReturns a view. "
            }
          },
          "291": {
            "25": {
              "name": "focusPreviousPaneView",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  291,
                  25
                ],
                [
                  291,
                  56
                ]
              ],
              "doc": "Private: Focus the previous pane by id. "
            }
          },
          "294": {
            "21": {
              "name": "focusNextPaneView",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  294,
                  21
                ],
                [
                  294,
                  48
                ]
              ],
              "doc": "Private: Focus the next pane by id. "
            }
          },
          "297": {
            "22": {
              "name": "focusPaneViewAbove",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  297,
                  22
                ],
                [
                  297,
                  51
                ]
              ],
              "doc": "Public: Focus the pane directly above the active pane. "
            }
          },
          "300": {
            "22": {
              "name": "focusPaneViewBelow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  300,
                  22
                ],
                [
                  300,
                  51
                ]
              ],
              "doc": "Public: Focus the pane directly below the active pane. "
            }
          },
          "303": {
            "23": {
              "name": "focusPaneViewOnLeft",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  303,
                  23
                ],
                [
                  303,
                  53
                ]
              ],
              "doc": "Public: Focus the pane directly to the left of the active pane. "
            }
          },
          "306": {
            "24": {
              "name": "focusPaneViewOnRight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  306,
                  24
                ],
                [
                  306,
                  55
                ]
              ],
              "doc": "Public: Focus the pane directly to the right of the active pane. "
            }
          },
          "315": {
            "16": {
              "name": "eachPaneView",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "callback"
              ],
              "range": [
                [
                  315,
                  16
                ],
                [
                  325,
                  1
                ]
              ],
              "doc": " Public: Register a function to be called for every current and future\npane view in the workspace.\n\ncallback - A {Function} with a {PaneView} as its only argument.\n\nReturns a subscription object with an `.off` method that you can call to\nunregister the callback. "
            }
          },
          "325": {
            "16": {
              "name": "getPaneViews",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  325,
                  16
                ],
                [
                  336,
                  1
                ]
              ],
              "doc": " Public: Get all existing pane views.\n\nPrefer {Workspace::getPanes} if you don't need access to the view objects.\nAlso consider using {::eachPaneView} if you want to register a callback for\nall current and *future* pane views.\n\nReturns an Array of all open {PaneView}s. "
            }
          },
          "336": {
            "18": {
              "name": "eachEditorView",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "callback"
              ],
              "range": [
                [
                  336,
                  18
                ],
                [
                  344,
                  1
                ]
              ],
              "doc": " Public: Register a function to be called for every current and future\neditor view in the workspace (only includes {EditorView}s that are pane\nitems).\n\ncallback - A {Function} with an {EditorView} as its only argument.\n\nReturns a subscription object with an `.off` method that you can call to\nunregister the callback. "
            }
          },
          "344": {
            "16": {
              "name": "beforeRemove",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  344,
                  16
                ],
                [
                  347,
                  1
                ]
              ],
              "doc": "Private: Called by SpacePen "
            }
          },
          "347": {
            "21": {
              "name": "setEditorFontSize",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "fontSize"
              ],
              "range": [
                [
                  347,
                  21
                ],
                [
                  350,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "350": {
            "23": {
              "name": "setEditorFontFamily",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "fontFamily"
              ],
              "range": [
                [
                  350,
                  23
                ],
                [
                  353,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "353": {
            "23": {
              "name": "setEditorLineHeight",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "lineHeight"
              ],
              "range": [
                [
                  353,
                  23
                ],
                [
                  356,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "356": {
            "18": {
              "name": "setEditorStyle",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "property",
                "value"
              ],
              "range": [
                [
                  356,
                  18
                ],
                [
                  368,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "368": {
            "12": {
              "name": "eachPane",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "callback"
              ],
              "range": [
                [
                  368,
                  12
                ],
                [
                  373,
                  1
                ]
              ],
              "doc": "Private: Deprecated "
            }
          },
          "373": {
            "12": {
              "name": "getPanes",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  373,
                  12
                ],
                [
                  378,
                  1
                ]
              ],
              "doc": "Private: Deprecated "
            }
          },
          "378": {
            "17": {
              "name": "getActivePane",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  378,
                  17
                ],
                [
                  383,
                  1
                ]
              ],
              "doc": "Private: Deprecated "
            }
          },
          "383": {
            "21": {
              "name": "getActivePaneItem",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  383,
                  21
                ],
                [
                  385,
                  25
                ]
              ],
              "doc": "Deprecated: Call {Workspace::getActivePaneItem} instead. "
            }
          }
        },
        "exports": 55
      },
      "src/workspace.coffee": {
        "objects": {
          "0": {
            "1": {
              "type": "import",
              "range": [
                [
                  0,
                  1
                ],
                [
                  0,
                  9
                ]
              ],
              "bindingType": "variable",
              "module": "grim@0.11.0",
              "name": "deprecate",
              "exportsProperty": "deprecate"
            }
          },
          "1": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  1,
                  4
                ],
                [
                  1,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.5.1"
            }
          },
          "2": {
            "1": {
              "type": "import",
              "range": [
                [
                  2,
                  1
                ],
                [
                  2,
                  4
                ]
              ],
              "bindingType": "variable",
              "module": "path",
              "builtin": true,
              "name": "join",
              "exportsProperty": "join"
            }
          },
          "3": {
            "1": {
              "type": "import",
              "range": [
                [
                  3,
                  1
                ],
                [
                  3,
                  5
                ]
              ],
              "bindingType": "variable",
              "module": "theorist@^1",
              "name": "Model",
              "exportsProperty": "Model"
            }
          },
          "4": {
            "4": {
              "name": "Q",
              "type": "import",
              "range": [
                [
                  4,
                  4
                ],
                [
                  4,
                  14
                ]
              ],
              "bindingType": "variable",
              "module": "q@^1.0.1"
            }
          },
          "5": {
            "15": {
              "name": "Serializable",
              "type": "import",
              "range": [
                [
                  5,
                  15
                ],
                [
                  5,
                  36
                ]
              ],
              "bindingType": "variable",
              "module": "serializable@^1"
            }
          },
          "6": {
            "12": {
              "name": "Delegator",
              "type": "import",
              "range": [
                [
                  6,
                  12
                ],
                [
                  6,
                  29
                ]
              ],
              "bindingType": "variable",
              "module": "delegato@^1"
            }
          },
          "7": {
            "9": {
              "name": "Editor",
              "type": "import",
              "range": [
                [
                  7,
                  9
                ],
                [
                  7,
                  26
                ]
              ],
              "bindingType": "variable",
              "path": "./editor"
            }
          },
          "8": {
            "16": {
              "name": "PaneContainer",
              "type": "import",
              "range": [
                [
                  8,
                  16
                ],
                [
                  8,
                  41
                ]
              ],
              "bindingType": "variable",
              "path": "./pane-container"
            }
          },
          "9": {
            "7": {
              "name": "Pane",
              "type": "import",
              "range": [
                [
                  9,
                  7
                ],
                [
                  9,
                  22
                ]
              ],
              "bindingType": "variable",
              "path": "./pane"
            }
          },
          "18": {
            "0": {
              "type": "class",
              "name": "Workspace",
              "superClass": "Model",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  29,
                  15
                ],
                [
                  47,
                  21
                ],
                [
                  55,
                  19
                ],
                [
                  60,
                  37
                ],
                [
                  74,
                  15
                ],
                [
                  84,
                  14
                ],
                [
                  91,
                  14
                ],
                [
                  118,
                  8
                ],
                [
                  135,
                  15
                ],
                [
                  150,
                  12
                ],
                [
                  168,
                  17
                ],
                [
                  193,
                  14
                ],
                [
                  200,
                  18
                ],
                [
                  217,
                  18
                ],
                [
                  221,
                  20
                ],
                [
                  224,
                  14
                ],
                [
                  230,
                  17
                ],
                [
                  236,
                  12
                ],
                [
                  240,
                  11
                ],
                [
                  244,
                  20
                ],
                [
                  248,
                  24
                ],
                [
                  254,
                  14
                ],
                [
                  260,
                  21
                ],
                [
                  269,
                  22
                ],
                [
                  277,
                  24
                ],
                [
                  284,
                  25
                ],
                [
                  288,
                  21
                ],
                [
                  295,
                  19
                ],
                [
                  299,
                  20
                ],
                [
                  303,
                  20
                ],
                [
                  308,
                  17
                ],
                [
                  312,
                  14
                ],
                [
                  317,
                  23
                ],
                [
                  322,
                  13
                ]
              ],
              "doc": " Public: Represents the state of the user interface for the entire window.\nAn instance of this class is available via the `atom.workspace` global.\n\nInteract with this object to open files, be notified of current and future\neditors, and manipulate panes. To add panels, you'll need to use the\n{WorkspaceView} class for now until we establish APIs at the model layer. ",
              "range": [
                [
                  18,
                  0
                ],
                [
                  323,
                  28
                ]
              ]
            }
          },
          "29": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  29,
                  15
                ],
                [
                  47,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "47": {
            "21": {
              "name": "deserializeParams",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "params"
              ],
              "range": [
                [
                  47,
                  21
                ],
                [
                  55,
                  1
                ]
              ],
              "doc": "Private: Called by the Serializable mixin during deserialization "
            }
          },
          "55": {
            "19": {
              "name": "serializeParams",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  55,
                  19
                ],
                [
                  60,
                  1
                ]
              ],
              "doc": "Private: Called by the Serializable mixin during serialization. "
            }
          },
          "60": {
            "37": {
              "name": "getPackageNamesWithActiveGrammars",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  60,
                  37
                ],
                [
                  74,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "74": {
            "15": {
              "name": "editorAdded",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "editor"
              ],
              "range": [
                [
                  74,
                  15
                ],
                [
                  84,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "84": {
            "14": {
              "name": "eachEditor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "callback"
              ],
              "range": [
                [
                  84,
                  14
                ],
                [
                  91,
                  1
                ]
              ],
              "doc": " Public: Register a function to be called for every current and future\n{Editor} in the workspace.\n\ncallback - A {Function} with an {Editor} as its only argument.\n\nReturns a subscription object with an `.off` method that you can call to\nunregister the callback. "
            }
          },
          "91": {
            "14": {
              "name": "getEditors",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  91,
                  14
                ],
                [
                  118,
                  1
                ]
              ],
              "doc": " Public: Get all current editors in the workspace.\n\nReturns an {Array} of {Editor}s. "
            }
          },
          "118": {
            "8": {
              "name": "open",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "uri",
                "options"
              ],
              "range": [
                [
                  118,
                  8
                ],
                [
                  135,
                  1
                ]
              ],
              "doc": " Public: Open a given a URI in Atom asynchronously.\n\nuri - A {String} containing a URI.\noptions  - An optional options {Object}\n  :initialLine - A {Number} indicating which row to move the cursor to\n                 initially. Defaults to `0`.\n  :initialColumn - A {Number} indicating which column to move the cursor to\n                   initially. Defaults to `0`.\n  :split - Either 'left' or 'right'. If 'left', the item will be opened in\n           leftmost pane of the current active pane's row. If 'right', the\n           item will be opened in the rightmost pane of the current active\n           pane's row.\n  :activatePane - A {Boolean} indicating whether to call {Pane::activate} on\n                  the containing pane. Defaults to `true`.\n  :searchAllPanes - A {Boolean}. If `true`, the workspace will attempt to\n                    activate an existing item for the given URI on any pane.\n                    If `false`, only the active pane will be searched for\n                    an existing item for the same URI. Defaults to `false`.\n\nReturns a promise that resolves to the {Editor} for the file URI. "
            }
          },
          "135": {
            "15": {
              "name": "openLicense",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  135,
                  15
                ],
                [
                  150,
                  1
                ]
              ],
              "doc": "Public: Open Atom's license in the active pane. "
            }
          },
          "150": {
            "12": {
              "name": "openSync",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "uri",
                "options"
              ],
              "range": [
                [
                  150,
                  12
                ],
                [
                  168,
                  1
                ]
              ],
              "doc": " Private: Synchronously open the given URI in the active pane. **Only use this method\nin specs. Calling this in production code will block the UI thread and\neveryone will be mad at you.**\n\nuri - A {String} containing a URI.\noptions  - An optional options {Object}\n  :initialLine - A {Number} indicating which row to move the cursor to\n                 initially. Defaults to `0`.\n  :initialColumn - A {Number} indicating which column to move the cursor to\n                   initially. Defaults to `0`.\n  :activatePane - A {Boolean} indicating whether to call {Pane::activate} on\n                  the containing pane. Defaults to `true`. "
            }
          },
          "168": {
            "17": {
              "name": "openUriInPane",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "uri",
                "pane",
                "options"
              ],
              "range": [
                [
                  168,
                  17
                ],
                [
                  193,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "193": {
            "14": {
              "name": "reopenItem",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  193,
                  14
                ],
                [
                  200,
                  1
                ]
              ],
              "doc": " Public: Asynchronously reopens the last-closed item's URI if it hasn't already been\nreopened.\n\nReturns a promise that is resolved when the item is opened "
            }
          },
          "200": {
            "18": {
              "name": "reopenItemSync",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  200,
                  18
                ],
                [
                  217,
                  1
                ]
              ],
              "doc": "Private: Deprecated "
            }
          },
          "217": {
            "18": {
              "name": "registerOpener",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "opener"
              ],
              "range": [
                [
                  217,
                  18
                ],
                [
                  221,
                  1
                ]
              ],
              "doc": " Public: Register an opener for a uri.\n\nAn {Editor} will be used if no openers return a value.\n\n## Example\n```coffeescript\n  atom.project.registerOpener (uri) ->\n    if path.extname(uri) is '.toml'\n      return new TomlEditor(uri)\n```\n\nopener - A {Function} to be called when a path is being opened. "
            }
          },
          "221": {
            "20": {
              "name": "unregisterOpener",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "opener"
              ],
              "range": [
                [
                  221,
                  20
                ],
                [
                  224,
                  1
                ]
              ],
              "doc": "Public: Unregister an opener registered with {::registerOpener}. "
            }
          },
          "224": {
            "14": {
              "name": "getOpeners",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  224,
                  14
                ],
                [
                  230,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "230": {
            "17": {
              "name": "getActivePane",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  230,
                  17
                ],
                [
                  236,
                  1
                ]
              ],
              "doc": " Public: Get the active {Pane}.\n\nReturns a {Pane}. "
            }
          },
          "236": {
            "12": {
              "name": "getPanes",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  236,
                  12
                ],
                [
                  240,
                  1
                ]
              ],
              "doc": " Public: Get all {Pane}s.\n\nReturns an {Array} of {Pane}s. "
            }
          },
          "240": {
            "11": {
              "name": "saveAll",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  240,
                  11
                ],
                [
                  244,
                  1
                ]
              ],
              "doc": "Public: Save all pane items. "
            }
          },
          "244": {
            "20": {
              "name": "activateNextPane",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  244,
                  20
                ],
                [
                  248,
                  1
                ]
              ],
              "doc": "Public: Make the next pane active. "
            }
          },
          "248": {
            "24": {
              "name": "activatePreviousPane",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  248,
                  24
                ],
                [
                  254,
                  1
                ]
              ],
              "doc": "Public: Make the previous pane active. "
            }
          },
          "254": {
            "14": {
              "name": "paneForUri",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "uri"
              ],
              "range": [
                [
                  254,
                  14
                ],
                [
                  260,
                  1
                ]
              ],
              "doc": " Public: Get the first pane {Pane} with an item for the given URI.\n\nReturns a {Pane} or `undefined` if no pane exists for the given URI. "
            }
          },
          "260": {
            "21": {
              "name": "getActivePaneItem",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  260,
                  21
                ],
                [
                  269,
                  1
                ]
              ],
              "doc": " Public: Get the active {Pane}'s active item.\n\nReturns an pane item {Object}. "
            }
          },
          "269": {
            "22": {
              "name": "saveActivePaneItem",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  269,
                  22
                ],
                [
                  277,
                  1
                ]
              ],
              "doc": " Public: Save the active pane item.\n\nIf the active pane item currently has a URI according to the item's\n`.getUri` method, calls `.save` on the item. Otherwise\n{::saveActivePaneItemAs} # will be called instead. This method does nothing\nif the active item does not implement a `.save` method. "
            }
          },
          "277": {
            "24": {
              "name": "saveActivePaneItemAs",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  277,
                  24
                ],
                [
                  284,
                  1
                ]
              ],
              "doc": " Public: Prompt the user for a path and save the active pane item to it.\n\nOpens a native dialog where the user selects a path on disk, then calls\n`.saveAs` on the item with the selected path. This method does nothing if\nthe active item does not implement a `.saveAs` method. "
            }
          },
          "284": {
            "25": {
              "name": "destroyActivePaneItem",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  284,
                  25
                ],
                [
                  288,
                  1
                ]
              ],
              "doc": " Public: Destroy (close) the active pane item.\n\nRemoves the active pane item and calls the `.destroy` method on it if one is\ndefined. "
            }
          },
          "288": {
            "21": {
              "name": "destroyActivePane",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  288,
                  21
                ],
                [
                  295,
                  1
                ]
              ],
              "doc": "Public: Destroy (close) the active pane. "
            }
          },
          "295": {
            "19": {
              "name": "getActiveEditor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  295,
                  19
                ],
                [
                  299,
                  1
                ]
              ],
              "doc": " Public: Get the active item if it is an {Editor}.\n\nReturns an {Editor} or `undefined` if the current active item is not an\n{Editor}. "
            }
          },
          "299": {
            "20": {
              "name": "increaseFontSize",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  299,
                  20
                ],
                [
                  303,
                  1
                ]
              ],
              "doc": "Public: Increase the editor font size by 1px. "
            }
          },
          "303": {
            "20": {
              "name": "decreaseFontSize",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  303,
                  20
                ],
                [
                  308,
                  1
                ]
              ],
              "doc": "Public: Decrease the editor font size by 1px. "
            }
          },
          "308": {
            "17": {
              "name": "resetFontSize",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  308,
                  17
                ],
                [
                  312,
                  1
                ]
              ],
              "doc": "Public: Restore to a default editor font size. "
            }
          },
          "312": {
            "14": {
              "name": "itemOpened",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "item"
              ],
              "range": [
                [
                  312,
                  14
                ],
                [
                  317,
                  1
                ]
              ],
              "doc": "Private: Removes the item's uri from the list of potential items to reopen. "
            }
          },
          "317": {
            "23": {
              "name": "onPaneItemDestroyed",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "item"
              ],
              "range": [
                [
                  317,
                  23
                ],
                [
                  322,
                  1
                ]
              ],
              "doc": "Private: Adds the destroyed item's uri to the list of items to reopen. "
            }
          },
          "322": {
            "13": {
              "name": "destroyed",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  322,
                  13
                ],
                [
                  323,
                  28
                ]
              ],
              "doc": "Private: Called by Model superclass when destroyed "
            }
          }
        },
        "exports": 18
      }
    }
  },
  {
    "main": "./src/keymap-manager.coffee",
    "repository": "https://github.com/atom/atom-keymap.git",
    "version": "1.0.2",
    "files": {
      "src/key-binding.coffee": {
        "objects": {
          "0": {
            "7": {
              "name": "Grim",
              "type": "import",
              "range": [
                [
                  0,
                  7
                ],
                [
                  0,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "grim@0.11.0"
            }
          },
          "1": {
            "1": {
              "type": "import",
              "range": [
                [
                  1,
                  1
                ],
                [
                  1,
                  20
                ]
              ],
              "bindingType": "variable",
              "path": "./helpers",
              "name": "calculateSpecificity",
              "exportsProperty": "calculateSpecificity"
            }
          },
          "4": {
            "0": {
              "type": "class",
              "name": "KeyBinding",
              "bindingType": "exports",
              "classProperties": [
                [
                  5,
                  17
                ]
              ],
              "prototypeProperties": [
                [
                  7,
                  11
                ],
                [
                  9,
                  15
                ],
                [
                  23,
                  11
                ],
                [
                  30,
                  11
                ]
              ],
              "doc": "~Private~",
              "range": [
                [
                  4,
                  0
                ],
                [
                  34,
                  43
                ]
              ]
            }
          },
          "5": {
            "17": {
              "name": "currentIndex",
              "type": "primitive",
              "range": [
                [
                  5,
                  17
                ],
                [
                  5,
                  17
                ]
              ],
              "bindingType": "classProperty"
            }
          },
          "7": {
            "11": {
              "name": "enabled",
              "type": "primitive",
              "range": [
                [
                  7,
                  11
                ],
                [
                  7,
                  14
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "9": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null,
                null,
                null,
                "selector"
              ],
              "range": [
                [
                  9,
                  15
                ],
                [
                  23,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "23": {
            "11": {
              "name": "matches",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "keystroke"
              ],
              "range": [
                [
                  23,
                  11
                ],
                [
                  30,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "30": {
            "11": {
              "name": "compare",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "keyBinding"
              ],
              "range": [
                [
                  30,
                  11
                ],
                [
                  34,
                  43
                ]
              ],
              "doc": "~Private~"
            }
          }
        },
        "exports": 4
      },
      "src/keymap-manager.coffee": {
        "objects": {
          "0": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  0,
                  4
                ],
                [
                  0,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1.0.0"
            }
          },
          "1": {
            "7": {
              "name": "CSON",
              "type": "import",
              "range": [
                [
                  1,
                  7
                ],
                [
                  1,
                  22
                ]
              ],
              "bindingType": "variable",
              "module": "season@^1.0.2"
            }
          },
          "2": {
            "7": {
              "name": "Grim",
              "type": "import",
              "range": [
                [
                  2,
                  7
                ],
                [
                  2,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "grim@0.11.0"
            }
          },
          "3": {
            "5": {
              "name": "fs",
              "type": "import",
              "range": [
                [
                  3,
                  5
                ],
                [
                  3,
                  21
                ]
              ],
              "bindingType": "variable",
              "module": "fs-plus@^2.0.4"
            }
          },
          "4": {
            "7": {
              "name": "path",
              "type": "import",
              "range": [
                [
                  4,
                  7
                ],
                [
                  4,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "path",
              "builtin": true
            }
          },
          "5": {
            "1": {
              "type": "import",
              "range": [
                [
                  5,
                  1
                ],
                [
                  5,
                  7
                ]
              ],
              "bindingType": "variable",
              "module": "emissary@^1.1.0",
              "name": "Emitter",
              "exportsProperty": "Emitter"
            }
          },
          "6": {
            "1": {
              "type": "import",
              "range": [
                [
                  6,
                  1
                ],
                [
                  6,
                  4
                ]
              ],
              "bindingType": "variable",
              "module": "pathwatcher@^2.0.4",
              "name": "File",
              "exportsProperty": "File"
            }
          },
          "7": {
            "13": {
              "name": "KeyBinding",
              "type": "import",
              "range": [
                [
                  7,
                  13
                ],
                [
                  7,
                  35
                ]
              ],
              "bindingType": "variable",
              "path": "./key-binding"
            }
          },
          "8": {
            "15": {
              "name": "CommandEvent",
              "type": "import",
              "range": [
                [
                  8,
                  15
                ],
                [
                  8,
                  39
                ]
              ],
              "bindingType": "variable",
              "path": "./command-event"
            }
          },
          "9": {
            "1": {
              "type": "import",
              "range": [
                [
                  9,
                  1
                ],
                [
                  9,
                  19
                ]
              ],
              "bindingType": "variable",
              "path": "./helpers",
              "name": "normalizeKeystrokes",
              "exportsProperty": "normalizeKeystrokes"
            },
            "22": {
              "type": "import",
              "range": [
                [
                  9,
                  22
                ],
                [
                  9,
                  46
                ]
              ],
              "bindingType": "variable",
              "path": "./helpers",
              "name": "keystrokeForKeyboardEvent",
              "exportsProperty": "keystrokeForKeyboardEvent"
            },
            "49": {
              "type": "import",
              "range": [
                [
                  9,
                  49
                ],
                [
                  9,
                  62
                ]
              ],
              "bindingType": "variable",
              "path": "./helpers",
              "name": "isAtomModifier",
              "exportsProperty": "isAtomModifier"
            },
            "65": {
              "type": "import",
              "range": [
                [
                  9,
                  65
                ],
                [
                  9,
                  76
                ]
              ],
              "bindingType": "variable",
              "path": "./helpers",
              "name": "keydownEvent",
              "exportsProperty": "keydownEvent"
            }
          },
          "11": {
            "12": {
              "type": "primitive",
              "range": [
                [
                  11,
                  12
                ],
                [
                  11,
                  59
                ]
              ]
            }
          },
          "12": {
            "17": {
              "name": "OtherPlatforms",
              "type": "function",
              "range": [
                [
                  12,
                  17
                ],
                [
                  12,
                  77
                ]
              ]
            }
          },
          "84": {
            "0": {
              "type": "class",
              "name": "KeymapManager",
              "bindingType": "exports",
              "classProperties": [
                [
                  99,
                  17
                ]
              ],
              "prototypeProperties": [
                [
                  103,
                  23
                ],
                [
                  105,
                  17
                ],
                [
                  106,
                  25
                ],
                [
                  107,
                  29
                ],
                [
                  117,
                  15
                ],
                [
                  125,
                  11
                ],
                [
                  132,
                  18
                ],
                [
                  141,
                  7
                ],
                [
                  164,
                  14
                ],
                [
                  179,
                  15
                ],
                [
                  190,
                  10
                ],
                [
                  212,
                  23
                ],
                [
                  289,
                  19
                ],
                [
                  314,
                  16
                ],
                [
                  324,
                  14
                ],
                [
                  338,
                  27
                ],
                [
                  345,
                  21
                ],
                [
                  349,
                  23
                ],
                [
                  365,
                  22
                ],
                [
                  385,
                  20
                ],
                [
                  390,
                  25
                ],
                [
                  394,
                  21
                ],
                [
                  400,
                  22
                ],
                [
                  410,
                  25
                ],
                [
                  427,
                  24
                ],
                [
                  446,
                  36
                ],
                [
                  460,
                  29
                ],
                [
                  464,
                  13
                ],
                [
                  469,
                  16
                ],
                [
                  475,
                  18
                ],
                [
                  484,
                  27
                ],
                [
                  490,
                  12
                ],
                [
                  497,
                  25
                ],
                [
                  502,
                  27
                ],
                [
                  507,
                  30
                ],
                [
                  513,
                  40
                ],
                [
                  519,
                  42
                ]
              ],
              "doc": " Public: Allows commands to be associated with keystrokes in a\ncontext-sensitive way. In Atom, you can access a global instance of this\nobject via `atom.keymap`.\n\nKey bindings are plain JavaScript objects containing **CSS selectors** as\ntheir top level keys, then **keystroke patterns** mapped to commands.\n\n```cson\n'.workspace':\n  'ctrl-l': 'package:do-something'\n  'ctrl-z': 'package:do-something-else'\n'.mini.editor':\n  'enter': 'core:confirm'\n```\n\nWhen a keystroke sequence matches a binding in a given context, a custom DOM\nevent with a type based on the command is dispatched on the target of the\nkeyboard event.\n\nTo match a keystroke sequence, the keymap starts at the target element for the\nkeyboard event. It looks for key bindings associated with selectors that match\nthe target element. If multiple match, the most specific is selected. If there\nis a tie in specificity, the most recently added binding wins. If no bindings\nare found for the events target, the search is repeated again for the target's\nparent node and so on recursively until a binding is found or we traverse off\nthe top of the document.\n\nWhen a binding is found, its command event is always dispatched on the\noriginal target of the keyboard event, even if the matching element is higher\nup in the DOM. In addition, `.preventDefault()` is called on the keyboard\nevent to prevent the browser from taking action. `.preventDefault` is only\ncalled if a matching binding is found.\n\nCommand event objects have a non-standard method called `.abortKeyBinding()`.\nIf your command handler is invoked but you programmatically determine that no\naction can be taken and you want to allow other bindings to be matched, call\n`.abortKeyBinding()` on the event object. An example of where this is useful\nis binding snippet expansion to `tab`. If `snippets:expand` is invoked when\nthe cursor does not follow a valid snippet prefix, we abort the binding and\nallow `tab` to be handled by the default handler, which inserts whitespace.\n\nMulti-keystroke bindings are possible. If a sequence of one or more keystrokes\n*partially* matches a multi-keystroke binding, the keymap enters a pending\nstate. The pending state is terminated on the next keystroke, or after\n{::partialMatchTimeout} milliseconds has elapsed. When the pending state is\nterminated via a timeout or a keystroke that leads to no matches, the longest\nambiguous bindings that caused the pending state are temporarily disabled and\nthe previous keystrokes are replayed. If there is ambiguity again during the\nreplay, the next longest bindings are disabled and the keystrokes are replayed\nagain.\n\n## Events\n\n* `matched` -\n     Emitted when keystrokes match a binding.\n     * keystrokes - The keystroke {String} that matched the binding\n     * binding - The {KeyBinding} that was used\n     * keyboardEventTarget - The target element of the keyboard event\n\n* `matched-partially` -\n     Emitted when keystrokes partially match one or more bindings.\n     * keystrokes - The keystroke {String} that partially match some bindings\n     * partiallyMatchedBindings - The {KeyBinding}s that partially matched\n     * keyboardEventTarget - The target element of the keyboard event\n\n* `match-failed` -\n     Emitted when keystrokes don't match any bindings.\n     * keystrokes - The keystroke {String} that matched no bindings\n     * keyboardEventTarget - The target element of the keyboard event ",
              "range": [
                [
                  84,
                  0
                ],
                [
                  521,
                  62
                ]
              ]
            }
          },
          "99": {
            "17": {
              "name": "keydownEvent",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "key",
                "options"
              ],
              "range": [
                [
                  99,
                  17
                ],
                [
                  99,
                  60
                ]
              ],
              "doc": " Public: Create a keydown DOM event for testing purposes.\n\nkey - The key or keyIdentifier of the event. For example, 'a', '1',\n  'escape', 'backspace', etc.\noptions - An {Object} containing any of the following:\n  :ctrl - A {Boolean} indicating the ctrl modifier key\n  :alt - A {Boolean} indicating the alt modifier key\n  :shift - A {Boolean} indicating the shift modifier key\n  :cmd - A {Boolean} indicating the cmd modifier key\n  :which - A {Number} indicating `which` value of the event. See\n     the docs for KeyboardEvent for more information.\n  :target - The target element of the event. "
            }
          },
          "103": {
            "23": {
              "name": "partialMatchTimeout",
              "type": "primitive",
              "range": [
                [
                  103,
                  23
                ],
                [
                  103,
                  26
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "105": {
            "17": {
              "name": "defaultTarget",
              "type": "primitive",
              "range": [
                [
                  105,
                  17
                ],
                [
                  105,
                  20
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "106": {
            "25": {
              "name": "pendingPartialMatches",
              "type": "primitive",
              "range": [
                [
                  106,
                  25
                ],
                [
                  106,
                  28
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "107": {
            "29": {
              "name": "pendingStateTimeoutHandle",
              "type": "primitive",
              "range": [
                [
                  107,
                  29
                ],
                [
                  107,
                  32
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "117": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "options"
              ],
              "range": [
                [
                  117,
                  15
                ],
                [
                  125,
                  1
                ]
              ],
              "doc": " Public:\n\noptions - An {Object} containing properties to assign to the keymap: You can\n  pass custom properties to be used by extension methods. The following\n  properties are also supported:\n  :defaultTarget - This will be used as the target of events whose target\n    is `document.body` to allow for a catch-all element when nothing is\n    focused "
            }
          },
          "125": {
            "11": {
              "name": "destroy",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  125,
                  11
                ],
                [
                  132,
                  1
                ]
              ],
              "doc": "Public: Unwatch all watched paths. "
            }
          },
          "132": {
            "18": {
              "name": "getKeyBindings",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  132,
                  18
                ],
                [
                  141,
                  1
                ]
              ],
              "doc": " Public: Get all current key bindings.\n\nReturns an {Array} of {KeyBinding}s. "
            }
          },
          "141": {
            "7": {
              "name": "add",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "source",
                "keyBindingsBySelector"
              ],
              "range": [
                [
                  141,
                  7
                ],
                [
                  164,
                  1
                ]
              ],
              "doc": " Public: Add sets of key bindings grouped by CSS selector.\n\nsource - A {String} (usually a path) uniquely identifying the given bindings\n  so they can be removed later.\nbindings - An {Object} whose top-level keys point at sub-objects mapping\n  keystroke patterns to commands. "
            }
          },
          "164": {
            "14": {
              "name": "loadKeymap",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "bindingsPath",
                "options"
              ],
              "range": [
                [
                  164,
                  14
                ],
                [
                  179,
                  1
                ]
              ],
              "doc": " Public: Load the key bindings from the given path.\n\npath - A {String} containing a path to a file or a directory. If the path is\n  a directory, all files inside it will be loaded.\noptions - An {Object} containing the following optional keys:\n  :watch - If `true`, the keymap will also reload the file at the given path\n    whenever it changes. This option cannot be used with directory paths. "
            }
          },
          "179": {
            "15": {
              "name": "watchKeymap",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "filePath"
              ],
              "range": [
                [
                  179,
                  15
                ],
                [
                  190,
                  1
                ]
              ],
              "doc": " Public: Cause the keymap to reload the key bindings file at the given path\nwhenever it changes.\n\nThis method doesn't perform the initial load of the key bindings file. If\nthat's what you're looking for, call {::loadKeymap} with `watch: true`. "
            }
          },
          "190": {
            "10": {
              "name": "remove",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "source"
              ],
              "range": [
                [
                  190,
                  10
                ],
                [
                  212,
                  1
                ]
              ],
              "doc": " Public: Remove the key bindings added with {::addKeymap} or\n{::loadKeymap}.\n\nsource - A {String} representing the `source` in a previous call to\n  {::addKeymap} or the path in {::loadKeymap}. "
            }
          },
          "212": {
            "23": {
              "name": "handleKeyboardEvent",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "event",
                "replaying"
              ],
              "range": [
                [
                  212,
                  23
                ],
                [
                  289,
                  1
                ]
              ],
              "doc": " Public: Dispatch a custom event associated with the matching key binding for\nthe given `KeyboardEvent` if one can be found.\n\nIf a matching binding is found on the event's target or one of its\nancestors, `.preventDefault()` is called on the keyboard event and the\nbinding's command is emitted as a custom event on the matching element.\n\nIf the matching binding's command is 'native!', the method will terminate\nwithout calling `.preventDefault()` on the keyboard event, allowing the\nbrowser to handle it as normal.\n\nIf the matching binding's command is 'unset!', the search will continue from\nthe current element's parent.\n\nIf the matching binding's command is 'abort!', the search will terminate\nwithout dispatching a command event.\n\nIf the event's target is `document.body`, it will be treated as if its\ntarget is `.defaultTarget` if that property is assigned on the keymap. "
            }
          },
          "289": {
            "19": {
              "name": "findKeyBindings",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "params"
              ],
              "range": [
                [
                  289,
                  19
                ],
                [
                  314,
                  1
                ]
              ],
              "doc": " Public: Get the key bindings for a given command and optional target.\n\nparams - An {Object} whose keys constrain the binding search:\n  :keystrokes - A {String} representing one or more keystrokes, such as\n    'ctrl-x ctrl-s'\n  :command - A {String} representing the name of a command, such as\n    'editor:backspace'\n  :target - An optional DOM element constraining the search. If this\n    parameter is supplied, the call will only return bindings that can be\n    invoked by a KeyboardEvent originating from the target element. "
            }
          },
          "314": {
            "16": {
              "name": "reloadKeymap",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "filePath"
              ],
              "range": [
                [
                  314,
                  16
                ],
                [
                  324,
                  1
                ]
              ],
              "doc": " Private: Called by the path watcher callback to reload a file at the given path. If\nwe can't read the file cleanly, we don't proceed with the reload. "
            }
          },
          "324": {
            "14": {
              "name": "readKeymap",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "filePath",
                "suppressErrors"
              ],
              "range": [
                [
                  324,
                  14
                ],
                [
                  338,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "338": {
            "27": {
              "name": "filePathMatchesPlatform",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "filePath"
              ],
              "range": [
                [
                  338,
                  27
                ],
                [
                  345,
                  1
                ]
              ],
              "doc": " Private: Determine if the given path should be loaded on this platform. If the\nfilename has the pattern '<platform>.cson' or 'foo.<platform>.cson' and\n<platform> does not match the current platform, returns false. Otherwise\nreturns true. "
            }
          },
          "345": {
            "21": {
              "name": "getOtherPlatforms",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  345,
                  21
                ],
                [
                  345,
                  37
                ]
              ],
              "doc": "Private: For testing purposes "
            }
          },
          "349": {
            "23": {
              "name": "findMatchCandidates",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "keystrokes"
              ],
              "range": [
                [
                  349,
                  23
                ],
                [
                  365,
                  1
                ]
              ],
              "doc": " Private: Finds all key bindings whose keystrokes match the given keystrokes. Returns\nboth partial and exact matches. "
            }
          },
          "365": {
            "22": {
              "name": "findPartialMatches",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "partialMatchCandidates",
                "target"
              ],
              "range": [
                [
                  365,
                  22
                ],
                [
                  385,
                  1
                ]
              ],
              "doc": " Private: Determine which of the given bindings have selectors matching the target or\none of its ancestors. This is used by {::handleKeyboardEvent} to determine\nif there are any partial matches for the keyboard event. "
            }
          },
          "385": {
            "20": {
              "name": "findExactMatches",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "exactMatchCandidates",
                "target"
              ],
              "range": [
                [
                  385,
                  20
                ],
                [
                  390,
                  1
                ]
              ],
              "doc": " Private: Find the matching bindings among the given candidates for the given target,\nordered by specificity. Does not traverse up the target's ancestors. This is\nused by {::handleKeyboardEvent} to find a matching binding when there are no\npartially-matching bindings. "
            }
          },
          "390": {
            "25": {
              "name": "clearQueuedKeystrokes",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  390,
                  25
                ],
                [
                  394,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "394": {
            "21": {
              "name": "enterPendingState",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "pendingPartialMatches",
                "enableTimeout"
              ],
              "range": [
                [
                  394,
                  21
                ],
                [
                  400,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "400": {
            "22": {
              "name": "cancelPendingState",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  400,
                  22
                ],
                [
                  410,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "410": {
            "25": {
              "name": "terminatePendingState",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  410,
                  25
                ],
                [
                  427,
                  1
                ]
              ],
              "doc": " Private: This is called by {::handleKeyboardEvent} when no matching bindings are\nfound for the currently queued keystrokes or by the pending state timeout.\nIt disables the longest of the pending partially matching bindings, then\nreplays the queued keyboard events to allow any bindings with shorter\nkeystroke sequences to be matched unambiguously. "
            }
          },
          "427": {
            "24": {
              "name": "dispatchCommandEvent",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "command",
                "target",
                "keyboardEvent"
              ],
              "range": [
                [
                  427,
                  24
                ],
                [
                  446,
                  1
                ]
              ],
              "doc": " Private: After we match a binding, we call this method to dispatch a custom event\nbased on the binding's command. "
            }
          },
          "446": {
            "36": {
              "name": "simulateBubblingOnDetachedTarget",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "target",
                "commandEvent"
              ],
              "range": [
                [
                  446,
                  36
                ],
                [
                  460,
                  1
                ]
              ],
              "doc": " Private: Chromium does not bubble events dispatched on detached targets, which makes\ntesting a pain in the ass. This method simulates bubbling manually. "
            }
          },
          "460": {
            "29": {
              "name": "keystrokeForKeyboardEvent",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "event"
              ],
              "range": [
                [
                  460,
                  29
                ],
                [
                  464,
                  1
                ]
              ],
              "doc": " Public: Translate a keydown event to a keystroke string.\n\nevent - A `KeyboardEvent` of type 'keydown'\n\nReturns a {String} describing the keystroke. "
            }
          },
          "464": {
            "13": {
              "name": "addKeymap",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "source",
                "bindings"
              ],
              "range": [
                [
                  464,
                  13
                ],
                [
                  469,
                  1
                ]
              ],
              "doc": "Deprecated: Use {::addKeymap} instead. "
            }
          },
          "469": {
            "16": {
              "name": "removeKeymap",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "source"
              ],
              "range": [
                [
                  469,
                  16
                ],
                [
                  475,
                  1
                ]
              ],
              "doc": "Deprecated: Use {::removeKeymap} instead. "
            }
          },
          "475": {
            "18": {
              "name": "handleKeyEvent",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "event"
              ],
              "range": [
                [
                  475,
                  18
                ],
                [
                  484,
                  1
                ]
              ],
              "doc": " Deprecated: Handle a jQuery keyboard event. Use {::handleKeyboardEvent} with\na raw keyboard event instead. "
            }
          },
          "484": {
            "27": {
              "name": "keystrokeStringForEvent",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "event"
              ],
              "range": [
                [
                  484,
                  27
                ],
                [
                  490,
                  1
                ]
              ],
              "doc": " Deprecated: Translate a jQuery keyboard event to a keystroke string. Use\n{::keystrokeForKeyboardEvent} with a raw KeyboardEvent instead. "
            }
          },
          "490": {
            "12": {
              "name": "bindKeys",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "source",
                "selector",
                "keyBindings"
              ],
              "range": [
                [
                  490,
                  12
                ],
                [
                  497,
                  1
                ]
              ],
              "doc": " Deprecated: Use {::addKeymap} with a map from selectors to key\nbindings. "
            }
          },
          "497": {
            "25": {
              "name": "keyBindingsForCommand",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "command"
              ],
              "range": [
                [
                  497,
                  25
                ],
                [
                  502,
                  1
                ]
              ],
              "doc": "Deprecated: Use {::findKeyBindings} with the 'command' param. "
            }
          },
          "502": {
            "27": {
              "name": "keyBindingsForKeystroke",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "keystroke"
              ],
              "range": [
                [
                  502,
                  27
                ],
                [
                  507,
                  1
                ]
              ],
              "doc": "Deprecated: Use {::findKeyBindings} with the 'keystrokes' param. "
            }
          },
          "507": {
            "30": {
              "name": "keyBindingsMatchingElement",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "target",
                "keyBindings"
              ],
              "range": [
                [
                  507,
                  30
                ],
                [
                  513,
                  1
                ]
              ],
              "doc": "Deprecated: Use {::findKeyBindings} with the 'target' param. "
            }
          },
          "513": {
            "40": {
              "name": "keyBindingsForCommandMatchingElement",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "command",
                "target"
              ],
              "range": [
                [
                  513,
                  40
                ],
                [
                  519,
                  1
                ]
              ],
              "doc": " Deprecated: Use {::findKeyBindings} with the 'command' and 'target'\nparams "
            }
          },
          "519": {
            "42": {
              "name": "keyBindingsForKeystrokeMatchingElement",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "keystrokes",
                "target"
              ],
              "range": [
                [
                  519,
                  42
                ],
                [
                  521,
                  62
                ]
              ],
              "doc": " Deprecated: Use {::findKeyBindings} with the 'keystrokes' and 'target'\nparams "
            }
          }
        },
        "exports": 84
      }
    }
  },
  {
    "repository": "https://github.com/atom/first-mate",
    "version": "2.0.2",
    "files": {
      "src/grammar-registry.coffee": {
        "objects": {
          "0": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  0,
                  4
                ],
                [
                  0,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1"
            }
          },
          "1": {
            "7": {
              "name": "CSON",
              "type": "import",
              "range": [
                [
                  1,
                  7
                ],
                [
                  1,
                  22
                ]
              ],
              "bindingType": "variable",
              "module": "season@^1"
            }
          },
          "2": {
            "1": {
              "type": "import",
              "range": [
                [
                  2,
                  1
                ],
                [
                  2,
                  7
                ]
              ],
              "bindingType": "variable",
              "module": "emissary@^1",
              "name": "Emitter",
              "exportsProperty": "Emitter"
            }
          },
          "4": {
            "10": {
              "name": "Grammar",
              "type": "import",
              "range": [
                [
                  4,
                  10
                ],
                [
                  4,
                  28
                ]
              ],
              "bindingType": "variable",
              "path": "./grammar"
            }
          },
          "5": {
            "14": {
              "name": "NullGrammar",
              "type": "import",
              "range": [
                [
                  5,
                  14
                ],
                [
                  5,
                  37
                ]
              ],
              "bindingType": "variable",
              "path": "./null-grammar"
            }
          },
          "9": {
            "0": {
              "type": "class",
              "name": "GrammarRegistry",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  12,
                  15
                ],
                [
                  24,
                  15
                ],
                [
                  32,
                  23
                ],
                [
                  38,
                  17
                ],
                [
                  47,
                  29
                ],
                [
                  57,
                  14
                ],
                [
                  69,
                  19
                ],
                [
                  81,
                  15
                ],
                [
                  96,
                  19
                ],
                [
                  106,
                  15
                ],
                [
                  119,
                  26
                ],
                [
                  128,
                  29
                ],
                [
                  135,
                  31
                ],
                [
                  139,
                  25
                ],
                [
                  151,
                  17
                ],
                [
                  154,
                  15
                ],
                [
                  156,
                  18
                ],
                [
                  160,
                  17
                ]
              ],
              "doc": "Public: Registry containing one or more grammars. ",
              "range": [
                [
                  9,
                  0
                ],
                [
                  164,
                  11
                ]
              ]
            }
          },
          "12": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "options"
              ],
              "range": [
                [
                  12,
                  15
                ],
                [
                  24,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "24": {
            "15": {
              "name": "getGrammars",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  24,
                  15
                ],
                [
                  32,
                  1
                ]
              ],
              "doc": " Public: Get all the grammars in this registry.\n\nReturns a non-empty {Array} of {Grammar} instances. "
            }
          },
          "32": {
            "23": {
              "name": "grammarForScopeName",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scopeName"
              ],
              "range": [
                [
                  32,
                  23
                ],
                [
                  38,
                  1
                ]
              ],
              "doc": " Public: Get a grammar with the given scope name.\n\nscopeName - A {String} such as `\"source.js\"`.\n\nReturns a {Grammar} or undefined. "
            }
          },
          "38": {
            "17": {
              "name": "removeGrammar",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "grammar"
              ],
              "range": [
                [
                  38,
                  17
                ],
                [
                  47,
                  1
                ]
              ],
              "doc": " Public: Remove a grammar from this registry.\n\ngrammar - The {Grammar} to remove. "
            }
          },
          "47": {
            "29": {
              "name": "removeGrammarForScopeName",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scopeName"
              ],
              "range": [
                [
                  47,
                  29
                ],
                [
                  57,
                  1
                ]
              ],
              "doc": " Public: Remove the grammar with the given scope name.\n\nscopeName - A {String} such as `\"source.js\"`. "
            }
          },
          "57": {
            "14": {
              "name": "addGrammar",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "grammar"
              ],
              "range": [
                [
                  57,
                  14
                ],
                [
                  69,
                  1
                ]
              ],
              "doc": " Public: Add a grammar to this registry.\n\nA 'grammar-added' event is emitted after the grammar is added.\n\ngrammar - The {Grammar} to add. This should be a value previously returned\n          from {::readGrammar} or {::readGrammarSync}. "
            }
          },
          "69": {
            "19": {
              "name": "readGrammarSync",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "grammarPath"
              ],
              "range": [
                [
                  69,
                  19
                ],
                [
                  81,
                  1
                ]
              ],
              "doc": " Public: Read a grammar synchronously but don't add it to the registry.\n\ngrammarPath - A {String} absolute file path to a grammar file.\n\nReturns a {Grammar}. "
            }
          },
          "81": {
            "15": {
              "name": "readGrammar",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "grammarPath",
                "callback"
              ],
              "range": [
                [
                  81,
                  15
                ],
                [
                  96,
                  1
                ]
              ],
              "doc": " Public: Read a grammar asynchronously but don't add it to the registry.\n\ngrammarPath - A {String} absolute file path to a grammar file.\ncallback    - A {Function} to call when loaded with `(error, grammar)`\n              arguments. "
            }
          },
          "96": {
            "19": {
              "name": "loadGrammarSync",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "grammarPath"
              ],
              "range": [
                [
                  96,
                  19
                ],
                [
                  106,
                  1
                ]
              ],
              "doc": " Public: Read a grammar synchronously and add it to this registry.\n\ngrammarPath - A {String} absolute file path to a grammar file.\n\nReturns a {Grammar}. "
            }
          },
          "106": {
            "15": {
              "name": "loadGrammar",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "grammarPath",
                "callback"
              ],
              "range": [
                [
                  106,
                  15
                ],
                [
                  119,
                  1
                ]
              ],
              "doc": " Public: Read a grammar asynchronously and add it to the registry.\n\ngrammarPath - A {String} absolute file path to a grammar file.\ncallback    - A {Function} to call when loaded with `(error, grammar)`\n              arguments. "
            }
          },
          "119": {
            "26": {
              "name": "grammarOverrideForPath",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "filePath"
              ],
              "range": [
                [
                  119,
                  26
                ],
                [
                  128,
                  1
                ]
              ],
              "doc": " Public: Get the grammar override for the given file path.\n\nfilePath - A {String} file path.\n\nReturns a {Grammar} or undefined. "
            }
          },
          "128": {
            "29": {
              "name": "setGrammarOverrideForPath",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "filePath",
                "scopeName"
              ],
              "range": [
                [
                  128,
                  29
                ],
                [
                  135,
                  1
                ]
              ],
              "doc": " Public: Set the grammar override for the given file path.\n\nfilePath  - A non-empty {String} file path.\nscopeName - A {String} such as `\"source.js\"`.\n\nReturns a {Grammar} or undefined. "
            }
          },
          "135": {
            "31": {
              "name": "clearGrammarOverrideForPath",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "filePath"
              ],
              "range": [
                [
                  135,
                  31
                ],
                [
                  139,
                  1
                ]
              ],
              "doc": " Public: Remove the grammar override for the given file path.\n\nfilePath - A {String} file path. "
            }
          },
          "139": {
            "25": {
              "name": "clearGrammarOverrides",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  139,
                  25
                ],
                [
                  151,
                  1
                ]
              ],
              "doc": "Public: Remove all grammar overrides. "
            }
          },
          "151": {
            "17": {
              "name": "selectGrammar",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "filePath",
                "fileContents"
              ],
              "range": [
                [
                  151,
                  17
                ],
                [
                  154,
                  1
                ]
              ],
              "doc": " Public: Select a grammar for the given file path and file contents.\n\nThis picks the best match by checking the file path and contents against\neach grammar.\n\nfilePath     - A {String} file path.\nfileContents - A {String} of text for the file path.\n\nReturns a {Grammar}, never null. "
            }
          },
          "154": {
            "15": {
              "name": "createToken",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "value",
                "scopes"
              ],
              "range": [
                [
                  154,
                  15
                ],
                [
                  154,
                  48
                ]
              ],
              "doc": "~Private~"
            }
          },
          "156": {
            "18": {
              "name": "grammarUpdated",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scopeName"
              ],
              "range": [
                [
                  156,
                  18
                ],
                [
                  160,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "160": {
            "17": {
              "name": "createGrammar",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "grammarPath",
                "object"
              ],
              "range": [
                [
                  160,
                  17
                ],
                [
                  164,
                  11
                ]
              ],
              "doc": "~Private~"
            }
          }
        },
        "exports": 9
      },
      "src/grammar.coffee": {
        "objects": {
          "0": {
            "7": {
              "name": "path",
              "type": "import",
              "range": [
                [
                  0,
                  7
                ],
                [
                  0,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "path",
              "builtin": true
            }
          },
          "2": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  2,
                  4
                ],
                [
                  2,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@^1"
            }
          },
          "3": {
            "5": {
              "name": "fs",
              "type": "import",
              "range": [
                [
                  3,
                  5
                ],
                [
                  3,
                  21
                ]
              ],
              "bindingType": "variable",
              "module": "fs-plus@^2"
            }
          },
          "4": {
            "1": {
              "type": "import",
              "range": [
                [
                  4,
                  1
                ],
                [
                  4,
                  10
                ]
              ],
              "bindingType": "variable",
              "module": "oniguruma@^3",
              "name": "OnigRegExp",
              "exportsProperty": "OnigRegExp"
            }
          },
          "5": {
            "1": {
              "type": "import",
              "range": [
                [
                  5,
                  1
                ],
                [
                  5,
                  7
                ]
              ],
              "bindingType": "variable",
              "module": "emissary@^1",
              "name": "Emitter",
              "exportsProperty": "Emitter"
            }
          },
          "7": {
            "13": {
              "name": "Injections",
              "type": "import",
              "range": [
                [
                  7,
                  13
                ],
                [
                  7,
                  34
                ]
              ],
              "bindingType": "variable",
              "path": "./injections"
            }
          },
          "8": {
            "10": {
              "name": "Pattern",
              "type": "import",
              "range": [
                [
                  8,
                  10
                ],
                [
                  8,
                  28
                ]
              ],
              "bindingType": "variable",
              "path": "./pattern"
            }
          },
          "9": {
            "7": {
              "name": "Rule",
              "type": "import",
              "range": [
                [
                  9,
                  7
                ],
                [
                  9,
                  22
                ]
              ],
              "bindingType": "variable",
              "path": "./rule"
            }
          },
          "10": {
            "16": {
              "name": "ScopeSelector",
              "type": "import",
              "range": [
                [
                  10,
                  16
                ],
                [
                  10,
                  41
                ]
              ],
              "bindingType": "variable",
              "path": "./scope-selector"
            }
          },
          "12": {
            "21": {
              "name": "pathSplitRegex",
              "type": "function",
              "range": [
                [
                  12,
                  21
                ],
                [
                  12,
                  34
                ]
              ]
            }
          },
          "19": {
            "0": {
              "type": "class",
              "name": "Grammar",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  22,
                  15
                ],
                [
                  51,
                  17
                ],
                [
                  73,
                  16
                ],
                [
                  141,
                  12
                ],
                [
                  144,
                  14
                ],
                [
                  147,
                  14
                ],
                [
                  151,
                  18
                ],
                [
                  154,
                  17
                ],
                [
                  162,
                  27
                ],
                [
                  165,
                  18
                ],
                [
                  172,
                  12
                ],
                [
                  182,
                  19
                ],
                [
                  199,
                  16
                ],
                [
                  214,
                  15
                ],
                [
                  216,
                  14
                ],
                [
                  218,
                  17
                ],
                [
                  220,
                  23
                ],
                [
                  223,
                  19
                ]
              ],
              "doc": " Public: Grammar that tokenizes lines of text.\n\nThis class should not be instantiated directly but instead obtained from\na {GrammarRegistry} by calling {GrammarRegistry::loadGrammar}. ",
              "range": [
                [
                  19,
                  0
                ],
                [
                  235,
                  10
                ]
              ]
            }
          },
          "22": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null,
                "options"
              ],
              "range": [
                [
                  22,
                  15
                ],
                [
                  51,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "51": {
            "17": {
              "name": "tokenizeLines",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "text"
              ],
              "range": [
                [
                  51,
                  17
                ],
                [
                  73,
                  1
                ]
              ],
              "doc": " Public: Tokenize all lines in the given text.\n\ntext - A {String} containing one or more lines.\n\nReturns an {Array} of token arrays for each line tokenized. "
            }
          },
          "73": {
            "16": {
              "name": "tokenizeLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "line",
                "ruleStack",
                "firstLine"
              ],
              "range": [
                [
                  73,
                  16
                ],
                [
                  141,
                  1
                ]
              ],
              "doc": " Public: Tokenize the line of text.\n\nline      - A {String} of text to tokenize.\nruleStack - An optional {Array} of rules previously returned from this\n            method. This should be null when tokenizing the first line in\n            the file.\nfirstLine - A {Boolean} denoting whether this is the first line in the file\n            which defaults to `false`. This should be `true` when\n            tokenizing the first line in the file.\n\nReturns an {Object} containing `tokens` and `ruleStack` properties:\n  :token     - An {Array} of tokens covering the entire line of text.\n  :ruleStack - An {Array} of rules representing the tokenized state at the\n               end of the line. These should be passed back into this method\n               when tokenizing the next line in the file. "
            }
          },
          "141": {
            "12": {
              "name": "activate",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  141,
                  12
                ],
                [
                  144,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "144": {
            "14": {
              "name": "deactivate",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  144,
                  14
                ],
                [
                  147,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "147": {
            "14": {
              "name": "clearRules",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  147,
                  14
                ],
                [
                  151,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "151": {
            "18": {
              "name": "getInitialRule",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  151,
                  18
                ],
                [
                  154,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "154": {
            "17": {
              "name": "getRepository",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  154,
                  17
                ],
                [
                  162,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "162": {
            "27": {
              "name": "addIncludedGrammarScope",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scope"
              ],
              "range": [
                [
                  162,
                  27
                ],
                [
                  165,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "165": {
            "18": {
              "name": "grammarUpdated",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "scopeName"
              ],
              "range": [
                [
                  165,
                  18
                ],
                [
                  172,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "172": {
            "12": {
              "name": "getScore",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "filePath",
                "contents"
              ],
              "range": [
                [
                  172,
                  12
                ],
                [
                  182,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "182": {
            "19": {
              "name": "matchesContents",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "contents"
              ],
              "range": [
                [
                  182,
                  19
                ],
                [
                  199,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "199": {
            "16": {
              "name": "getPathScore",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "filePath"
              ],
              "range": [
                [
                  199,
                  16
                ],
                [
                  214,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "214": {
            "15": {
              "name": "createToken",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "value",
                "scopes"
              ],
              "range": [
                [
                  214,
                  15
                ],
                [
                  214,
                  69
                ]
              ],
              "doc": "~Private~"
            }
          },
          "216": {
            "14": {
              "name": "createRule",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "options"
              ],
              "range": [
                [
                  216,
                  14
                ],
                [
                  216,
                  60
                ]
              ],
              "doc": "~Private~"
            }
          },
          "218": {
            "17": {
              "name": "createPattern",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "options"
              ],
              "range": [
                [
                  218,
                  17
                ],
                [
                  218,
                  66
                ]
              ],
              "doc": "~Private~"
            }
          },
          "220": {
            "23": {
              "name": "getMaxTokensPerLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  220,
                  23
                ],
                [
                  223,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "223": {
            "19": {
              "name": "scopesFromStack",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "stack",
                "rule",
                "endPatternMatch"
              ],
              "range": [
                [
                  223,
                  19
                ],
                [
                  235,
                  10
                ]
              ],
              "doc": "~Private~"
            }
          }
        },
        "exports": 19
      }
    }
  },
  {
    "repository": "https://github.com/atom/node-pathwatcher.git",
    "version": "2.0.6",
    "files": {
      "src/directory.coffee": {
        "objects": {
          "0": {
            "7": {
              "name": "path",
              "type": "import",
              "range": [
                [
                  0,
                  7
                ],
                [
                  0,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "path",
              "builtin": true
            }
          },
          "2": {
            "8": {
              "name": "async",
              "type": "import",
              "range": [
                [
                  2,
                  8
                ],
                [
                  2,
                  22
                ]
              ],
              "bindingType": "variable",
              "module": "async@~0.2.10"
            }
          },
          "3": {
            "1": {
              "type": "import",
              "range": [
                [
                  3,
                  1
                ],
                [
                  3,
                  7
                ]
              ],
              "bindingType": "variable",
              "module": "emissary@^1.1.0",
              "name": "Emitter",
              "exportsProperty": "Emitter"
            }
          },
          "4": {
            "5": {
              "name": "fs",
              "type": "import",
              "range": [
                [
                  4,
                  5
                ],
                [
                  4,
                  21
                ]
              ],
              "bindingType": "variable",
              "module": "fs-plus@^2.1"
            }
          },
          "6": {
            "7": {
              "name": "File",
              "type": "import",
              "range": [
                [
                  6,
                  7
                ],
                [
                  6,
                  22
                ]
              ],
              "bindingType": "variable",
              "path": "./file"
            }
          },
          "7": {
            "14": {
              "name": "PathWatcher",
              "type": "import",
              "range": [
                [
                  7,
                  14
                ],
                [
                  7,
                  29
                ]
              ],
              "bindingType": "variable",
              "path": "./main"
            }
          },
          "11": {
            "0": {
              "type": "class",
              "name": "Directory",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  14,
                  12
                ],
                [
                  20,
                  15
                ],
                [
                  39,
                  15
                ],
                [
                  46,
                  11
                ],
                [
                  49,
                  10
                ],
                [
                  52,
                  15
                ],
                [
                  58,
                  11
                ],
                [
                  66,
                  19
                ],
                [
                  70,
                  13
                ],
                [
                  75,
                  10
                ],
                [
                  82,
                  19
                ],
                [
                  95,
                  12
                ],
                [
                  119,
                  14
                ],
                [
                  154,
                  18
                ],
                [
                  174,
                  14
                ],
                [
                  198,
                  33
                ],
                [
                  202,
                  37
                ],
                [
                  208,
                  18
                ]
              ],
              "doc": "Public: Represents a directory on disk that can be watched for changes. ",
              "range": [
                [
                  11,
                  0
                ],
                [
                  209,
                  73
                ]
              ]
            }
          },
          "14": {
            "12": {
              "name": "realPath",
              "type": "primitive",
              "range": [
                [
                  14,
                  12
                ],
                [
                  14,
                  15
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "20": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "directoryPath",
                null
              ],
              "range": [
                [
                  20,
                  15
                ],
                [
                  39,
                  1
                ]
              ],
              "doc": " Public: Configures a new Directory instance, no files are accessed.\n\ndirectoryPath - A {String} containing the absolute path to the directory.\nsymlink - A {Boolean} indicating if the path is a symlink (default: false). "
            }
          },
          "39": {
            "15": {
              "name": "getBaseName",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  39,
                  15
                ],
                [
                  46,
                  1
                ]
              ],
              "doc": "Public: Returns the {String} basename of the directory. "
            }
          },
          "46": {
            "11": {
              "name": "getPath",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  46,
                  11
                ],
                [
                  46,
                  18
                ]
              ],
              "doc": " Public: Returns the directory's symbolic path.\n\nThis may include unfollowed symlinks or relative directory entries. Or it\nmay be fully resolved, it depends on what you give it. "
            }
          },
          "49": {
            "10": {
              "name": "isFile",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  49,
                  10
                ],
                [
                  49,
                  17
                ]
              ],
              "doc": "Public: Distinguishes Files from Directories during traversal. "
            }
          },
          "52": {
            "15": {
              "name": "isDirectory",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  52,
                  15
                ],
                [
                  52,
                  21
                ]
              ],
              "doc": "Public: Distinguishes Files from Directories during traversal. "
            }
          },
          "58": {
            "11": {
              "name": "getFile",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "filename"
              ],
              "range": [
                [
                  58,
                  11
                ],
                [
                  66,
                  1
                ]
              ],
              "doc": " Public: Traverse within this Directory to a child File. This method doesn't\nactually check to see if the File exists, it just creates the File object.\n\nfilename - The name of a File within this Directory. "
            }
          },
          "66": {
            "19": {
              "name": "getSubdirectory",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "dirname"
              ],
              "range": [
                [
                  66,
                  19
                ],
                [
                  70,
                  1
                ]
              ],
              "doc": " Public: Traverse within this a Directory to a child Directory. This method\ndoesn't actually check to see if the Directory exists, it just creates the\nDirectory object.\n\ndirname - The name of the child Directory. "
            }
          },
          "70": {
            "13": {
              "name": "getParent",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  70,
                  13
                ],
                [
                  75,
                  1
                ]
              ],
              "doc": "Public: Traverse to the parent Directory. "
            }
          },
          "75": {
            "10": {
              "name": "isRoot",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  75,
                  10
                ],
                [
                  82,
                  1
                ]
              ],
              "doc": " Public: Return true if this {Directory} is the root directory of the\nfilesystem, or false if it isn't. "
            }
          },
          "82": {
            "19": {
              "name": "getRealPathSync",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  82,
                  19
                ],
                [
                  95,
                  1
                ]
              ],
              "doc": " Public: Returns this directory's completely resolved path.\n\nAll relative directory entries are removed and symlinks are resolved to\ntheir final destination. "
            }
          },
          "95": {
            "12": {
              "name": "contains",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "pathToCheck"
              ],
              "range": [
                [
                  95,
                  12
                ],
                [
                  119,
                  1
                ]
              ],
              "doc": " Public: Returns whether the given path (real or symbolic) is inside this\ndirectory. This method does not actually check if the path exists, it just\nchecks if the path is under this directory. "
            }
          },
          "119": {
            "14": {
              "name": "relativize",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "fullPath"
              ],
              "range": [
                [
                  119,
                  14
                ],
                [
                  154,
                  1
                ]
              ],
              "doc": "Public: Returns the relative path to the given path from this directory. "
            }
          },
          "154": {
            "18": {
              "name": "getEntriesSync",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  154,
                  18
                ],
                [
                  174,
                  1
                ]
              ],
              "doc": " Public: Reads file entries in this directory from disk synchronously.\n\nReturns an {Array} of {File} and {Directory} objects. "
            }
          },
          "174": {
            "14": {
              "name": "getEntries",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "callback"
              ],
              "range": [
                [
                  174,
                  14
                ],
                [
                  198,
                  1
                ]
              ],
              "doc": " Public: Reads file entries in this directory from disk asynchronously.\n\ncallback - A {Function} to call with an {Error} as the 1st argument and\n           an {Array} of {File} and {Directory} objects as the 2nd argument. "
            }
          },
          "198": {
            "33": {
              "name": "subscribeToNativeChangeEvents",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  198,
                  33
                ],
                [
                  202,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "202": {
            "37": {
              "name": "unsubscribeFromNativeChangeEvents",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  202,
                  37
                ],
                [
                  208,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "208": {
            "18": {
              "name": "isPathPrefixOf",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "prefix",
                "fullPath"
              ],
              "range": [
                [
                  208,
                  18
                ],
                [
                  209,
                  73
                ]
              ],
              "doc": "Private: Does given full path start with the given prefix? "
            }
          }
        },
        "exports": 11
      },
      "src/file.coffee": {
        "objects": {
          "0": {
            "9": {
              "name": "crypto",
              "type": "import",
              "range": [
                [
                  0,
                  9
                ],
                [
                  0,
                  24
                ]
              ],
              "bindingType": "variable",
              "module": "crypto",
              "builtin": true
            }
          },
          "1": {
            "7": {
              "name": "path",
              "type": "import",
              "range": [
                [
                  1,
                  7
                ],
                [
                  1,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "path",
              "builtin": true
            }
          },
          "3": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  3,
                  4
                ],
                [
                  3,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@~1.x"
            }
          },
          "4": {
            "1": {
              "type": "import",
              "range": [
                [
                  4,
                  1
                ],
                [
                  4,
                  7
                ]
              ],
              "bindingType": "variable",
              "module": "emissary@^1.1.0",
              "name": "Emitter",
              "exportsProperty": "Emitter"
            }
          },
          "5": {
            "5": {
              "name": "fs",
              "type": "import",
              "range": [
                [
                  5,
                  5
                ],
                [
                  5,
                  21
                ]
              ],
              "bindingType": "variable",
              "module": "fs-plus@^2.1"
            }
          },
          "6": {
            "4": {
              "name": "Q",
              "type": "import",
              "range": [
                [
                  6,
                  4
                ],
                [
                  6,
                  14
                ]
              ],
              "bindingType": "variable",
              "module": "q@~1.0.1"
            }
          },
          "7": {
            "8": {
              "name": "runas",
              "type": "import",
              "range": [
                [
                  7,
                  8
                ],
                [
                  7,
                  22
                ]
              ],
              "bindingType": "variable",
              "module": "runas@^1.0.1"
            }
          },
          "9": {
            "12": {
              "type": "primitive",
              "range": [
                [
                  9,
                  12
                ],
                [
                  9,
                  15
                ]
              ]
            }
          },
          "10": {
            "14": {
              "name": "PathWatcher",
              "type": "import",
              "range": [
                [
                  10,
                  14
                ],
                [
                  10,
                  29
                ]
              ],
              "bindingType": "variable",
              "path": "./main"
            }
          },
          "15": {
            "0": {
              "type": "class",
              "name": "File",
              "bindingType": "exports",
              "classProperties": [],
              "prototypeProperties": [
                [
                  18,
                  12
                ],
                [
                  24,
                  15
                ],
                [
                  34,
                  28
                ],
                [
                  49,
                  10
                ],
                [
                  52,
                  15
                ],
                [
                  55,
                  11
                ],
                [
                  59,
                  11
                ],
                [
                  62,
                  13
                ],
                [
                  67,
                  19
                ],
                [
                  76,
                  15
                ],
                [
                  80,
                  9
                ],
                [
                  86,
                  12
                ],
                [
                  101,
                  8
                ],
                [
                  128,
                  10
                ],
                [
                  131,
                  13
                ],
                [
                  135,
                  13
                ],
                [
                  142,
                  40
                ],
                [
                  154,
                  27
                ],
                [
                  167,
                  32
                ],
                [
                  170,
                  22
                ],
                [
                  178,
                  33
                ],
                [
                  182,
                  37
                ]
              ],
              "doc": " Public: Represents an individual file that can be watched, read from, and\nwritten to. ",
              "range": [
                [
                  15,
                  0
                ],
                [
                  185,
                  31
                ]
              ]
            }
          },
          "18": {
            "12": {
              "name": "realPath",
              "type": "primitive",
              "range": [
                [
                  18,
                  12
                ],
                [
                  18,
                  15
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "24": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "filePath",
                null
              ],
              "range": [
                [
                  24,
                  15
                ],
                [
                  34,
                  1
                ]
              ],
              "doc": " Public: Creates a new file.\n\nfilePath - A {String} containing the absolute path to the file\nsymlink - A {Boolean} indicating if the path is a symlink (default: false). "
            }
          },
          "34": {
            "28": {
              "name": "handleEventSubscriptions",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  34,
                  28
                ],
                [
                  49,
                  1
                ]
              ],
              "doc": "Private: Subscribes to file system notifications when necessary. "
            }
          },
          "49": {
            "10": {
              "name": "isFile",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  49,
                  10
                ],
                [
                  49,
                  16
                ]
              ],
              "doc": "Public: Distinguishes Files from Directories during traversal. "
            }
          },
          "52": {
            "15": {
              "name": "isDirectory",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  52,
                  15
                ],
                [
                  52,
                  22
                ]
              ],
              "doc": "Public: Distinguishes Files from Directories during traversal. "
            }
          },
          "55": {
            "11": {
              "name": "setPath",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  55,
                  11
                ],
                [
                  59,
                  1
                ]
              ],
              "doc": "Private: Sets the path for the file. "
            }
          },
          "59": {
            "11": {
              "name": "getPath",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  59,
                  11
                ],
                [
                  59,
                  18
                ]
              ],
              "doc": "Public: Returns the {String} path for the file. "
            }
          },
          "62": {
            "13": {
              "name": "getParent",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  62,
                  13
                ],
                [
                  67,
                  1
                ]
              ],
              "doc": "Public: Return the {Directory} that contains this file. "
            }
          },
          "67": {
            "19": {
              "name": "getRealPathSync",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  67,
                  19
                ],
                [
                  76,
                  1
                ]
              ],
              "doc": "Public: Returns this file's completely resolved path. "
            }
          },
          "76": {
            "15": {
              "name": "getBaseName",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  76,
                  15
                ],
                [
                  80,
                  1
                ]
              ],
              "doc": "Public: Return the {String} filename without any directory information. "
            }
          },
          "80": {
            "9": {
              "name": "write",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "text"
              ],
              "range": [
                [
                  80,
                  9
                ],
                [
                  86,
                  1
                ]
              ],
              "doc": "Public: Overwrites the file with the given String. "
            }
          },
          "86": {
            "12": {
              "name": "readSync",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "flushCache"
              ],
              "range": [
                [
                  86,
                  12
                ],
                [
                  101,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "101": {
            "8": {
              "name": "read",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "flushCache"
              ],
              "range": [
                [
                  101,
                  8
                ],
                [
                  128,
                  1
                ]
              ],
              "doc": " Public: Reads the contents of the file.\n\nflushCache - A {Boolean} indicating whether to require a direct read or if\n             a cached copy is acceptable.\n\nReturns a promise that resovles to a String. "
            }
          },
          "128": {
            "10": {
              "name": "exists",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  128,
                  10
                ],
                [
                  131,
                  1
                ]
              ],
              "doc": "Public: Returns whether the file exists. "
            }
          },
          "131": {
            "13": {
              "name": "setDigest",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "contents"
              ],
              "range": [
                [
                  131,
                  13
                ],
                [
                  135,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "135": {
            "13": {
              "name": "getDigest",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  135,
                  13
                ],
                [
                  142,
                  1
                ]
              ],
              "doc": "Public: Get the SHA-1 digest of this file "
            }
          },
          "142": {
            "40": {
              "name": "writeFileWithPrivilegeEscalationSync",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "filePath",
                "text"
              ],
              "range": [
                [
                  142,
                  40
                ],
                [
                  154,
                  1
                ]
              ],
              "doc": " Private: Writes the text to specified path.\n\nPrivilege escalation would be asked when current user doesn't have\npermission to the path. "
            }
          },
          "154": {
            "27": {
              "name": "handleNativeChangeEvent",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "eventType",
                "eventPath"
              ],
              "range": [
                [
                  154,
                  27
                ],
                [
                  167,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "167": {
            "32": {
              "name": "detectResurrectionAfterDelay",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  167,
                  32
                ],
                [
                  170,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "170": {
            "22": {
              "name": "detectResurrection",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  170,
                  22
                ],
                [
                  178,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "178": {
            "33": {
              "name": "subscribeToNativeChangeEvents",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  178,
                  33
                ],
                [
                  182,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "182": {
            "37": {
              "name": "unsubscribeFromNativeChangeEvents",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  182,
                  37
                ],
                [
                  185,
                  31
                ]
              ],
              "doc": "~Private~"
            }
          }
        },
        "exports": 15
      }
    }
  },
  {
    "main": "./src/space-pen.coffee",
    "repository": "https://github.com/atom/space-pen.git",
    "version": "3.3.0",
    "files": {
      "src/space-pen.coffee": {
        "objects": {
          "4": {
            "3": {
              "type": "primitive",
              "name": "_",
              "range": [
                [
                  4,
                  3
                ],
                [
                  4,
                  3
                ]
              ],
              "exportsProperty": "_"
            },
            "6": {
              "type": "primitive",
              "name": "jQuery",
              "range": [
                [
                  4,
                  6
                ],
                [
                  4,
                  11
                ]
              ],
              "exportsProperty": "jQuery"
            }
          },
          "5": {
            "6": {
              "name": "jQuery",
              "type": "primitive",
              "range": [
                [
                  5,
                  6
                ],
                [
                  5,
                  11
                ]
              ]
            }
          },
          "8": {
            "2": {
              "name": "Tags",
              "type": "function",
              "range": [
                [
                  8,
                  2
                ],
                [
                  15,
                  60
                ]
              ]
            }
          },
          "17": {
            "18": {
              "type": "primitive",
              "range": [
                [
                  17,
                  18
                ],
                [
                  17,
                  19
                ]
              ]
            }
          },
          "22": {
            "2": {
              "name": "Events",
              "type": "function",
              "range": [
                [
                  22,
                  2
                ],
                [
                  24,
                  57
                ]
              ]
            }
          },
          "28": {
            "8": {
              "name": "document",
              "type": "primitive",
              "range": [
                [
                  28,
                  8
                ],
                [
                  28,
                  15
                ]
              ]
            }
          },
          "32": {
            "12": {
              "name": "0",
              "type": "primitive",
              "range": [
                [
                  32,
                  12
                ],
                [
                  32,
                  12
                ]
              ]
            }
          },
          "58": {
            "0": {
              "type": "class",
              "name": "View",
              "superClass": "jQuery",
              "classProperties": [
                [
                  59,
                  17
                ],
                [
                  65,
                  12
                ],
                [
                  69,
                  9
                ],
                [
                  72,
                  8
                ],
                [
                  75,
                  8
                ],
                [
                  77,
                  16
                ],
                [
                  83,
                  15
                ],
                [
                  87,
                  14
                ],
                [
                  92,
                  11
                ]
              ],
              "prototypeProperties": [
                [
                  100,
                  15
                ],
                [
                  113,
                  13
                ],
                [
                  120,
                  15
                ],
                [
                  128,
                  21
                ],
                [
                  147,
                  13
                ],
                [
                  153,
                  7
                ],
                [
                  167,
                  11
                ],
                [
                  174,
                  11
                ]
              ],
              "doc": " Public: View class that extends the jQuery prototype.\n\nExtending classes must implement a `@content` method.\n\n## Example\n```coffee\nclass Spacecraft extends View\n  @content: ->\n    @div =>\n      @h1 'Spacecraft'\n      @ol =>\n        @li 'Apollo'\n        @li 'Soyuz'\n        @li 'Space Shuttle'\n```\n\nEach view instance will have all the methods from the jQuery prototype\navailable on it.\n\n```coffee\n  craft = new Spacecraft()\n  craft.find('h1').text() # 'Spacecraft'\n  craft.appendTo(document.body) # View is now a child of the <body> tag\n``` ",
              "range": [
                [
                  58,
                  0
                ],
                [
                  176,
                  0
                ]
              ]
            }
          },
          "59": {
            "17": {
              "name": "builderStack",
              "type": "primitive",
              "range": [
                [
                  59,
                  17
                ],
                [
                  59,
                  20
                ]
              ],
              "bindingType": "classProperty"
            }
          },
          "65": {
            "12": {
              "name": "subview",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "name",
                "view"
              ],
              "range": [
                [
                  65,
                  12
                ],
                [
                  69,
                  1
                ]
              ],
              "doc": "Public: Add the given subview wired to an outlet with the given name "
            }
          },
          "69": {
            "9": {
              "name": "text",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "string"
              ],
              "range": [
                [
                  69,
                  9
                ],
                [
                  69,
                  48
                ]
              ],
              "doc": "Public: Add a text node with the given text content "
            }
          },
          "72": {
            "8": {
              "name": "tag",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "tagName",
                "args"
              ],
              "range": [
                [
                  72,
                  8
                ],
                [
                  72,
                  66
                ]
              ],
              "doc": "Public: Add a new tag with the given name "
            }
          },
          "75": {
            "8": {
              "name": "raw",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "string"
              ],
              "range": [
                [
                  75,
                  8
                ],
                [
                  75,
                  46
                ]
              ],
              "doc": "Public: Add new child DOM nodes from the given raw HTML string. "
            }
          },
          "77": {
            "16": {
              "name": "pushBuilder",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  77,
                  16
                ],
                [
                  83,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "83": {
            "15": {
              "name": "popBuilder",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  83,
                  15
                ],
                [
                  87,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "87": {
            "14": {
              "name": "buildHtml",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "fn"
              ],
              "range": [
                [
                  87,
                  14
                ],
                [
                  92,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "92": {
            "11": {
              "name": "render",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "fn"
              ],
              "range": [
                [
                  92,
                  11
                ],
                [
                  100,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "100": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "args"
              ],
              "range": [
                [
                  100,
                  15
                ],
                [
                  113,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "113": {
            "13": {
              "name": "buildHtml",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "params"
              ],
              "range": [
                [
                  113,
                  13
                ],
                [
                  120,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "120": {
            "15": {
              "name": "wireOutlets",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "view"
              ],
              "range": [
                [
                  120,
                  15
                ],
                [
                  128,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "128": {
            "21": {
              "name": "bindEventHandlers",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "view"
              ],
              "range": [
                [
                  128,
                  21
                ],
                [
                  147,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "147": {
            "13": {
              "name": "pushStack",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "elems"
              ],
              "range": [
                [
                  147,
                  13
                ],
                [
                  153,
                  1
                ]
              ],
              "doc": " Private: `pushStack` and `end` are jQuery methods that construct new wrappers.\nwe override them here to construct plain wrappers with `jQuery` rather\nthan wrappers that are instances of our view class. "
            }
          },
          "153": {
            "7": {
              "name": "end",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  153,
                  7
                ],
                [
                  167,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "167": {
            "11": {
              "name": "command",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "commandName",
                "selector",
                "options",
                "handler"
              ],
              "range": [
                [
                  167,
                  11
                ],
                [
                  174,
                  1
                ]
              ],
              "doc": " Public: Calls the given handler when commandName is triggered on the {View}.\n\nThis is enhanced version of jQuery's `::on` method. It listens for a custom\nDOM event and adds metadata to the DOM to maintain a list of all commands.\n\ncommandName - A namespaced {String} describing the command, such as\n              `find-and-replace:toggle`.\nselector - An optional selector {String} to filter the descendants of the\n           elements that trigger the event.\noptions - An optional options {Object} with an `data` key.\nhandler - A {Function} to execute when the command is triggered. "
            }
          },
          "174": {
            "11": {
              "name": "preempt",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "eventName",
                "handler"
              ],
              "range": [
                [
                  174,
                  11
                ],
                [
                  176,
                  0
                ]
              ],
              "doc": " Public: Preempt events registered with jQuery's `::on`.\n\neventName - A event name {String}.\nhandler - A {Function} to execute when the eventName is triggered. "
            }
          },
          "177": {
            "0": {
              "type": "class",
              "name": "Builder",
              "classProperties": [],
              "prototypeProperties": [
                [
                  178,
                  15
                ],
                [
                  182,
                  13
                ],
                [
                  185,
                  7
                ],
                [
                  198,
                  11
                ],
                [
                  211,
                  12
                ],
                [
                  214,
                  8
                ],
                [
                  224,
                  7
                ],
                [
                  227,
                  11
                ],
                [
                  235,
                  18
                ]
              ],
              "doc": "~Private~",
              "range": [
                [
                  177,
                  0
                ],
                [
                  247,
                  54
                ]
              ]
            }
          },
          "178": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  178,
                  15
                ],
                [
                  182,
                  1
                ]
              ]
            }
          },
          "182": {
            "13": {
              "name": "buildHtml",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  182,
                  13
                ],
                [
                  185,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "185": {
            "7": {
              "name": "tag",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "name",
                "args"
              ],
              "range": [
                [
                  185,
                  7
                ],
                [
                  198,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "198": {
            "11": {
              "name": "openTag",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "name",
                "attributes"
              ],
              "range": [
                [
                  198,
                  11
                ],
                [
                  211,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "211": {
            "12": {
              "name": "closeTag",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "name"
              ],
              "range": [
                [
                  211,
                  12
                ],
                [
                  214,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "214": {
            "8": {
              "name": "text",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "string"
              ],
              "range": [
                [
                  214,
                  8
                ],
                [
                  224,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "224": {
            "7": {
              "name": "raw",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "string"
              ],
              "range": [
                [
                  224,
                  7
                ],
                [
                  227,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "227": {
            "11": {
              "name": "subview",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "outletName",
                "subview"
              ],
              "range": [
                [
                  227,
                  11
                ],
                [
                  235,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "235": {
            "18": {
              "name": "extractOptions",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "args"
              ],
              "range": [
                [
                  235,
                  18
                ],
                [
                  247,
                  54
                ]
              ],
              "doc": "~Private~"
            }
          },
          "248": {
            "17": {
              "name": "callAttachHook",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "element"
              ],
              "range": [
                [
                  248,
                  17
                ],
                [
                  260,
                  0
                ]
              ],
              "doc": "Private: Trigger attach event when views are added to the DOM "
            }
          },
          "278": {
            "20": {
              "name": "jQuery",
              "type": "primitive",
              "range": [
                [
                  278,
                  20
                ],
                [
                  278,
                  25
                ]
              ]
            }
          },
          "279": {
            "19": {
              "name": "jQuery.cleanData",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "elements"
              ],
              "range": [
                [
                  279,
                  19
                ],
                [
                  286,
                  0
                ]
              ],
              "doc": null
            }
          },
          "287": {
            "12": {
              "name": "$.fn.view",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  287,
                  12
                ],
                [
                  289,
                  0
                ]
              ],
              "doc": null
            }
          },
          "290": {
            "13": {
              "name": "$.fn.views",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  290,
                  13
                ],
                [
                  293,
                  0
                ]
              ],
              "doc": null
            }
          },
          "294": {
            "22": {
              "name": "$.fn.containingView",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  294,
                  22
                ],
                [
                  299,
                  0
                ]
              ],
              "doc": null
            }
          },
          "300": {
            "20": {
              "name": "$.fn.scrollBottom",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "newValue"
              ],
              "range": [
                [
                  300,
                  20
                ],
                [
                  305,
                  0
                ]
              ],
              "doc": null
            }
          },
          "306": {
            "18": {
              "name": "$.fn.scrollDown",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  306,
                  18
                ],
                [
                  308,
                  0
                ]
              ],
              "doc": null
            }
          },
          "309": {
            "16": {
              "name": "$.fn.scrollUp",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  309,
                  16
                ],
                [
                  311,
                  0
                ]
              ],
              "doc": null
            }
          },
          "312": {
            "19": {
              "name": "$.fn.scrollToTop",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  312,
                  19
                ],
                [
                  314,
                  0
                ]
              ],
              "doc": null
            }
          },
          "315": {
            "22": {
              "name": "$.fn.scrollToBottom",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  315,
                  22
                ],
                [
                  317,
                  0
                ]
              ],
              "doc": null
            }
          },
          "318": {
            "19": {
              "name": "$.fn.scrollRight",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "newValue"
              ],
              "range": [
                [
                  318,
                  19
                ],
                [
                  323,
                  0
                ]
              ],
              "doc": null
            }
          },
          "324": {
            "14": {
              "name": "$.fn.pageUp",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  324,
                  14
                ],
                [
                  326,
                  0
                ]
              ],
              "doc": null
            }
          },
          "327": {
            "16": {
              "name": "$.fn.pageDown",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  327,
                  16
                ],
                [
                  329,
                  0
                ]
              ],
              "doc": null
            }
          },
          "330": {
            "15": {
              "name": "$.fn.isOnDom",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  330,
                  15
                ],
                [
                  332,
                  0
                ]
              ],
              "doc": null
            }
          },
          "333": {
            "17": {
              "name": "$.fn.isVisible",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  333,
                  17
                ],
                [
                  335,
                  0
                ]
              ],
              "doc": null
            }
          },
          "336": {
            "16": {
              "name": "$.fn.isHidden",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  336,
                  16
                ],
                [
                  347,
                  0
                ]
              ],
              "doc": null
            }
          },
          "348": {
            "18": {
              "name": "$.fn.isDisabled",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  348,
                  18
                ],
                [
                  350,
                  0
                ]
              ],
              "doc": null
            }
          },
          "351": {
            "14": {
              "name": "$.fn.enable",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  351,
                  14
                ],
                [
                  353,
                  0
                ]
              ],
              "doc": null
            }
          },
          "354": {
            "15": {
              "name": "$.fn.disable",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  354,
                  15
                ],
                [
                  356,
                  0
                ]
              ],
              "doc": null
            }
          },
          "357": {
            "16": {
              "name": "$.fn.insertAt",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "index",
                "element"
              ],
              "range": [
                [
                  357,
                  16
                ],
                [
                  363,
                  0
                ]
              ],
              "doc": null
            }
          },
          "364": {
            "16": {
              "name": "$.fn.removeAt",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "index"
              ],
              "range": [
                [
                  364,
                  16
                ],
                [
                  366,
                  0
                ]
              ],
              "doc": null
            }
          },
          "367": {
            "15": {
              "name": "$.fn.indexOf",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "child"
              ],
              "range": [
                [
                  367,
                  15
                ],
                [
                  369,
                  0
                ]
              ],
              "doc": null
            }
          },
          "370": {
            "23": {
              "name": "$.fn.containsElement",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "element"
              ],
              "range": [
                [
                  370,
                  23
                ],
                [
                  372,
                  0
                ]
              ],
              "doc": null
            }
          },
          "373": {
            "15": {
              "name": "$.fn.preempt",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "eventName",
                "handler"
              ],
              "range": [
                [
                  373,
                  15
                ],
                [
                  387,
                  57
                ]
              ],
              "doc": null
            }
          },
          "388": {
            "16": {
              "name": "$.fn.handlers",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "eventName"
              ],
              "range": [
                [
                  388,
                  16
                ],
                [
                  392,
                  0
                ]
              ],
              "doc": null
            }
          },
          "393": {
            "17": {
              "name": "$.fn.hasParent",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  393,
                  17
                ],
                [
                  395,
                  0
                ]
              ],
              "doc": null
            }
          },
          "396": {
            "16": {
              "name": "$.fn.hasFocus",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  396,
                  16
                ],
                [
                  398,
                  0
                ]
              ],
              "doc": null
            }
          },
          "399": {
            "18": {
              "name": "$.fn.flashError",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  399,
                  18
                ],
                [
                  403,
                  0
                ]
              ],
              "doc": null
            }
          },
          "404": {
            "18": {
              "name": "$.fn.trueHeight",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  404,
                  18
                ],
                [
                  406,
                  0
                ]
              ],
              "doc": null
            }
          },
          "407": {
            "17": {
              "name": "$.fn.trueWidth",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  407,
                  17
                ],
                [
                  409,
                  0
                ]
              ],
              "doc": null
            }
          },
          "410": {
            "16": {
              "name": "$.fn.document",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "eventName",
                "docString"
              ],
              "range": [
                [
                  410,
                  16
                ],
                [
                  415,
                  0
                ]
              ],
              "doc": null
            }
          },
          "416": {
            "14": {
              "name": "$.fn.events",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  416,
                  14
                ],
                [
                  427,
                  0
                ]
              ],
              "doc": null
            }
          },
          "428": {
            "15": {
              "name": "$.fn.command",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "eventName",
                "selector",
                "options",
                "handler"
              ],
              "range": [
                [
                  428,
                  15
                ],
                [
                  442,
                  0
                ]
              ],
              "doc": null
            }
          },
          "443": {
            "16": {
              "name": "$.fn.iconSize",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [
                "size"
              ],
              "range": [
                [
                  443,
                  16
                ],
                [
                  445,
                  0
                ]
              ],
              "doc": null
            }
          },
          "446": {
            "16": {
              "name": "$.fn.intValue",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  446,
                  16
                ],
                [
                  448,
                  0
                ]
              ],
              "doc": null
            }
          },
          "449": {
            "36": {
              "name": "$.Event.prototype.abortKeyBinding",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  449,
                  36
                ],
                [
                  449,
                  37
                ]
              ],
              "doc": null
            }
          },
          "450": {
            "38": {
              "name": "$.Event.prototype.currentTargetView",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  450,
                  38
                ],
                [
                  450,
                  74
                ]
              ],
              "doc": null
            }
          },
          "451": {
            "31": {
              "name": "$.Event.prototype.targetView",
              "bindingType": "variable",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  451,
                  31
                ],
                [
                  451,
                  60
                ]
              ],
              "doc": null
            }
          },
          "459": {
            "0": {
              "name": "$$",
              "bindingType": "exportsProperty",
              "type": "function",
              "range": [
                [
                  459,
                  0
                ],
                [
                  459,
                  6
                ]
              ]
            }
          },
          "460": {
            "0": {
              "name": "$$$",
              "bindingType": "exportsProperty",
              "type": "function",
              "range": [
                [
                  460,
                  0
                ],
                [
                  460,
                  6
                ]
              ]
            }
          }
        },
        "exports": {
          "_default": {
            "operator": "?",
            "first": {
              "base": {
                "value": "exports",
                "locationData": {
                  "first_line": 455,
                  "first_column": 10,
                  "last_line": 455,
                  "last_column": 16
                }
              },
              "properties": [],
              "locationData": {
                "first_line": 455,
                "first_column": 10,
                "last_line": 455,
                "last_column": 16
              }
            },
            "second": {
              "base": {
                "value": "this",
                "locationData": {
                  "first_line": 455,
                  "first_column": 20,
                  "last_line": 455,
                  "last_column": 23
                }
              },
              "properties": [],
              "locationData": {
                "first_line": 455,
                "first_column": 20,
                "last_line": 455,
                "last_column": 23
              }
            },
            "flip": false,
            "locationData": {
              "first_line": 455,
              "first_column": 10,
              "last_line": 455,
              "last_column": 23
            }
          },
          "View": {
            "startLineNumber": 456
          },
          "jQuery": {
            "startLineNumber": 457
          },
          "$": {
            "startLineNumber": 458
          },
          "$$": {
            "startLineNumber": 459
          },
          "$$$": {
            "startLineNumber": 460
          }
        }
      }
    }
  },
  {
    "main": "./src/text-buffer.coffee",
    "repository": "https://github.com/atom/text-buffer.git",
    "version": "3.0.0",
    "files": {
      "src/marker.coffee": {
        "objects": {
          "0": {
            "1": {
              "type": "import",
              "range": [
                [
                  0,
                  1
                ],
                [
                  0,
                  6
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@1.x",
              "name": "extend",
              "exportsProperty": "extend"
            },
            "9": {
              "type": "import",
              "range": [
                [
                  0,
                  9
                ],
                [
                  0,
                  15
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@1.x",
              "name": "isEqual",
              "exportsProperty": "isEqual"
            },
            "18": {
              "type": "import",
              "range": [
                [
                  0,
                  18
                ],
                [
                  0,
                  21
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@1.x",
              "name": "omit",
              "exportsProperty": "omit"
            },
            "24": {
              "type": "import",
              "range": [
                [
                  0,
                  24
                ],
                [
                  0,
                  27
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@1.x",
              "name": "pick",
              "exportsProperty": "pick"
            },
            "30": {
              "type": "import",
              "range": [
                [
                  0,
                  30
                ],
                [
                  0,
                  33
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@1.x",
              "name": "size",
              "exportsProperty": "size"
            }
          },
          "1": {
            "1": {
              "type": "import",
              "range": [
                [
                  1,
                  1
                ],
                [
                  1,
                  7
                ]
              ],
              "bindingType": "variable",
              "module": "emissary@1.x",
              "name": "Emitter",
              "exportsProperty": "Emitter"
            }
          },
          "2": {
            "7": {
              "name": "Grim",
              "type": "import",
              "range": [
                [
                  2,
                  7
                ],
                [
                  2,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "grim@0.11.0"
            }
          },
          "3": {
            "12": {
              "name": "Delegator",
              "type": "import",
              "range": [
                [
                  3,
                  12
                ],
                [
                  3,
                  29
                ]
              ],
              "bindingType": "variable",
              "module": "delegato@1.x"
            }
          },
          "4": {
            "15": {
              "name": "Serializable",
              "type": "import",
              "range": [
                [
                  4,
                  15
                ],
                [
                  4,
                  36
                ]
              ],
              "bindingType": "variable",
              "module": "serializable@1.x"
            }
          },
          "5": {
            "14": {
              "name": "MarkerPatch",
              "type": "import",
              "range": [
                [
                  5,
                  14
                ],
                [
                  5,
                  37
                ]
              ],
              "bindingType": "variable",
              "path": "./marker-patch"
            }
          },
          "6": {
            "8": {
              "name": "Point",
              "type": "import",
              "range": [
                [
                  6,
                  8
                ],
                [
                  6,
                  24
                ]
              ],
              "bindingType": "variable",
              "path": "./point"
            }
          },
          "7": {
            "8": {
              "name": "Range",
              "type": "import",
              "range": [
                [
                  7,
                  8
                ],
                [
                  7,
                  24
                ]
              ],
              "bindingType": "variable",
              "path": "./range"
            }
          },
          "9": {
            "13": {
              "type": "primitive",
              "range": [
                [
                  9,
                  13
                ],
                [
                  9,
                  62
                ]
              ]
            }
          },
          "59": {
            "0": {
              "type": "class",
              "name": "Marker",
              "bindingType": "exports",
              "classProperties": [
                [
                  64,
                  18
                ],
                [
                  73,
                  27
                ]
              ],
              "prototypeProperties": [
                [
                  97,
                  15
                ],
                [
                  111,
                  19
                ],
                [
                  116,
                  21
                ],
                [
                  121,
                  12
                ],
                [
                  130,
                  12
                ],
                [
                  137,
                  19
                ],
                [
                  148,
                  19
                ],
                [
                  173,
                  19
                ],
                [
                  188,
                  19
                ],
                [
                  210,
                  20
                ],
                [
                  218,
                  18
                ],
                [
                  229,
                  13
                ],
                [
                  241,
                  13
                ],
                [
                  249,
                  14
                ],
                [
                  253,
                  11
                ],
                [
                  259,
                  11
                ],
                [
                  265,
                  15
                ],
                [
                  270,
                  11
                ],
                [
                  278,
                  27
                ],
                [
                  282,
                  17
                ],
                [
                  287,
                  17
                ],
                [
                  293,
                  17
                ],
                [
                  298,
                  17
                ],
                [
                  303,
                  8
                ],
                [
                  308,
                  11
                ],
                [
                  314,
                  17
                ],
                [
                  320,
                  11
                ],
                [
                  324,
                  21
                ],
                [
                  329,
                  17
                ],
                [
                  336,
                  16
                ],
                [
                  357,
                  12
                ],
                [
                  362,
                  10
                ],
                [
                  372,
                  22
                ],
                [
                  419,
                  14
                ],
                [
                  430,
                  14
                ],
                [
                  477,
                  19
                ]
              ],
              "doc": " Public: Reprents a buffer annotation that remains logically stationary even\nas the buffer changes. This is used to represent cursors, folds, snippet\ntargets, misspelled words, and anything else that needs to track a logical\nlocation in the buffer over time.\n\nHead and Tail:\nMarkers always have a *head* and sometimes have a *tail*. If you think of a\nmarker as an editor selection, the tail is the part that's stationary and the\nhead is the part that moves when the mouse is moved. A marker without a tail\nalways reports an empty range at the head position. A marker with a head position\ngreater than the tail is in a \"normal\" orientation. If the head precedes the\ntail the marker is in a \"reversed\" orientation.\n\nValidity:\nMarkers are considered *valid* when they are first created. Depending on the\ninvalidation strategy you choose, certain changes to the buffer can cause a\nmarker to become invalid, for example if the text surrounding the marker is\ndeleted. See {TextBuffer::markRange} for invalidation strategies.\n\nChange events:\nWhen markers change in position for any reason, the emit a 'changed' event with\nthe following properties:\n\n* oldHeadPosition:\n    A {Point} representing the former head position\n* newHeadPosition:\n    A {Point} representing the new head position\n* oldTailPosition:\n    A {Point} representing the former tail position\n* newTailPosition:\n    A {Point} representing the new tail position\n* wasValid:\n    A {Boolean} indicating whether the marker was valid before the change\n* isValid:\n    A {Boolean} indicating whether the marker is now valid\n* hadTail:\n    A {Boolean} indicating whether the marker had a tail before the change\n* hasTail:\n    A {Boolean} indicating whether the marker now has a tail\n* oldProperties:\n    An {Object} containing the marker's custom properties before the change.\n* newProperties:\n    An {Object} containing the marker's custom properties after the change.\n* textChanged:\n    A {Boolean} indicating whether this change was caused by a textual change\n    to the buffer or whether the marker was manipulated directly via its public\n    API. ",
              "range": [
                [
                  59,
                  0
                ],
                [
                  478,
                  60
                ]
              ]
            }
          },
          "64": {
            "18": {
              "name": "extractParams",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "inputParams"
              ],
              "range": [
                [
                  64,
                  18
                ],
                [
                  73,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "73": {
            "27": {
              "name": "handleDeprecatedParams",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "params"
              ],
              "range": [
                [
                  73,
                  27
                ],
                [
                  94,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "97": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "params"
              ],
              "range": [
                [
                  97,
                  15
                ],
                [
                  111,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "111": {
            "19": {
              "name": "serializeParams",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  111,
                  19
                ],
                [
                  116,
                  1
                ]
              ],
              "doc": "Private: Used by {Serializable} during serialization. "
            }
          },
          "116": {
            "21": {
              "name": "deserializeParams",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "state"
              ],
              "range": [
                [
                  116,
                  21
                ],
                [
                  121,
                  1
                ]
              ],
              "doc": "Private: Used by {Serializable} during deserialization. "
            }
          },
          "121": {
            "12": {
              "name": "getRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  121,
                  12
                ],
                [
                  130,
                  1
                ]
              ],
              "doc": "Public: Returns the current {Range} of the marker. The range is immutable. "
            }
          },
          "130": {
            "12": {
              "name": "setRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "range",
                "properties"
              ],
              "range": [
                [
                  130,
                  12
                ],
                [
                  137,
                  1
                ]
              ],
              "doc": " Public: Sets the range of the marker.\n\nrange - A {Range} or range-compatible {Array}. The range will be clipped\n        before it is assigned.\nproperties - An optional hash of properties to associate with the marker.\n  :reversed -  If true, the marker will to be in a reversed orientation. "
            }
          },
          "137": {
            "19": {
              "name": "getHeadPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  137,
                  19
                ],
                [
                  148,
                  1
                ]
              ],
              "doc": "Public: Returns a {Point} representing the marker's current head position. "
            }
          },
          "148": {
            "19": {
              "name": "setHeadPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "position",
                "properties"
              ],
              "range": [
                [
                  148,
                  19
                ],
                [
                  173,
                  1
                ]
              ],
              "doc": " Public: Sets the head position of the marker.\n\nposition - A {Point} or point-compatible {Array}. The position will be\n           clipped before it is assigned.\nproperties - An optional hash of properties to associate with the marker. "
            }
          },
          "173": {
            "19": {
              "name": "getTailPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  173,
                  19
                ],
                [
                  188,
                  1
                ]
              ],
              "doc": " Public: Returns a {Point} representing the marker's current tail position.\nIf the marker has no tail, the head position will be returned instead. "
            }
          },
          "188": {
            "19": {
              "name": "setTailPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "position",
                "properties"
              ],
              "range": [
                [
                  188,
                  19
                ],
                [
                  210,
                  1
                ]
              ],
              "doc": " Public: Sets the head position of the marker. If the marker doesn't have a\ntail, it will after calling this method.\n\nposition - A {Point} or point-compatible {Array}. The position will be\n           clipped before it is assigned.\nproperties - An optional hash of properties to associate with the marker. "
            }
          },
          "210": {
            "20": {
              "name": "getStartPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  210,
                  20
                ],
                [
                  218,
                  1
                ]
              ],
              "doc": " Public: Returns a {Point} representing the start position of the marker,\nwhich could be the head or tail position, depending on its orientation. "
            }
          },
          "218": {
            "18": {
              "name": "getEndPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  218,
                  18
                ],
                [
                  229,
                  1
                ]
              ],
              "doc": " Public: Returns a {Point} representing the end position of the marker,\nwhich could be the head or tail position, depending on its orientation. "
            }
          },
          "229": {
            "13": {
              "name": "clearTail",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "properties"
              ],
              "range": [
                [
                  229,
                  13
                ],
                [
                  241,
                  1
                ]
              ],
              "doc": " Public: Removes the marker's tail. After calling the marker's head position\nwill be reported as its current tail position until the tail is planted\nagain.\n\nproperties - An optional hash of properties to associate with the marker. "
            }
          },
          "241": {
            "13": {
              "name": "plantTail",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "properties"
              ],
              "range": [
                [
                  241,
                  13
                ],
                [
                  249,
                  1
                ]
              ],
              "doc": " Public: Plants the marker's tail at the current head position. After calling\nthe marker's tail position will be its head position at the time of the\ncall, regardless of where the marker's head is moved.\n\nproperties - An optional hash of properties to associate with the marker. "
            }
          },
          "249": {
            "14": {
              "name": "isReversed",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  249,
                  14
                ],
                [
                  253,
                  1
                ]
              ],
              "doc": "Public: Returns a {Boolean} indicating whether the head precedes the tail. "
            }
          },
          "253": {
            "11": {
              "name": "hasTail",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  253,
                  11
                ],
                [
                  259,
                  1
                ]
              ],
              "doc": "Public: Returns a {Boolean} indicating whether the marker has a tail. "
            }
          },
          "259": {
            "11": {
              "name": "isValid",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  259,
                  11
                ],
                [
                  265,
                  1
                ]
              ],
              "doc": " Public: Is the marker valid?\n\nReturns a {Boolean}. "
            }
          },
          "265": {
            "15": {
              "name": "isDestroyed",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  265,
                  15
                ],
                [
                  270,
                  1
                ]
              ],
              "doc": " Public: Is the marker destroyed?\n\nReturns a {Boolean}. "
            }
          },
          "270": {
            "11": {
              "name": "isEqual",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "other"
              ],
              "range": [
                [
                  270,
                  11
                ],
                [
                  278,
                  1
                ]
              ],
              "doc": " Public: Returns a {Boolean} indicating whether this marker is equivalent to\nanother marker, meaning they have the same range and options. "
            }
          },
          "278": {
            "27": {
              "name": "getInvalidationStrategy",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  278,
                  27
                ],
                [
                  282,
                  1
                ]
              ],
              "doc": " Public: Get the invalidation strategy for this marker.\n\nValid values include: `never`, `surround`, `overlap`, `inside`, and `touch`.\n\nReturns a {String}. "
            }
          },
          "282": {
            "17": {
              "name": "getAttributes",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  282,
                  17
                ],
                [
                  287,
                  1
                ]
              ],
              "doc": "Deprecated: Use ::getProperties instead "
            }
          },
          "287": {
            "17": {
              "name": "setAttributes",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "args"
              ],
              "range": [
                [
                  287,
                  17
                ],
                [
                  293,
                  1
                ]
              ],
              "doc": "Deprecated: Use ::setProperties instead "
            }
          },
          "293": {
            "17": {
              "name": "getProperties",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  293,
                  17
                ],
                [
                  298,
                  1
                ]
              ],
              "doc": " Public: Returns an {Object} containing any custom properties associated with\nthe marker. "
            }
          },
          "298": {
            "17": {
              "name": "setProperties",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "properties"
              ],
              "range": [
                [
                  298,
                  17
                ],
                [
                  303,
                  1
                ]
              ],
              "doc": " Public: Merges an {Object} containing new properties into the marker's\nexisting properties. "
            }
          },
          "303": {
            "8": {
              "name": "copy",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "params"
              ],
              "range": [
                [
                  303,
                  8
                ],
                [
                  308,
                  1
                ]
              ],
              "doc": " Public: Creates and returns a new {Marker} with the same properties as this\nmarker. "
            }
          },
          "308": {
            "11": {
              "name": "destroy",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  308,
                  11
                ],
                [
                  314,
                  1
                ]
              ],
              "doc": " Public: Destroys the marker, causing it to emit the 'destroyed' event. Once\ndestroyed, a marker cannot be restored by undo/redo operations. "
            }
          },
          "314": {
            "17": {
              "name": "extractParams",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "params"
              ],
              "range": [
                [
                  314,
                  17
                ],
                [
                  320,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "320": {
            "11": {
              "name": "compare",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "other"
              ],
              "range": [
                [
                  320,
                  11
                ],
                [
                  324,
                  1
                ]
              ],
              "doc": "Public: Compares this marker to another based on their ranges. "
            }
          },
          "324": {
            "21": {
              "name": "matchesAttributes",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "args"
              ],
              "range": [
                [
                  324,
                  21
                ],
                [
                  329,
                  1
                ]
              ],
              "doc": "Deprecated: Use ::matchesParams instead "
            }
          },
          "329": {
            "17": {
              "name": "matchesParams",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "params"
              ],
              "range": [
                [
                  329,
                  17
                ],
                [
                  336,
                  1
                ]
              ],
              "doc": " Private: Returns whether this marker matches the given parameters. The parameters\nare the same as {MarkerManager::findMarkers}. "
            }
          },
          "336": {
            "16": {
              "name": "matchesParam",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "key",
                "value"
              ],
              "range": [
                [
                  336,
                  16
                ],
                [
                  357,
                  1
                ]
              ],
              "doc": " Private: Returns whether this marker matches the given parameter name and value.\nThe parameters are the same as {MarkerManager::findMarkers}. "
            }
          },
          "357": {
            "12": {
              "name": "toParams",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "omitId"
              ],
              "range": [
                [
                  357,
                  12
                ],
                [
                  362,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "362": {
            "10": {
              "name": "update",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "params"
              ],
              "range": [
                [
                  362,
                  10
                ],
                [
                  372,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "372": {
            "22": {
              "name": "handleBufferChange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "patch"
              ],
              "range": [
                [
                  372,
                  22
                ],
                [
                  419,
                  1
                ]
              ],
              "doc": " Private: Adjusts the marker's start and end positions and possibly its validity\nbased on the given {BufferPatch}. "
            }
          },
          "419": {
            "14": {
              "name": "buildPatch",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "newParams"
              ],
              "range": [
                [
                  419,
                  14
                ],
                [
                  430,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "430": {
            "14": {
              "name": "applyPatch",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "patch",
                "textChanged"
              ],
              "range": [
                [
                  430,
                  14
                ],
                [
                  477,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "477": {
            "19": {
              "name": "updateIntervals",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  477,
                  19
                ],
                [
                  478,
                  60
                ]
              ],
              "doc": " Private: Updates the interval index on the marker manager with the marker's current\nrange. "
            }
          }
        },
        "exports": 59
      },
      "src/point.coffee": {
        "objects": {
          "11": {
            "0": {
              "type": "class",
              "name": "Point",
              "bindingType": "exports",
              "classProperties": [
                [
                  24,
                  15
                ],
                [
                  36,
                  8
                ]
              ],
              "prototypeProperties": [
                [
                  44,
                  15
                ],
                [
                  47,
                  8
                ],
                [
                  51,
                  10
                ],
                [
                  56,
                  13
                ],
                [
                  60,
                  7
                ],
                [
                  70,
                  11
                ],
                [
                  86,
                  11
                ],
                [
                  101,
                  11
                ],
                [
                  108,
                  14
                ],
                [
                  113,
                  21
                ],
                [
                  118,
                  17
                ],
                [
                  123,
                  24
                ],
                [
                  127,
                  11
                ],
                [
                  131,
                  13
                ],
                [
                  135,
                  12
                ]
              ],
              "doc": " Public: Represents a point in a buffer in row/column coordinates.\n\nEvery public method that takes a point also accepts a *point-compatible*\n{Array}. This means a 2-element array containing {Number}s representing the\nrow and column. So the following are equivalent:\n\n```coffee\nnew Point(1, 2)\n[1, 2]\n``` ",
              "range": [
                [
                  11,
                  0
                ],
                [
                  136,
                  27
                ]
              ]
            }
          },
          "24": {
            "15": {
              "name": "fromObject",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "object",
                "copy"
              ],
              "range": [
                [
                  24,
                  15
                ],
                [
                  36,
                  1
                ]
              ],
              "doc": " Public: Convert any point-compatible object to a {Point}.\n\n* object:\n    This can be an object that's already a {Point}, in which case it's\n    simply returned, or an array containing two {Number}s representing the\n    row and column.\n\n* copy:\n    An optional boolean indicating whether to force the copying of objects\n    that are already points.\n\nReturns: A {Point} based on the given object. "
            }
          },
          "36": {
            "8": {
              "name": "min",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "point1",
                "point2"
              ],
              "range": [
                [
                  36,
                  8
                ],
                [
                  44,
                  1
                ]
              ],
              "doc": "Public: Returns the given point that is earlier in the buffer. "
            }
          },
          "44": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null,
                null
              ],
              "range": [
                [
                  44,
                  15
                ],
                [
                  44,
                  36
                ]
              ],
              "doc": "~Private~"
            }
          },
          "47": {
            "8": {
              "name": "copy",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  47,
                  8
                ],
                [
                  51,
                  1
                ]
              ],
              "doc": "Public: Returns a new {Point} with the same row and column. "
            }
          },
          "51": {
            "10": {
              "name": "freeze",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  51,
                  10
                ],
                [
                  56,
                  1
                ]
              ],
              "doc": "Public: Makes this point immutable and returns itself. "
            }
          },
          "56": {
            "13": {
              "name": "translate",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "delta"
              ],
              "range": [
                [
                  56,
                  13
                ],
                [
                  60,
                  1
                ]
              ],
              "doc": " Public: Return a new {Point} based on shifting this point by the given delta,\nwhich is represented by another {Point}. "
            }
          },
          "60": {
            "7": {
              "name": "add",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "other"
              ],
              "range": [
                [
                  60,
                  7
                ],
                [
                  70,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "70": {
            "11": {
              "name": "splitAt",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "column"
              ],
              "range": [
                [
                  70,
                  11
                ],
                [
                  86,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "86": {
            "11": {
              "name": "compare",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "other"
              ],
              "range": [
                [
                  86,
                  11
                ],
                [
                  101,
                  1
                ]
              ],
              "doc": " Public:\n\n* other: A {Point} or point-compatible {Array}.\n\nReturns:\n * -1 if this point precedes the argument.\n * 0 if this point is equivalent to the argument.\n * 1 if this point follows the argument. "
            }
          },
          "101": {
            "11": {
              "name": "isEqual",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "other"
              ],
              "range": [
                [
                  101,
                  11
                ],
                [
                  108,
                  1
                ]
              ],
              "doc": " Public: Returns a {Boolean} indicating whether this point has the same row\nand column as the given {Point} or point-compatible {Array}. "
            }
          },
          "108": {
            "14": {
              "name": "isLessThan",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "other"
              ],
              "range": [
                [
                  108,
                  14
                ],
                [
                  113,
                  1
                ]
              ],
              "doc": " Public: Returns a {Boolean} indicating whether this point precedes the given\n{Point} or point-compatible {Array}. "
            }
          },
          "113": {
            "21": {
              "name": "isLessThanOrEqual",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "other"
              ],
              "range": [
                [
                  113,
                  21
                ],
                [
                  118,
                  1
                ]
              ],
              "doc": " Public: Returns a {Boolean} indicating whether this point precedes or is\nequal to the given {Point} or point-compatible {Array}. "
            }
          },
          "118": {
            "17": {
              "name": "isGreaterThan",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "other"
              ],
              "range": [
                [
                  118,
                  17
                ],
                [
                  123,
                  1
                ]
              ],
              "doc": " Public: Returns a {Boolean} indicating whether this point follows the given\n{Point} or point-compatible {Array}. "
            }
          },
          "123": {
            "24": {
              "name": "isGreaterThanOrEqual",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "other"
              ],
              "range": [
                [
                  123,
                  24
                ],
                [
                  127,
                  1
                ]
              ],
              "doc": " Public: Returns a {Boolean} indicating whether this point follows or is\nequal to the given {Point} or point-compatible {Array}. "
            }
          },
          "127": {
            "11": {
              "name": "toArray",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  127,
                  11
                ],
                [
                  131,
                  1
                ]
              ],
              "doc": "Public: Returns an array of this point's row and column. "
            }
          },
          "131": {
            "13": {
              "name": "serialize",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  131,
                  13
                ],
                [
                  135,
                  1
                ]
              ],
              "doc": "Public: Returns an array of this point's row and column. "
            }
          },
          "135": {
            "12": {
              "name": "toString",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  135,
                  12
                ],
                [
                  136,
                  27
                ]
              ],
              "doc": "Public: Returns a string representation of the point. "
            }
          }
        },
        "exports": 11
      },
      "src/range.coffee": {
        "objects": {
          "0": {
            "7": {
              "name": "Grim",
              "type": "import",
              "range": [
                [
                  0,
                  7
                ],
                [
                  0,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "grim@0.11.0"
            }
          },
          "1": {
            "8": {
              "name": "Point",
              "type": "import",
              "range": [
                [
                  1,
                  8
                ],
                [
                  1,
                  24
                ]
              ],
              "bindingType": "variable",
              "path": "./point"
            }
          },
          "2": {
            "1": {
              "type": "import",
              "range": [
                [
                  2,
                  1
                ],
                [
                  2,
                  12
                ]
              ],
              "bindingType": "variable",
              "path": "./helpers",
              "name": "newlineRegex",
              "exportsProperty": "newlineRegex"
            }
          },
          "16": {
            "0": {
              "type": "class",
              "name": "Range",
              "bindingType": "exports",
              "classProperties": [
                [
                  18,
                  16
                ],
                [
                  32,
                  15
                ],
                [
                  50,
                  13
                ],
                [
                  79,
                  23
                ]
              ],
              "prototypeProperties": [
                [
                  84,
                  15
                ],
                [
                  96,
                  13
                ],
                [
                  100,
                  8
                ],
                [
                  105,
                  10
                ],
                [
                  112,
                  11
                ],
                [
                  125,
                  11
                ],
                [
                  134,
                  16
                ],
                [
                  139,
                  18
                ],
                [
                  142,
                  7
                ],
                [
                  145,
                  13
                ],
                [
                  149,
                  18
                ],
                [
                  162,
                  17
                ],
                [
                  173,
                  17
                ],
                [
                  187,
                  17
                ],
                [
                  192,
                  22
                ],
                [
                  197,
                  9
                ],
                [
                  205,
                  11
                ],
                [
                  208,
                  11
                ],
                [
                  219,
                  15
                ],
                [
                  223,
                  11
                ],
                [
                  227,
                  12
                ]
              ],
              "doc": " Public: Represents a region in a buffer in row/column coordinates.\n\nEvery public method that takes a range also accepts a *range-compatible*\n{Array}. This means a 2-element array containing {Point}s or point-compatible\narrays. So the following are equivalent:\n\n```coffee\nnew Range(new Point(0, 1), new Point(2, 3))\nnew Range([0, 1], [2, 3])\n[[0, 1], [2, 3]]\n``` ",
              "range": [
                [
                  16,
                  0
                ],
                [
                  228,
                  27
                ]
              ]
            }
          },
          "18": {
            "16": {
              "name": "deserialize",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "array"
              ],
              "range": [
                [
                  18,
                  16
                ],
                [
                  32,
                  1
                ]
              ],
              "doc": "Public: Call this with the result of {Range::serialize} to construct a new Range. "
            }
          },
          "32": {
            "15": {
              "name": "fromObject",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "object",
                "copy"
              ],
              "range": [
                [
                  32,
                  15
                ],
                [
                  50,
                  1
                ]
              ],
              "doc": " Public: Convert any range-compatible object to a {Range}.\n\n* object:\n    This can be an object that's already a {Range}, in which case it's\n    simply returned, or an array containing two {Point}s or point-compatible\n    arrays.\n* copy:\n    An optional boolean indicating whether to force the copying of objects\n    that are already ranges.\n\nReturns: A {Range} based on the given object. "
            }
          },
          "50": {
            "13": {
              "name": "fromText",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "args"
              ],
              "range": [
                [
                  50,
                  13
                ],
                [
                  79,
                  1
                ]
              ],
              "doc": " Private: Returns a range based on an optional starting point and the given text. If\nno starting point is given it will be assumed to be [0, 0].\n\n* startPoint: A {Point} where the range should start.\n* text:\n  A {String} after which the range should end. The range will have as many\n  rows as the text has lines have an end column based on the length of the\n  last line.\n\nReturns: A {Range} "
            }
          },
          "79": {
            "23": {
              "name": "fromPointWithDelta",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "startPoint",
                "rowDelta",
                "columnDelta"
              ],
              "range": [
                [
                  79,
                  23
                ],
                [
                  84,
                  1
                ]
              ],
              "doc": " Public: Returns a {Range} that starts at the given point and ends at the\nstart point plus the given row and column deltas.\n\n* startPoint:\n    A {Point} or point-compatible {Array}\n* rowDelta:\n    A {Number} indicating how many rows to add to the start point to get the\n    end point.\n* columnDelta:\n    A {Number} indicating how many rows to columns to the start point to get\n    the end point.\n\nReturns a {Range} "
            }
          },
          "84": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "pointA",
                "pointB"
              ],
              "range": [
                [
                  84,
                  15
                ],
                [
                  96,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "96": {
            "13": {
              "name": "serialize",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  96,
                  13
                ],
                [
                  100,
                  1
                ]
              ],
              "doc": "Public: Returns a plain javascript object representation of the range. "
            }
          },
          "100": {
            "8": {
              "name": "copy",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  100,
                  8
                ],
                [
                  105,
                  1
                ]
              ],
              "doc": "Public: Returns a new range with the same start and end positions. "
            }
          },
          "105": {
            "10": {
              "name": "freeze",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  105,
                  10
                ],
                [
                  112,
                  1
                ]
              ],
              "doc": " Public: Freezes the range and its start and end point so it becomes\nimmutable and returns itself. "
            }
          },
          "112": {
            "11": {
              "name": "isEqual",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "other"
              ],
              "range": [
                [
                  112,
                  11
                ],
                [
                  125,
                  1
                ]
              ],
              "doc": " Public: Returns a {Boolean} indicating whether this range has the same start\nand end points as the given {Range} or range-compatible {Array}. "
            }
          },
          "125": {
            "11": {
              "name": "compare",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "other"
              ],
              "range": [
                [
                  125,
                  11
                ],
                [
                  134,
                  1
                ]
              ],
              "doc": " Public:\n\n* other: A {Range} or range-compatible {Array}.\n\nReturns:\n * -1 if this range starts before the argument or contains it\n * 0 if this range is equivalent to the argument.\n * 1 if this range starts after the argument or is contained by it. "
            }
          },
          "134": {
            "16": {
              "name": "isSingleLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  134,
                  16
                ],
                [
                  139,
                  1
                ]
              ],
              "doc": " Public: Returns a {Boolean} indicating whether this range starts and ends on\nthe same row. "
            }
          },
          "139": {
            "18": {
              "name": "coversSameRows",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "other"
              ],
              "range": [
                [
                  139,
                  18
                ],
                [
                  142,
                  1
                ]
              ],
              "doc": " Public: Returns a {Boolean} indicating whether this range starts and ends on\nthe same row as the argument. "
            }
          },
          "142": {
            "7": {
              "name": "add",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "delta"
              ],
              "range": [
                [
                  142,
                  7
                ],
                [
                  145,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "145": {
            "13": {
              "name": "translate",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "startPoint",
                "endPoint"
              ],
              "range": [
                [
                  145,
                  13
                ],
                [
                  149,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "149": {
            "18": {
              "name": "intersectsWith",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "otherRange"
              ],
              "range": [
                [
                  149,
                  18
                ],
                [
                  162,
                  1
                ]
              ],
              "doc": "Public: Determines whether this range intersects with the argument. "
            }
          },
          "162": {
            "17": {
              "name": "containsRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "otherRange",
                "exclusive"
              ],
              "range": [
                [
                  162,
                  17
                ],
                [
                  173,
                  1
                ]
              ],
              "doc": " Public: Returns a {Boolean} indicating whether this range contains the given\nrange.\n\n* otherRange: A {Range} or range-compatible {Array}\n* exclusive:\n  A boolean value including that the containment should be exclusive of\n  endpoints. Defaults to false. "
            }
          },
          "173": {
            "17": {
              "name": "containsPoint",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "point",
                "exclusive"
              ],
              "range": [
                [
                  173,
                  17
                ],
                [
                  187,
                  1
                ]
              ],
              "doc": " Public: Returns a {Boolean} indicating whether this range contains the given\npoint.\n\n* point: A {Point} or point-compatible {Array}\n* exclusive:\n  A boolean value including that the containment should be exclusive of\n  endpoints. Defaults to false. "
            }
          },
          "187": {
            "17": {
              "name": "intersectsRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "row"
              ],
              "range": [
                [
                  187,
                  17
                ],
                [
                  192,
                  1
                ]
              ],
              "doc": " Public: Returns a {Boolean} indicating whether this range intersects the\ngiven row {Number}. "
            }
          },
          "192": {
            "22": {
              "name": "intersectsRowRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "startRow",
                "endRow"
              ],
              "range": [
                [
                  192,
                  22
                ],
                [
                  197,
                  1
                ]
              ],
              "doc": " Public: Returns a {Boolean} indicating whether this range intersects the\nrow range indicated by the given startRow and endRow {Number}s. "
            }
          },
          "197": {
            "9": {
              "name": "union",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "otherRange"
              ],
              "range": [
                [
                  197,
                  9
                ],
                [
                  205,
                  1
                ]
              ],
              "doc": "Public: Returns a new range that contains this range and the given range. "
            }
          },
          "205": {
            "11": {
              "name": "isEmpty",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  205,
                  11
                ],
                [
                  208,
                  1
                ]
              ],
              "doc": " Public: Is the start position of this range equal to the end position?\n\nReturns a {Boolean}. "
            }
          },
          "208": {
            "11": {
              "name": "toDelta",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  208,
                  11
                ],
                [
                  219,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "219": {
            "15": {
              "name": "getRowCount",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  219,
                  15
                ],
                [
                  223,
                  1
                ]
              ],
              "doc": " Public: Get the number of rows in this range.\n\nReturns a {Number}. "
            }
          },
          "223": {
            "11": {
              "name": "getRows",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  223,
                  11
                ],
                [
                  227,
                  1
                ]
              ],
              "doc": "Public: Returns an array of all rows in the range. "
            }
          },
          "227": {
            "12": {
              "name": "toString",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  227,
                  12
                ],
                [
                  228,
                  27
                ]
              ],
              "doc": "Public: Returns a string representation of the range. "
            }
          }
        },
        "exports": 16
      },
      "src/text-buffer.coffee": {
        "objects": {
          "0": {
            "4": {
              "name": "_",
              "type": "import",
              "range": [
                [
                  0,
                  4
                ],
                [
                  0,
                  28
                ]
              ],
              "bindingType": "variable",
              "module": "underscore-plus@1.x"
            }
          },
          "1": {
            "12": {
              "name": "Delegator",
              "type": "import",
              "range": [
                [
                  1,
                  12
                ],
                [
                  1,
                  29
                ]
              ],
              "bindingType": "variable",
              "module": "delegato@1.x"
            }
          },
          "2": {
            "7": {
              "name": "Grim",
              "type": "import",
              "range": [
                [
                  2,
                  7
                ],
                [
                  2,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "grim@0.11.0"
            }
          },
          "3": {
            "15": {
              "name": "Serializable",
              "type": "import",
              "range": [
                [
                  3,
                  15
                ],
                [
                  3,
                  36
                ]
              ],
              "bindingType": "variable",
              "module": "serializable@1.x"
            }
          },
          "4": {
            "1": {
              "type": "import",
              "range": [
                [
                  4,
                  1
                ],
                [
                  4,
                  7
                ]
              ],
              "bindingType": "variable",
              "module": "emissary@1.x",
              "name": "Emitter",
              "exportsProperty": "Emitter"
            },
            "10": {
              "type": "import",
              "range": [
                [
                  4,
                  10
                ],
                [
                  4,
                  19
                ]
              ],
              "bindingType": "variable",
              "module": "emissary@1.x",
              "name": "Subscriber",
              "exportsProperty": "Subscriber"
            }
          },
          "5": {
            "1": {
              "type": "import",
              "range": [
                [
                  5,
                  1
                ],
                [
                  5,
                  4
                ]
              ],
              "bindingType": "variable",
              "module": "pathwatcher@^2.0.2",
              "name": "File",
              "exportsProperty": "File"
            }
          },
          "6": {
            "15": {
              "name": "SpanSkipList",
              "type": "import",
              "range": [
                [
                  6,
                  15
                ],
                [
                  6,
                  38
                ]
              ],
              "bindingType": "variable",
              "module": "span-skip-list@~0.1.1"
            }
          },
          "7": {
            "7": {
              "name": "diff",
              "type": "import",
              "range": [
                [
                  7,
                  7
                ],
                [
                  7,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "diff@git://github.com/benogle/jsdiff.git"
            }
          },
          "8": {
            "4": {
              "name": "Q",
              "type": "import",
              "range": [
                [
                  8,
                  4
                ],
                [
                  8,
                  14
                ]
              ],
              "bindingType": "variable",
              "module": "q@~1.0.1"
            }
          },
          "9": {
            "8": {
              "name": "Point",
              "type": "import",
              "range": [
                [
                  9,
                  8
                ],
                [
                  9,
                  24
                ]
              ],
              "bindingType": "variable",
              "path": "./point"
            }
          },
          "10": {
            "8": {
              "name": "Range",
              "type": "import",
              "range": [
                [
                  10,
                  8
                ],
                [
                  10,
                  24
                ]
              ],
              "bindingType": "variable",
              "path": "./range"
            }
          },
          "11": {
            "10": {
              "name": "History",
              "type": "import",
              "range": [
                [
                  11,
                  10
                ],
                [
                  11,
                  28
                ]
              ],
              "bindingType": "variable",
              "path": "./history"
            }
          },
          "12": {
            "16": {
              "name": "MarkerManager",
              "type": "import",
              "range": [
                [
                  12,
                  16
                ],
                [
                  12,
                  41
                ]
              ],
              "bindingType": "variable",
              "path": "./marker-manager"
            }
          },
          "13": {
            "14": {
              "name": "BufferPatch",
              "type": "import",
              "range": [
                [
                  13,
                  14
                ],
                [
                  13,
                  37
                ]
              ],
              "bindingType": "variable",
              "path": "./buffer-patch"
            }
          },
          "14": {
            "1": {
              "type": "import",
              "range": [
                [
                  14,
                  1
                ],
                [
                  14,
                  11
                ]
              ],
              "bindingType": "variable",
              "path": "./helpers",
              "name": "spliceArray",
              "exportsProperty": "spliceArray"
            },
            "14": {
              "type": "import",
              "range": [
                [
                  14,
                  14
                ],
                [
                  14,
                  25
                ]
              ],
              "bindingType": "variable",
              "path": "./helpers",
              "name": "newlineRegex",
              "exportsProperty": "newlineRegex"
            }
          },
          "68": {
            "0": {
              "type": "class",
              "name": "TextBuffer",
              "bindingType": "exports",
              "classProperties": [
                [
                  69,
                  10
                ],
                [
                  70,
                  10
                ],
                [
                  71,
                  17
                ]
              ],
              "prototypeProperties": [
                [
                  78,
                  14
                ],
                [
                  79,
                  24
                ],
                [
                  80,
                  26
                ],
                [
                  81,
                  22
                ],
                [
                  82,
                  12
                ],
                [
                  83,
                  8
                ],
                [
                  84,
                  12
                ],
                [
                  92,
                  15
                ],
                [
                  112,
                  21
                ],
                [
                  119,
                  19
                ],
                [
                  130,
                  11
                ],
                [
                  142,
                  12
                ],
                [
                  148,
                  11
                ],
                [
                  154,
                  16
                ],
                [
                  160,
                  14
                ],
                [
                  168,
                  14
                ],
                [
                  175,
                  15
                ],
                [
                  187,
                  20
                ],
                [
                  196,
                  20
                ],
                [
                  204,
                  11
                ],
                [
                  211,
                  18
                ],
                [
                  260,
                  18
                ],
                [
                  273,
                  10
                ],
                [
                  281,
                  10
                ],
                [
                  289,
                  10
                ],
                [
                  297,
                  13
                ],
                [
                  309,
                  14
                ],
                [
                  337,
                  14
                ],
                [
                  347,
                  14
                ],
                [
                  406,
                  18
                ],
                [
                  436,
                  13
                ],
                [
                  454,
                  16
                ],
                [
                  471,
                  20
                ],
                [
                  478,
                  18
                ],
                [
                  485,
                  12
                ],
                [
                  496,
                  15
                ],
                [
                  515,
                  29
                ],
                [
                  532,
                  29
                ],
                [
                  545,
                  24
                ],
                [
                  548,
                  12
                ],
                [
                  552,
                  8
                ],
                [
                  555,
                  17
                ],
                [
                  565,
                  20
                ],
                [
                  569,
                  11
                ],
                [
                  577,
                  11
                ],
                [
                  579,
                  15
                ],
                [
                  581,
                  14
                ],
                [
                  583,
                  10
                ],
                [
                  587,
                  11
                ],
                [
                  592,
                  19
                ],
                [
                  624,
                  22
                ],
                [
                  629,
                  10
                ],
                [
                  636,
                  32
                ],
                [
                  640,
                  28
                ],
                [
                  650,
                  15
                ],
                [
                  656,
                  11
                ],
                [
                  662,
                  10
                ],
                [
                  668,
                  11
                ],
                [
                  682,
                  18
                ],
                [
                  687,
                  8
                ],
                [
                  693,
                  10
                ],
                [
                  710,
                  14
                ],
                [
                  724,
                  16
                ],
                [
                  726,
                  17
                ],
                [
                  736,
                  27
                ],
                [
                  774,
                  8
                ],
                [
                  792,
                  17
                ],
                [
                  804,
                  11
                ],
                [
                  830,
                  15
                ],
                [
                  881,
                  24
                ],
                [
                  889,
                  14
                ],
                [
                  897,
                  23
                ],
                [
                  910,
                  19
                ],
                [
                  918,
                  16
                ],
                [
                  926,
                  10
                ],
                [
                  930,
                  32
                ],
                [
                  933,
                  26
                ],
                [
                  942,
                  29
                ],
                [
                  947,
                  12
                ],
                [
                  956,
                  8
                ],
                [
                  959,
                  8
                ],
                [
                  969,
                  12
                ],
                [
                  977,
                  20
                ],
                [
                  983,
                  21
                ],
                [
                  987,
                  20
                ],
                [
                  990,
                  18
                ],
                [
                  1029,
                  13
                ],
                [
                  1037,
                  16
                ],
                [
                  1042,
                  13
                ],
                [
                  1047,
                  14
                ],
                [
                  1069,
                  15
                ],
                [
                  1074,
                  18
                ]
              ],
              "doc": " Public: A mutable text container with undo/redo support and the ability to\nannotate logical regions in the text.\n\n## Events\n\n* `changed` -\n     Emitted synchronously whenever the buffer changes. Binding a slow handler\n     to this event has the potential to destroy typing performance. Consider\n     using `contents-modified` instead and aim for extremely fast performance\n     (< 2 ms) if you must bind to it. Your handler will be called with an\n     object containing the following keys.\n     * `oldRange` - The {Range} of the old text\n     * `newRange` - The {Range} of the new text\n     * `oldText` - A {String} containing the text that was replaced\n     * `newText` - A {String} containing the text that was inserted\n\n* `markers-updated` -\n     Emitted synchronously when the `changed` events of all markers have been\n     fired for a change. The order of events is as follows:\n     * The text of the buffer is changed\n     * All markers are updated accordingly, but their `changed` events are not\n       emited\n     * The `changed` event is emitted\n     * The `changed` events of all updated markers are emitted\n     * The `markers-updated` event is emitted.\n\n* `contents-modified` -\n     Emitted asynchronously 300ms (or `TextBuffer::stoppedChangingDelay`)\n     after the last buffer change. This is a good place to handle changes to\n     the buffer without compromising typing performance.\n\n* `modified-status-changed` -\n     Emitted with a {Boolean} when the result of {::isModified} changes.\n\n* `contents-conflicted` -\n     Emitted when the buffer's underlying file changes on disk at a moment\n     when the result of {::isModified} is true.\n\n* `will-reload` -\n     Emitted before the in-memory contents of the buffer are refreshed from\n     the contents of the file on disk.\n\n* `reloaded` -\n     Emitted after the in-memory contents of the buffer are refreshed from\n     the contents of the file on disk.\n\n* `will-be-saved` - Emitted before the buffer is saved to disk.\n\n* `saved` - Emitted after the buffer is saved to disk.\n\n* `destroyed` - Emitted when the buffer is destroyed. ",
              "range": [
                [
                  68,
                  0
                ],
                [
                  1074,
                  46
                ]
              ]
            }
          },
          "69": {
            "10": {
              "name": "Point",
              "type": "primitive",
              "range": [
                [
                  69,
                  10
                ],
                [
                  69,
                  14
                ]
              ],
              "bindingType": "classProperty",
              "reference": {
                "position": [
                  9,
                  8
                ]
              }
            }
          },
          "70": {
            "10": {
              "name": "Range",
              "type": "primitive",
              "range": [
                [
                  70,
                  10
                ],
                [
                  70,
                  14
                ]
              ],
              "bindingType": "classProperty",
              "reference": {
                "position": [
                  10,
                  8
                ]
              }
            }
          },
          "71": {
            "17": {
              "name": "newlineRegex",
              "type": "primitive",
              "range": [
                [
                  71,
                  17
                ],
                [
                  71,
                  28
                ]
              ],
              "bindingType": "classProperty",
              "reference": {
                "position": [
                  14,
                  14
                ]
              }
            }
          },
          "78": {
            "14": {
              "name": "cachedText",
              "type": "primitive",
              "range": [
                [
                  78,
                  14
                ],
                [
                  78,
                  17
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "79": {
            "24": {
              "name": "stoppedChangingDelay",
              "type": "primitive",
              "range": [
                [
                  79,
                  24
                ],
                [
                  79,
                  26
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "80": {
            "26": {
              "name": "stoppedChangingTimeout",
              "type": "primitive",
              "range": [
                [
                  80,
                  26
                ],
                [
                  80,
                  29
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "81": {
            "22": {
              "name": "cachedDiskContents",
              "type": "primitive",
              "range": [
                [
                  81,
                  22
                ],
                [
                  81,
                  25
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "82": {
            "12": {
              "name": "conflict",
              "type": "primitive",
              "range": [
                [
                  82,
                  12
                ],
                [
                  82,
                  16
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "83": {
            "8": {
              "name": "file",
              "type": "primitive",
              "range": [
                [
                  83,
                  8
                ],
                [
                  83,
                  11
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "84": {
            "12": {
              "name": "refcount",
              "type": "primitive",
              "range": [
                [
                  84,
                  12
                ],
                [
                  84,
                  12
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "92": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "params"
              ],
              "range": [
                [
                  92,
                  15
                ],
                [
                  112,
                  1
                ]
              ],
              "doc": " Public: Create a new buffer with the given params.\n\nparams - A {String} of text or an {Object} with the following keys:\n  :load - A {Boolean}, `true` to asynchronously load the buffer from disk\n          after initialization.\n  :text - The initial {String} text of the buffer. "
            }
          },
          "112": {
            "21": {
              "name": "deserializeParams",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "params"
              ],
              "range": [
                [
                  112,
                  21
                ],
                [
                  119,
                  1
                ]
              ],
              "doc": "Private: Called by {Serializable} mixin during deserialization. "
            }
          },
          "119": {
            "19": {
              "name": "serializeParams",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  119,
                  19
                ],
                [
                  130,
                  1
                ]
              ],
              "doc": "Private: Called by {Serializable} mixin during serialization. "
            }
          },
          "130": {
            "11": {
              "name": "getText",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  130,
                  11
                ],
                [
                  142,
                  1
                ]
              ],
              "doc": " Public: Get the entire text of the buffer.\n\nReturns a {String}. "
            }
          },
          "142": {
            "12": {
              "name": "getLines",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  142,
                  12
                ],
                [
                  148,
                  1
                ]
              ],
              "doc": " Public: Get the text of all lines in the buffer, without their line endings.\n\nReturns an {Array} of {String}s. "
            }
          },
          "148": {
            "11": {
              "name": "isEmpty",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  148,
                  11
                ],
                [
                  154,
                  1
                ]
              ],
              "doc": " Public: Determine whether the buffer is empty.\n\nReturns a {Boolean}. "
            }
          },
          "154": {
            "16": {
              "name": "getLineCount",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  154,
                  16
                ],
                [
                  160,
                  1
                ]
              ],
              "doc": " Public: Get the number of lines in the buffer.\n\nReturns a {Number}. "
            }
          },
          "160": {
            "14": {
              "name": "getLastRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  160,
                  14
                ],
                [
                  168,
                  1
                ]
              ],
              "doc": " Public: Get the last 0-indexed row in the buffer.\n\nReturns a {Number}. "
            }
          },
          "168": {
            "14": {
              "name": "lineForRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "row"
              ],
              "range": [
                [
                  168,
                  14
                ],
                [
                  175,
                  1
                ]
              ],
              "doc": " Public: Get the text of the line at the given row, without its line ending.\n\nrow - A {Number} representing a 0-indexed row.\n\nReturns a {String}. "
            }
          },
          "175": {
            "15": {
              "name": "getLastLine",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  175,
                  15
                ],
                [
                  187,
                  1
                ]
              ],
              "doc": " Public: Get the text of the last line of the buffer, without its line\nending.\n\nReturns a {String}. "
            }
          },
          "187": {
            "20": {
              "name": "lineEndingForRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "row"
              ],
              "range": [
                [
                  187,
                  20
                ],
                [
                  196,
                  1
                ]
              ],
              "doc": " Public: Get the line ending for the given 0-indexed row.\n\nrow - A {Number} indicating the row.\n\nThe returned newline is represented as a literal string: `'\\n'`, `'\\r'`,\n`'\\r\\n'`, or `''` for the last line of the buffer, which doesn't end in a\nnewline.\n\nReturns a {String}. "
            }
          },
          "196": {
            "20": {
              "name": "lineLengthForRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "row"
              ],
              "range": [
                [
                  196,
                  20
                ],
                [
                  204,
                  1
                ]
              ],
              "doc": " Public: Get the length of the line for the given 0-indexed row, without its\nline ending.\n\nrow - A {Number} indicating the row.\n\nReturns a {Number}. "
            }
          },
          "204": {
            "11": {
              "name": "setText",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "text"
              ],
              "range": [
                [
                  204,
                  11
                ],
                [
                  211,
                  1
                ]
              ],
              "doc": " Public: Replace the entire contents of the buffer with the given text.\n\ntext - A {String}\n\nReturns a {Range} spanning the new buffer contents. "
            }
          },
          "211": {
            "18": {
              "name": "setTextViaDiff",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "text"
              ],
              "range": [
                [
                  211,
                  18
                ],
                [
                  260,
                  1
                ]
              ],
              "doc": " Public: Replace the current buffer contents by applying a diff based on the\ngiven text.\n\ntext - A {String} containing the new buffer contents. "
            }
          },
          "260": {
            "18": {
              "name": "setTextInRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "range",
                "text",
                "normalizeLineEndings"
              ],
              "range": [
                [
                  260,
                  18
                ],
                [
                  273,
                  1
                ]
              ],
              "doc": " Public: Set the text in the given range.\n\nrange - A {Range}.\ntext - A {String}.\n\nReturns the {Range} of the inserted text. "
            }
          },
          "273": {
            "10": {
              "name": "insert",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "position",
                "text",
                "normalizeLineEndings"
              ],
              "range": [
                [
                  273,
                  10
                ],
                [
                  281,
                  1
                ]
              ],
              "doc": " Public: Insert text at the given position.\n\nposition - A {Point} representing the insertion location. The position is\n           clipped before insertion.\ntext - A {String} representing the text to insert.\n\nReturns the {Range} of the inserted text. "
            }
          },
          "281": {
            "10": {
              "name": "append",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "text",
                "normalizeLineEndings"
              ],
              "range": [
                [
                  281,
                  10
                ],
                [
                  289,
                  1
                ]
              ],
              "doc": " Public: Append text to the end of the buffer.\n\ntext - A {String} representing the text text to append.\n\nReturns the {Range} of the inserted text "
            }
          },
          "289": {
            "10": {
              "name": "delete",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "range"
              ],
              "range": [
                [
                  289,
                  10
                ],
                [
                  297,
                  1
                ]
              ]
            }
          },
          "297": {
            "13": {
              "name": "deleteRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "row"
              ],
              "range": [
                [
                  297,
                  13
                ],
                [
                  309,
                  1
                ]
              ],
              "doc": " Public: Delete the line associated with a specified row.\n\nrow - A {Number} representing the 0-indexed row to delete.\n\nReturns the {Range} of the deleted text. "
            }
          },
          "309": {
            "14": {
              "name": "deleteRows",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "startRow",
                "endRow"
              ],
              "range": [
                [
                  309,
                  14
                ],
                [
                  337,
                  1
                ]
              ],
              "doc": " Public: Delete the lines associated with the specified row range.\n\nstartRow - A {Number} representing the first row to delete.\nendRow - A {Number} representing the last row to delete, inclusive.\n\nIf the row range is out of bounds, it will be clipped. If the startRow is\ngreater than the end row, they will be reordered.\n\nReturns the {Range} of the deleted text. "
            }
          },
          "337": {
            "14": {
              "name": "buildPatch",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "oldRange",
                "newText",
                "normalizeLineEndings"
              ],
              "range": [
                [
                  337,
                  14
                ],
                [
                  347,
                  1
                ]
              ],
              "doc": " Private: Builds a {BufferPatch}, which is used to modify the buffer and is also\npushed into the undo history so it can be undone. "
            }
          },
          "347": {
            "14": {
              "name": "applyPatch",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                null
              ],
              "range": [
                [
                  347,
                  14
                ],
                [
                  406,
                  1
                ]
              ],
              "doc": " Private: Applies a {BufferPatch} to the buffer based on its old range and new text.\nAlso applies any {MarkerPatch}es associated with the {BufferPatch}. "
            }
          },
          "406": {
            "18": {
              "name": "getTextInRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "range"
              ],
              "range": [
                [
                  406,
                  18
                ],
                [
                  436,
                  1
                ]
              ],
              "doc": " Public: Get the text in a range.\n\nrange - A {Range}\n\nReturns a {String} "
            }
          },
          "436": {
            "13": {
              "name": "clipRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "range"
              ],
              "range": [
                [
                  436,
                  13
                ],
                [
                  454,
                  1
                ]
              ],
              "doc": " Public: Clip the given range so it starts and ends at valid positions.\n\nFor example, the position [1, 100] is out of bounds if the line at row 1 is\nonly 10 characters long, and it would be clipped to (1, 10).\n\nrange - A {Range} or range-compatible {Array} to clip.\n\nReturns the given {Range} if it is already in bounds, or a new clipped\n{Range} if the given range is out-of-bounds. "
            }
          },
          "454": {
            "16": {
              "name": "clipPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "position"
              ],
              "range": [
                [
                  454,
                  16
                ],
                [
                  471,
                  1
                ]
              ],
              "doc": " Public: Clip the given point so it is at a valid position in the buffer.\n\nFor example, the position (1, 100) is out of bounds if the line at row 1 is\nonly 10 characters long, and it would be clipped to (1, 10)\n\nposition - A {Point} or point-compatible {Array}.\n\nReturns a new {Point} if the given position is invalid, otherwise returns\nthe given position. "
            }
          },
          "471": {
            "20": {
              "name": "getFirstPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  471,
                  20
                ],
                [
                  478,
                  1
                ]
              ],
              "doc": " Public: Get the first position in the buffer, which is always `[0, 0]`.\n\nReturns a {Point}. "
            }
          },
          "478": {
            "18": {
              "name": "getEndPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  478,
                  18
                ],
                [
                  485,
                  1
                ]
              ],
              "doc": " Public: Get the maximal position in the buffer, where new text would be\nappended.\n\nReturns a {Point}. "
            }
          },
          "485": {
            "12": {
              "name": "getRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  485,
                  12
                ],
                [
                  496,
                  1
                ]
              ],
              "doc": " Public: Get the range spanning from `[0, 0]` to {::getEndPosition}.\n\nReturns a {Range}. "
            }
          },
          "496": {
            "15": {
              "name": "rangeForRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "row",
                "includeNewline"
              ],
              "range": [
                [
                  496,
                  15
                ],
                [
                  515,
                  1
                ]
              ],
              "doc": " Public: Get the range for the given row\n\nrow - A {Number} representing a 0-indexed row.\nincludeNewline - A {Boolean} indicating whether or not to include the\n                 newline, which results in a range that extends to the start\n                 of the next line.\n\nReturns a {Range}. "
            }
          },
          "515": {
            "29": {
              "name": "characterIndexForPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "position"
              ],
              "range": [
                [
                  515,
                  29
                ],
                [
                  532,
                  1
                ]
              ],
              "doc": " Public: Convert a position in the buffer in row/column coordinates to an\nabsolute character offset, inclusive of line ending characters.\n\nThe position is clipped prior to translating.\n\nposition - A {Point}.\n\nReturns a {Number}. "
            }
          },
          "532": {
            "29": {
              "name": "positionForCharacterIndex",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "offset"
              ],
              "range": [
                [
                  532,
                  29
                ],
                [
                  545,
                  1
                ]
              ],
              "doc": " Public: Convert an absolute character offset, inclusive of newlines, to a\nposition in the buffer in row/column coordinates.\n\nThe offset is clipped prior to translating.\n\noffset - A {Number}.\n\nReturns a {Point}. "
            }
          },
          "545": {
            "24": {
              "name": "getMaxCharacterIndex",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  545,
                  24
                ],
                [
                  548,
                  1
                ]
              ],
              "doc": " Public: Get the length of the buffer in characters.\n\nReturns a {Number}. "
            }
          },
          "548": {
            "12": {
              "name": "loadSync",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  548,
                  12
                ],
                [
                  552,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "552": {
            "8": {
              "name": "load",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  552,
                  8
                ],
                [
                  555,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "555": {
            "17": {
              "name": "finishLoading",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  555,
                  17
                ],
                [
                  565,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "565": {
            "20": {
              "name": "handleTextChange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "event"
              ],
              "range": [
                [
                  565,
                  20
                ],
                [
                  569,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "569": {
            "11": {
              "name": "destroy",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  569,
                  11
                ],
                [
                  577,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "577": {
            "11": {
              "name": "isAlive",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  577,
                  11
                ],
                [
                  577,
                  27
                ]
              ],
              "doc": "~Private~"
            }
          },
          "579": {
            "15": {
              "name": "isDestroyed",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  579,
                  15
                ],
                [
                  579,
                  27
                ]
              ],
              "doc": "~Private~"
            }
          },
          "581": {
            "14": {
              "name": "isRetained",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  581,
                  14
                ],
                [
                  581,
                  29
                ]
              ],
              "doc": "~Private~"
            }
          },
          "583": {
            "10": {
              "name": "retain",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  583,
                  10
                ],
                [
                  587,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "587": {
            "11": {
              "name": "release",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  587,
                  11
                ],
                [
                  592,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "592": {
            "19": {
              "name": "subscribeToFile",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  592,
                  19
                ],
                [
                  624,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "624": {
            "22": {
              "name": "hasMultipleEditors",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  624,
                  22
                ],
                [
                  624,
                  37
                ]
              ],
              "doc": " Private: Identifies if the buffer belongs to multiple editors.\n\nFor example, if the {EditorView} was split.\n\nReturns a {Boolean}. "
            }
          },
          "629": {
            "10": {
              "name": "reload",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  629,
                  10
                ],
                [
                  636,
                  1
                ]
              ],
              "doc": " Public: Reload the buffer's contents from disk.\n\nSets the buffer's content to the cached disk contents "
            }
          },
          "636": {
            "32": {
              "name": "updateCachedDiskContentsSync",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  636,
                  32
                ],
                [
                  640,
                  1
                ]
              ],
              "doc": "Private: Rereads the contents of the file, and stores them in the cache. "
            }
          },
          "640": {
            "28": {
              "name": "updateCachedDiskContents",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  640,
                  28
                ],
                [
                  650,
                  1
                ]
              ],
              "doc": "Private: Rereads the contents of the file, and stores them in the cache. "
            }
          },
          "650": {
            "15": {
              "name": "getBaseName",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  650,
                  15
                ],
                [
                  656,
                  1
                ]
              ],
              "doc": " Private: Get the basename of the associated file.\n\nThe basename is the name portion of the file's path, without the containing\ndirectories.\n\nReturns a {String}. "
            }
          },
          "656": {
            "11": {
              "name": "getPath",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  656,
                  11
                ],
                [
                  662,
                  1
                ]
              ],
              "doc": " Pubilc: Get the path of the associated file.\n\nReturns a {String}. "
            }
          },
          "662": {
            "10": {
              "name": "getUri",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  662,
                  10
                ],
                [
                  668,
                  1
                ]
              ],
              "doc": " Public: Get the path of the associated file.\n\nReturns a {String}. "
            }
          },
          "668": {
            "11": {
              "name": "setPath",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "filePath"
              ],
              "range": [
                [
                  668,
                  11
                ],
                [
                  682,
                  1
                ]
              ],
              "doc": " Public: Set the path for the buffer's associated file.\n\nfilePath - A {String} representing the new file path "
            }
          },
          "682": {
            "18": {
              "name": "getEofPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  682,
                  18
                ],
                [
                  687,
                  1
                ]
              ],
              "doc": "Deprecated: Use {::getEndPosition} instead "
            }
          },
          "687": {
            "8": {
              "name": "save",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  687,
                  8
                ],
                [
                  693,
                  1
                ]
              ],
              "doc": "Public: Save the buffer. "
            }
          },
          "693": {
            "10": {
              "name": "saveAs",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "filePath"
              ],
              "range": [
                [
                  693,
                  10
                ],
                [
                  710,
                  1
                ]
              ],
              "doc": " Public: Save the buffer at a specific path.\n\nfilePath - The path to save at. "
            }
          },
          "710": {
            "14": {
              "name": "isModified",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  710,
                  14
                ],
                [
                  724,
                  1
                ]
              ],
              "doc": " Public: Determine if the in-memory contents of the buffer differ from its\ncontents on disk.\n\nIf the buffer is unsaved, always returns `true` unless the buffer is empty.\n\nReturns a {Boolean}. "
            }
          },
          "724": {
            "16": {
              "name": "isInConflict",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  724,
                  16
                ],
                [
                  724,
                  27
                ]
              ],
              "doc": " Public: Determine if the in-memory contents of the buffer conflict with the\non-disk contents of its associated file.\n\nReturns a {Boolean}. "
            }
          },
          "726": {
            "17": {
              "name": "destroyMarker",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "id"
              ],
              "range": [
                [
                  726,
                  17
                ],
                [
                  736,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "736": {
            "27": {
              "name": "matchesInCharacterRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "regex",
                "startIndex",
                "endIndex"
              ],
              "range": [
                [
                  736,
                  27
                ],
                [
                  774,
                  1
                ]
              ],
              "doc": " Private: Identifies if a character sequence is within a certain range.\n\nregex - The {RegExp} to match.\nstartIndex - A {Number} representing the starting character offset.\nendIndex - A {Number} representing the ending character offset.\n\nReturns an {Array} of matches for the given regex. "
            }
          },
          "774": {
            "8": {
              "name": "scan",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "regex",
                "iterator"
              ],
              "range": [
                [
                  774,
                  8
                ],
                [
                  792,
                  1
                ]
              ],
              "doc": " Public: Scan regular expression matches in the entire buffer, calling the\ngiven iterator function on each match.\n\nIf you're programmatically modifying the results, you may want to try\n{::backwardsScan} to avoid tripping over your own changes.\n\nregex - A {RegExp} to search for.\niterator -\n  A {Function} that's called on each match with an {Object} containing the.\n  following keys:\n  :match - The current regular expression match.\n  :matchText - A {String} with the text of the match.\n  :range - The {Range} of the match.\n  :stop - Call this {Function} to terminate the scan.\n  :replace - Call this {Function} with a {String} to replace the match. "
            }
          },
          "792": {
            "17": {
              "name": "backwardsScan",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "regex",
                "iterator"
              ],
              "range": [
                [
                  792,
                  17
                ],
                [
                  804,
                  1
                ]
              ],
              "doc": " Public: Scan regular expression matches in the entire buffer in reverse\norder, calling the given iterator function on each match.\n\nregex - A {RegExp} to search for.\niterator -\n  A {Function} that's called on each match with an {Object} containing the.\n  following keys:\n  :match - The current regular expression match.\n  :matchText - A {String} with the text of the match.\n  :range - The {Range} of the match.\n  :stop - Call this {Function} to terminate the scan.\n  :replace - Call this {Function} with a {String} to replace the match. "
            }
          },
          "804": {
            "11": {
              "name": "replace",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "regex",
                "replacementText"
              ],
              "range": [
                [
                  804,
                  11
                ],
                [
                  830,
                  1
                ]
              ],
              "doc": " Public: Replace all regular expression matches in the entire buffer.\n\nregex - A {RegExp} representing the matches to be replaced.\nreplacementText - A {String} representing the text to replace each match.\n\nReturns a {Number} representing the number of replacements made. "
            }
          },
          "830": {
            "15": {
              "name": "scanInRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "regex",
                "range",
                "iterator",
                "reverse"
              ],
              "range": [
                [
                  830,
                  15
                ],
                [
                  881,
                  1
                ]
              ],
              "doc": " Public: Scan regular expression matches in a given range , calling the given\niterator function on each match.\n\nregex - A {RegExp} to search for.\nrange - A {Range} in which to search.\niterator -\n  A {Function} that's called on each match with an {Object} containing the.\n  following keys:\n  :match - The current regular expression match.\n  :matchText - A {String} with the text of the match.\n  :range - The {Range} of the match.\n  :stop - Call this {Function} to terminate the scan.\n  :replace - Call this {Function} with a {String} to replace the match. "
            }
          },
          "881": {
            "24": {
              "name": "backwardsScanInRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "regex",
                "range",
                "iterator"
              ],
              "range": [
                [
                  881,
                  24
                ],
                [
                  889,
                  1
                ]
              ],
              "doc": " Public: Scan regular expression matches in a given range in reverse order,\ncalling the given iterator function on each match.\n\nregex - A {RegExp} to search for.\nrange - A {Range} in which to search.\niterator -\n  A {Function} that's called on each match with an {Object} containing the.\n  following keys:\n  :match - The current regular expression match.\n  :matchText - A {String} with the text of the match.\n  :range - The {Range} of the match.\n  :stop - Call this {Function} to terminate the scan.\n  :replace - Call this {Function} with a {String} to replace the match. "
            }
          },
          "889": {
            "14": {
              "name": "isRowBlank",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "row"
              ],
              "range": [
                [
                  889,
                  14
                ],
                [
                  897,
                  1
                ]
              ],
              "doc": " Public: Determine if the given row contains only whitespace.\n\nrow - A {Number} representing a 0-indexed row.\n\nReturns a {Boolean}. "
            }
          },
          "897": {
            "23": {
              "name": "previousNonBlankRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "startRow"
              ],
              "range": [
                [
                  897,
                  23
                ],
                [
                  910,
                  1
                ]
              ],
              "doc": " Public: Given a row, find the first preceding row that's not blank.\n\nstartRow - A {Number} identifying the row to start checking at.\n\nReturns a {Number} or `null` if there's no preceding non-blank row. "
            }
          },
          "910": {
            "19": {
              "name": "nextNonBlankRow",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "startRow"
              ],
              "range": [
                [
                  910,
                  19
                ],
                [
                  918,
                  1
                ]
              ],
              "doc": " Public: Given a row, find the next row that's not blank.\n\nstartRow - A {Number} identifying the row to start checking at.\n\nReturns a {Number} or `null` if there's no next non-blank row. "
            }
          },
          "918": {
            "16": {
              "name": "usesSoftTabs",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  918,
                  16
                ],
                [
                  926,
                  1
                ]
              ],
              "doc": "Private: Deprecate "
            }
          },
          "926": {
            "10": {
              "name": "change",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "oldRange",
                "newText",
                "options"
              ],
              "range": [
                [
                  926,
                  10
                ],
                [
                  930,
                  1
                ]
              ],
              "doc": "Deprecated: Call {::setTextInRange} instead. "
            }
          },
          "930": {
            "32": {
              "name": "cancelStoppedChangingTimeout",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  930,
                  32
                ],
                [
                  933,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "933": {
            "26": {
              "name": "scheduleModifiedEvents",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  933,
                  26
                ],
                [
                  942,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "942": {
            "29": {
              "name": "emitModifiedStatusChanged",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "modifiedStatus"
              ],
              "range": [
                [
                  942,
                  29
                ],
                [
                  947,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "947": {
            "12": {
              "name": "logLines",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "start",
                "end"
              ],
              "range": [
                [
                  947,
                  12
                ],
                [
                  952,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "956": {
            "8": {
              "name": "undo",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  956,
                  8
                ],
                [
                  956,
                  25
                ]
              ],
              "doc": "Public: Undo the last operation. If a transaction is in progress, aborts it. "
            }
          },
          "959": {
            "8": {
              "name": "redo",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  959,
                  8
                ],
                [
                  959,
                  25
                ]
              ],
              "doc": "Public: Redo the last operation "
            }
          },
          "969": {
            "12": {
              "name": "transact",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "fn"
              ],
              "range": [
                [
                  969,
                  12
                ],
                [
                  969,
                  40
                ]
              ],
              "doc": " Public: Batch multiple operations as a single undo/redo step.\n\nAny group of operations that are logically grouped from the perspective of\nundoing and redoing should be performed in a transaction. If you want to\nabort the transaction, call {::abortTransaction} to terminate the function's\nexecution and revert any changes performed up to the abortion.\n\nfn - A {Function} to call inside the transaction. "
            }
          },
          "977": {
            "20": {
              "name": "beginTransaction",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  977,
                  20
                ],
                [
                  977,
                  49
                ]
              ],
              "doc": " Public: Start an open-ended transaction.\n\nCall {::commitTransaction} or {::abortTransaction} to terminate the\ntransaction. If you nest calls to transactions, only the outermost\ntransaction is considered. You must match every begin with a matching\ncommit, but a single call to abort will cancel all nested transactions. "
            }
          },
          "983": {
            "21": {
              "name": "commitTransaction",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  983,
                  21
                ],
                [
                  983,
                  51
                ]
              ],
              "doc": " Public: Commit an open-ended transaction started with {::beginTransaction}\nand push it to the undo stack.\n\nIf transactions are nested, only the outermost commit takes effect. "
            }
          },
          "987": {
            "20": {
              "name": "abortTransaction",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  987,
                  20
                ],
                [
                  987,
                  49
                ]
              ],
              "doc": " Public: Abort an open transaction, undoing any operations performed so far\nwithin the transaction. "
            }
          },
          "990": {
            "18": {
              "name": "clearUndoStack",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  990,
                  18
                ],
                [
                  990,
                  45
                ]
              ],
              "doc": "Public: Clear the undo stack. "
            }
          },
          "1029": {
            "13": {
              "name": "markRange",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "range",
                "properties"
              ],
              "range": [
                [
                  1029,
                  13
                ],
                [
                  1029,
                  72
                ]
              ],
              "doc": " Public: Create a marker with the given range. This marker will maintain\nits logical location as the buffer is changed, so if you mark a particular\nword, the marker will remain over that word even if the word's location in\nthe buffer changes.\n\n* range: A {Range} or range-compatible {Array}\n* properties:\n    A hash of key-value pairs to associate with the marker. There are also\n    reserved property names that have marker-specific meaning:\n      :reversed -\n        Creates the marker in a reversed orientation. Defaults to false.\n      :persistent -\n        Whether to include this marker when serializing the buffer. Defaults\n        to true.\n      :invalidate -\n        Determines the rules by which changes to the buffer *invalidate* the\n        marker. Defaults to 'overlap', but can be any of the following\n        strategies, in order of fragility:\n        * 'never':\n            The marker is never marked as invalid. This is a good choice for\n            markers representing selections in an editor.\n        * 'surround':\n            The marker is invalidated by changes that completely surround it.\n        * 'overlap':\n            The marker is invalidated by changes that surround the start or\n            end of the marker. This is the default.\n        * 'inside':\n            The marker is invalidated by changes that extend into the\n            inside of the marker. Changes that end at the marker's start or\n            start at the marker's end do not invalidate the marker.\n        * 'touch':\n            The marker is invalidated by a change that touches the marked\n            region in any way, including changes that end at the marker's\n            start or start at the marker's end. This is the most fragile\n            strategy.\n\nReturns a {Marker}. "
            }
          },
          "1037": {
            "16": {
              "name": "markPosition",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "position",
                "properties"
              ],
              "range": [
                [
                  1037,
                  16
                ],
                [
                  1037,
                  84
                ]
              ],
              "doc": " Public: Create a marker at the given position with no tail.\n\n:position - {Point} or point-compatible {Array}\n:properties - This is the same as the `properties` parameter in {::markRange}\n\nReturns a {Marker}. "
            }
          },
          "1042": {
            "13": {
              "name": "getMarker",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "id"
              ],
              "range": [
                [
                  1042,
                  13
                ],
                [
                  1042,
                  42
                ]
              ],
              "doc": " Public: Get an existing marker by its id.\n\nReturns a {Marker}. "
            }
          },
          "1047": {
            "14": {
              "name": "getMarkers",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1047,
                  14
                ],
                [
                  1047,
                  37
                ]
              ],
              "doc": " Public: Get all existing markers on the buffer.\n\nReturns an {Array} of {Marker}s. "
            }
          },
          "1069": {
            "15": {
              "name": "findMarkers",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "params"
              ],
              "range": [
                [
                  1069,
                  15
                ],
                [
                  1069,
                  54
                ]
              ],
              "doc": " Public: Find markers conforming to the given parameters.\n\n:params -\n  A hash of key-value pairs constraining the set of returned markers. You\n  can query against custom marker properties by listing the desired\n  key-value pairs here. In addition, the following keys are reserved and\n  have special semantics:\n  * 'startPosition': Only include markers that start at the given {Point}.\n  * 'endPosition': Only include markers that end at the given {Point}.\n  * 'containsPoint': Only include markers that contain the given {Point}, inclusive.\n  * 'containsRange': Only include markers that contain the given {Range}, inclusive.\n  * 'startRow': Only include markers that start at the given row {Number}.\n  * 'endRow': Only include markers that end at the given row {Number}.\n  * 'intersectsRow': Only include markers that intersect the given row {Number}.\n\nFinds markers that conform to all of the given parameters. Markers are\nsorted based on their position in the buffer. If two markers start at the\nsame position, the larger marker comes first.\n\nReturns an {Array} of {Marker}s. "
            }
          },
          "1074": {
            "18": {
              "name": "getMarkerCount",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  1074,
                  18
                ],
                [
                  1074,
                  45
                ]
              ],
              "doc": " Public: Get the number of markers in the buffer.\n\nReturns a {Number}. "
            }
          }
        },
        "exports": 68
      }
    }
  },
  {
    "repository": "https://github.com/atom/theorist.git",
    "version": "1.0.1",
    "files": {
      "src/model.coffee": {
        "objects": {
          "0": {
            "1": {
              "type": "import",
              "range": [
                [
                  0,
                  1
                ],
                [
                  0,
                  8
                ]
              ],
              "bindingType": "variable",
              "module": "emissary@1.x",
              "name": "Behavior",
              "exportsProperty": "Behavior"
            },
            "11": {
              "type": "import",
              "range": [
                [
                  0,
                  11
                ],
                [
                  0,
                  20
                ]
              ],
              "bindingType": "variable",
              "module": "emissary@1.x",
              "name": "Subscriber",
              "exportsProperty": "Subscriber"
            },
            "23": {
              "type": "import",
              "range": [
                [
                  0,
                  23
                ],
                [
                  0,
                  29
                ]
              ],
              "bindingType": "variable",
              "module": "emissary@1.x",
              "name": "Emitter",
              "exportsProperty": "Emitter"
            }
          },
          "1": {
            "20": {
              "name": "PropertyAccessors",
              "type": "import",
              "range": [
                [
                  1,
                  20
                ],
                [
                  1,
                  47
                ]
              ],
              "bindingType": "variable",
              "module": "property-accessors@1.x"
            }
          },
          "2": {
            "12": {
              "name": "Delegator",
              "type": "import",
              "range": [
                [
                  2,
                  12
                ],
                [
                  2,
                  29
                ]
              ],
              "bindingType": "variable",
              "module": "delegato@1.x"
            }
          },
          "4": {
            "17": {
              "name": "1",
              "type": "primitive",
              "range": [
                [
                  4,
                  17
                ],
                [
                  4,
                  17
                ]
              ]
            }
          },
          "7": {
            "0": {
              "type": "class",
              "name": "Model",
              "bindingType": "exports",
              "classProperties": [
                [
                  13,
                  24
                ],
                [
                  15,
                  15
                ],
                [
                  21,
                  13
                ],
                [
                  32,
                  13
                ],
                [
                  42,
                  24
                ],
                [
                  45,
                  24
                ],
                [
                  48,
                  29
                ]
              ],
              "prototypeProperties": [
                [
                  51,
                  26
                ],
                [
                  52,
                  13
                ],
                [
                  53,
                  9
                ],
                [
                  55,
                  15
                ],
                [
                  63,
                  12
                ],
                [
                  66,
                  14
                ],
                [
                  71,
                  7
                ],
                [
                  79,
                  7
                ],
                [
                  97,
                  12
                ],
                [
                  107,
                  8
                ],
                [
                  115,
                  11
                ],
                [
                  123,
                  11
                ],
                [
                  125,
                  15
                ]
              ],
              "doc": "~Private~",
              "range": [
                [
                  7,
                  0
                ],
                [
                  125,
                  32
                ]
              ]
            }
          },
          "13": {
            "24": {
              "name": "resetNextInstanceId",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  13,
                  24
                ],
                [
                  13,
                  44
                ]
              ],
              "doc": "~Private~"
            }
          },
          "15": {
            "15": {
              "name": "properties",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "args"
              ],
              "range": [
                [
                  15,
                  15
                ],
                [
                  21,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "21": {
            "13": {
              "name": "property",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "name",
                "defaultValue"
              ],
              "range": [
                [
                  21,
                  13
                ],
                [
                  32,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "32": {
            "13": {
              "name": "behavior",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "name",
                "definition"
              ],
              "range": [
                [
                  32,
                  13
                ],
                [
                  42,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "42": {
            "24": {
              "name": "hasDeclaredProperty",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "name"
              ],
              "range": [
                [
                  42,
                  24
                ],
                [
                  45,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "45": {
            "24": {
              "name": "hasDeclaredBehavior",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "name"
              ],
              "range": [
                [
                  45,
                  24
                ],
                [
                  48,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "48": {
            "29": {
              "name": "evaluateDeclaredBehavior",
              "bindingType": "classProperty",
              "type": "function",
              "paramNames": [
                "name",
                "instance"
              ],
              "range": [
                [
                  48,
                  29
                ],
                [
                  51,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "51": {
            "26": {
              "name": "declaredPropertyValues",
              "type": "primitive",
              "range": [
                [
                  51,
                  26
                ],
                [
                  51,
                  29
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "52": {
            "13": {
              "name": "behaviors",
              "type": "primitive",
              "range": [
                [
                  52,
                  13
                ],
                [
                  52,
                  16
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "53": {
            "9": {
              "name": "alive",
              "type": "primitive",
              "range": [
                [
                  53,
                  9
                ],
                [
                  53,
                  12
                ]
              ],
              "bindingType": "prototypeProperty"
            }
          },
          "55": {
            "15": {
              "name": "constructor",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "params"
              ],
              "range": [
                [
                  55,
                  15
                ],
                [
                  63,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "63": {
            "12": {
              "name": "assignId",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "id"
              ],
              "range": [
                [
                  63,
                  12
                ],
                [
                  66,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "66": {
            "14": {
              "name": "setDefault",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "name"
              ],
              "range": [
                [
                  66,
                  14
                ],
                [
                  71,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "71": {
            "7": {
              "name": "get",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "name",
                "suppressDefault"
              ],
              "range": [
                [
                  71,
                  7
                ],
                [
                  79,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "79": {
            "7": {
              "name": "set",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "name",
                "value"
              ],
              "range": [
                [
                  79,
                  7
                ],
                [
                  94,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "97": {
            "12": {
              "name": "behavior",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "name"
              ],
              "range": [
                [
                  97,
                  12
                ],
                [
                  107,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "107": {
            "8": {
              "name": "when",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [
                "signal",
                "action"
              ],
              "range": [
                [
                  107,
                  8
                ],
                [
                  115,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "115": {
            "11": {
              "name": "destroy",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  115,
                  11
                ],
                [
                  123,
                  1
                ]
              ],
              "doc": "~Private~"
            }
          },
          "123": {
            "11": {
              "name": "isAlive",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  123,
                  11
                ],
                [
                  123,
                  19
                ]
              ],
              "doc": "~Private~"
            }
          },
          "125": {
            "15": {
              "name": "isDestroyed",
              "bindingType": "prototypeProperty",
              "type": "function",
              "paramNames": [],
              "range": [
                [
                  125,
                  15
                ],
                [
                  125,
                  31
                ]
              ],
              "doc": "~Private~"
            }
          }
        },
        "exports": 7
      }
    }
  }
]